##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   22/Jun/2016  18:27:56 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  banked                                            #
#    Data model         =  large                                             #
#    Calling convention =  extended stack reentrant                          #
#    Constant location  =  code                                              #
#    Extended stack     =  enabled                                           #
#    Dptr setup         =  1,16                                              #
#    Source file        =  E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\task\t #
#                          ask_idle.c                                        #
#    Command line       =  -I "C:\Program Files\IAR Systems\Embedded         #
#                          Workbench 4.05 Evaluation version\8051\INC\" -I   #
#                          "C:\Program Files\IAR Systems\Embedded Workbench  #
#                          4.05 Evaluation version\8051\INC\CLIB\" -I        #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\api\   #
#                          -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\dis #
#                          play\ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\A #
#                          PP\display\lcd\ -I E:\Juchen\CW6687G\JC_M_328_201 #
#                          60617_P0\APP\display\lcdseg\ -I                   #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\displa #
#                          y\led\ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\ #
#                          APP\display\ledseg\ -I E:\Juchen\CW6687G\JC_M_328 #
#                          _20160617_P0\APP\display\no\ -I                   #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\config #
#                          \ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\c #
#                          ommon\ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\ #
#                          APP\task\ -I E:\Juchen\CW6687G\JC_M_328_20160617_ #
#                          P0\APP\user\ -I E:\Juchen\CW6687G\JC_M_328_201606 #
#                          17_P0\APP\user\mp3res\ -I                         #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\btstac #
#                          k\ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\ #
#                          user\user_config\ -I E:\Juchen\CW6687G\JC_M_328_2 #
#                          0160617_P0\APP\user\user_iis\ -lC                 #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\Debug\ #
#                          List\ -o E:\Juchen\CW6687G\JC_M_328_20160617_P0\A #
#                          PP\Debug\Obj\ -e -z9 --debug --core=plain         #
#                          --dptr=16,1 --data_model=large                    #
#                          --code_model=banked --calling_convention=ext_stac #
#                          k_reentrant --place_constants=code                #
#                          --nr_virtual_regs 20 --extended_stack             #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\task\t #
#                          ask_idle.c                                        #
#    List file          =  E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\Debug\ #
#                          List\task_idle.lst                                #
#    Object file        =  E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\Debug\ #
#                          Obj\task_idle.r51                                 #
#                                                                            #
#                                                                            #
##############################################################################

E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\task\task_idle.c
      1          /*****************************************************************************
      2           * Module    : Task
      3           * File      : task_idle.c
      4           * Author    : Hanny
      5           * Function  : 空闲任务
      6           *****************************************************************************/
      7          #include "include.h"

   \                                 In segment SFR_AN, at 0xf7
   \   unsigned char volatile __sfr WDTCON
   \                     WDTCON:
   \   000000                DS 1
      8          #include "task.h"
      9          #include "api_device.h"
     10          
     11          #if DAC_EN
     12          #pragma data_alignment=2
     13          IAR_XDATA_A u8 spi_pcm_buf[288] @ "SPI_BUF";
     14          
     15          #pragma data_alignment=32
     16          IAR_CONST u8 period[576] = {
     17          	0x00, 0x00, 0x00, 0x00, 0xCC, 0x02, 0x34, 0xFD, 0x97, 0x05, 0x69, 0xFA, 0x60, 0x08, 0xA1, 0xF7,
     18          	0x24, 0x0B, 0xDC, 0xF4, 0xE2, 0x0D, 0x1E, 0xF2, 0x9B, 0x10, 0x66, 0xEF, 0x4A, 0x13, 0xB7, 0xEC,
     19          	0xF1, 0x15, 0x0F, 0xEA, 0x8C, 0x18, 0x74, 0xE7, 0x1C, 0x1B, 0xE4, 0xE4, 0x9F, 0x1D, 0x62, 0xE2,
     20          	0x14, 0x20, 0xED, 0xDF, 0x79, 0x22, 0x88, 0xDD, 0xCB, 0x24, 0x35, 0xDB, 0x0E, 0x27, 0xF3, 0xD8,
     21          	0x3C, 0x29, 0xC4, 0xD6, 0x57, 0x2B, 0xA9, 0xD4, 0x5D, 0x2D, 0xA4, 0xD2, 0x4C, 0x2F, 0xB4, 0xD0,
     22          	0x24, 0x31, 0xDC, 0xCE, 0xE5, 0x32, 0x1B, 0xCD, 0x8C, 0x34, 0x73, 0xCB, 0x1A, 0x36, 0xE5, 0xC9,
     23          	0x8F, 0x37, 0x72, 0xC8, 0xE7, 0x38, 0x1A, 0xC7, 0x24, 0x3A, 0xDC, 0xC5, 0x44, 0x3B, 0xBC, 0xC4,
     24          	0x48, 0x3C, 0xB8, 0xC3, 0x2E, 0x3D, 0xD2, 0xC2, 0xF7, 0x3D, 0x09, 0xC2, 0xA1, 0x3E, 0x5F, 0xC1,
     25          	0x2D, 0x3F, 0xD3, 0xC0, 0x9A, 0x3F, 0x66, 0xC0, 0xE8, 0x3F, 0x18, 0xC0, 0x16, 0x40, 0xE9, 0xBF,
     26          	0x26, 0x40, 0xD9, 0xBF, 0x17, 0x40, 0xE9, 0xBF, 0xE8, 0x3F, 0x17, 0xC0, 0x9A, 0x3F, 0x66, 0xC0,
     27          	0x2E, 0x3F, 0xD3, 0xC0, 0xA1, 0x3E, 0x5F, 0xC1, 0xF7, 0x3D, 0x09, 0xC2, 0x2E, 0x3D, 0xD1, 0xC2,
     28          	0x48, 0x3C, 0xB8, 0xC3, 0x44, 0x3B, 0xBC, 0xC4, 0x24, 0x3A, 0xDD, 0xC5, 0xE7, 0x38, 0x19, 0xC7,
     29          	0x8E, 0x37, 0x72, 0xC8, 0x1B, 0x36, 0xE5, 0xC9, 0x8C, 0x34, 0x73, 0xCB, 0xE4, 0x32, 0x1C, 0xCD,
     30          	0x24, 0x31, 0xDB, 0xCE, 0x4B, 0x2F, 0xB4, 0xD0, 0x5C, 0x2D, 0xA3, 0xD2, 0x56, 0x2B, 0xA9, 0xD4,
     31          	0x3C, 0x29, 0xC4, 0xD6, 0x0D, 0x27, 0xF3, 0xD8, 0xCB, 0x24, 0x34, 0xDB, 0x78, 0x22, 0x88, 0xDD,
     32          	0x14, 0x20, 0xEC, 0xDF, 0xA0, 0x1D, 0x61, 0xE2, 0x1D, 0x1B, 0xE4, 0xE4, 0x8D, 0x18, 0x74, 0xE7,
     33          	0xF1, 0x15, 0x10, 0xEA, 0x4A, 0x13, 0xB6, 0xEC, 0x9A, 0x10, 0x66, 0xEF, 0xE3, 0x0D, 0x1D, 0xF2,
     34          	0x24, 0x0B, 0xDC, 0xF4, 0x5F, 0x08, 0xA1, 0xF7, 0x98, 0x05, 0x69, 0xFA, 0xCD, 0x02, 0x33, 0xFD,
     35          	0x00, 0x00, 0xFF, 0xFF, 0x34, 0xFD, 0xCD, 0x02, 0x69, 0xFA, 0x98, 0x05, 0xA1, 0xF7, 0x60, 0x08,
     36          	0xDC, 0xF4, 0x24, 0x0B, 0x1D, 0xF2, 0xE3, 0x0D, 0x66, 0xEF, 0x9B, 0x10, 0xB6, 0xEC, 0x4A, 0x13,
     37          	0x10, 0xEA, 0xF1, 0x15, 0x74, 0xE7, 0x8C, 0x18, 0xE3, 0xE4, 0x1D, 0x1B, 0x61, 0xE2, 0x9F, 0x1D,
     38          	0xED, 0xDF, 0x13, 0x20, 0x88, 0xDD, 0x78, 0x22, 0x35, 0xDB, 0xCC, 0x24, 0xF4, 0xD8, 0x0D, 0x27,
     39          	0xC4, 0xD6, 0x3C, 0x29, 0xA9, 0xD4, 0x57, 0x2B, 0xA4, 0xD2, 0x5C, 0x2D, 0xB5, 0xD0, 0x4C, 0x2F,
     40          	0xDC, 0xCE, 0x24, 0x31, 0x1C, 0xCD, 0xE5, 0x32, 0x73, 0xCB, 0x8C, 0x34, 0xE5, 0xC9, 0x1B, 0x36,
     41          	0x72, 0xC8, 0x8E, 0x37, 0x19, 0xC7, 0xE6, 0x38, 0xDC, 0xC5, 0x23, 0x3A, 0xBB, 0xC4, 0x44, 0x3B,
     42          	0xB8, 0xC3, 0x48, 0x3C, 0xD2, 0xC2, 0x2E, 0x3D, 0x09, 0xC2, 0xF7, 0x3D, 0x5E, 0xC1, 0xA2, 0x3E,
     43          	0xD3, 0xC0, 0x2C, 0x3F, 0x66, 0xC0, 0x9A, 0x3F, 0x18, 0xC0, 0xE8, 0x3F, 0xEA, 0xBF, 0x17, 0x40,
     44          	0xDA, 0xBF, 0x27, 0x40, 0xE9, 0xBF, 0x17, 0x40, 0x18, 0xC0, 0xE7, 0x3F, 0x66, 0xC0, 0x9A, 0x3F,
     45          	0xD3, 0xC0, 0x2D, 0x3F, 0x5F, 0xC1, 0xA2, 0x3E, 0x09, 0xC2, 0xF7, 0x3D, 0xD2, 0xC2, 0x2F, 0x3D,
     46          	0xB8, 0xC3, 0x48, 0x3C, 0xBC, 0xC4, 0x44, 0x3B, 0xDC, 0xC5, 0x24, 0x3A, 0x19, 0xC7, 0xE8, 0x38,
     47          	0x71, 0xC8, 0x8F, 0x37, 0xE6, 0xC9, 0x1B, 0x36, 0x74, 0xCB, 0x8D, 0x34, 0x1B, 0xCD, 0xE5, 0x32,
     48          	0xDC, 0xCE, 0x24, 0x31, 0xB4, 0xD0, 0x4C, 0x2F, 0xA4, 0xD2, 0x5C, 0x2D, 0xA9, 0xD4, 0x56, 0x2B,
     49          	0xC4, 0xD6, 0x3D, 0x29, 0xF2, 0xD8, 0x0D, 0x27, 0x34, 0xDB, 0xCB, 0x24, 0x88, 0xDD, 0x78, 0x22,
     50          	0xED, 0xDF, 0x13, 0x20, 0x61, 0xE2, 0x9E, 0x1D, 0xE3, 0xE4, 0x1D, 0x1B, 0x74, 0xE7, 0x8C, 0x18,
     51          	0x0F, 0xEA, 0xF1, 0x15, 0xB6, 0xEC, 0x4A, 0x13, 0x66, 0xEF, 0x9B, 0x10, 0x1D, 0xF2, 0xE3, 0x0D,
     52          	0xDC, 0xF4, 0x23, 0x0B, 0xA0, 0xF7, 0x5F, 0x08, 0x69, 0xFA, 0x97, 0x05, 0x34, 0xFD, 0xCC, 0x02
     53          };
     54          #endif
     55          
     56          //task_idle controller
     57          #pragma location="TASK_IDLE_SEG"
     58          void task_idle_display(void);
     59          
     60          //任务初始化
     61          #pragma location="TASK_IDLE_SEG"

   \                                 In segment TASK_IDLE_SEG, align 1, keep-with-next
     62          void task_idle_enter(void)
   \                     task_idle_enter:
     63          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     64              led_mode_off();
   \   000000                ; Setup parameters for call to function led_mode_off
   \   000000   90....       MOV     DPTR,#(led_mode_off & 0xffff)
   \   000003   74..         MOV     A,#((led_mode_off >> 16) & 0xff)
   \   000005   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
     65              led_idle();
   \   000008                ; Setup parameters for call to function led_idle
   \   000008   90....       MOV     DPTR,#(led_idle & 0xffff)
   \   00000B   74..         MOV     A,#((led_idle >> 16) & 0xff)
   \   00000D   80..         SJMP    ??Subroutine0_0
     66          }

   \                                 In segment TASK_IDLE_SEG, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   90....       MOV     DPTR,#(led_mode_on & 0xffff)
   \   000003   74..         MOV     A,#((led_mode_on >> 16) & 0xff)
   \                     ??Subroutine0_0:
   \   000005   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000008   02....       LJMP    ?BRET
     67          
     68          //任务退出
     69          #pragma location="TASK_IDLE_SEG"

   \                                 In segment TASK_IDLE_SEG, align 1, keep-with-next
     70          void task_idle_exit(void)
   \                     task_idle_exit:
     71          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     72          #if MODE_CHANGE_BLUE_ON
     73              led_mode_on();
   \   000000                ; Setup parameters for call to function led_mode_on
   \   000000                REQUIRE ?Subroutine0
   \   000000                ; // Fall through to label ?Subroutine0
     74          #endif
     75          }
     76          
     77          //任务事件
     78          #pragma location="TASK_IDLE_SEG"

   \                                 In segment TASK_IDLE_SEG, align 1, keep-with-next
     79          void task_idle_event(void)
   \                     task_idle_event:
     80          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     81          #if DAC_EN
     82          #if 1
     83              u16 i;
     84              //printf("%02x\n", spi_get_status());
     85              if ((spi_get_status() & 0xff) & BIT(0)) {
     86                  spi_get_pcm(spi_pcm_buf);
     87                  //printf_array(spi_pcm_buf, 288);
     88                  //printf("ok\n");
     89                  for (i=0; i<288; i+=4) {
     90                      while(!(AUCON7 & BIT(7)));
     91                      AUCON5 = spi_pcm_buf[i+1];
     92                      AUCON5 = spi_pcm_buf[i];
     93                      while(!(AUCON7 & BIT(7)));
     94                      AUCON5 = spi_pcm_buf[i+3];
     95                      AUCON5 = spi_pcm_buf[i+2];
     96                  }
     97              }
     98          #else
     99              u16 i;
    100              for (i=0; i<576; ) {
    101                  while(!(AUCON7 & BIT(7)));
    102                  AUCON5 = period[i+1];
    103                  AUCON5 = period[i];
    104                  i+=2;
    105                  while(!(AUCON7 & BIT(7)));
    106                  AUCON5 = period[i+1];
    107                  AUCON5 = period[i];
    108                  i+=2;
    109              }
    110          #endif
    111          #endif
    112              WATCHDOG_CLR();
   \   000000   43F720       ORL     0xf7,#0x20
    113              if (device_need_activate(DEVICE_PC)) {
   \   000003                ; Setup parameters for call to function device_need_activate
   \   000003   7904         MOV     R1,#0x4
   \   000005   12....       LCALL   device_need_activate & 0xFFFF
   \   000008   500D         JNC     ??task_idle_event_0
    114                  if (device_activate(DEVICE_PC)) {
   \   00000A                ; Setup parameters for call to function device_activate
   \   00000A   7904         MOV     R1,#0x4
   \   00000C   12....       LCALL   device_activate & 0xFFFF
   \   00000F   5006         JNC     ??task_idle_event_0
    115                      task_ctl.work_sta = TASK_USBDEV;
   \   000011   740C         MOV     A,#0xc
   \   000013   90....       MOV     DPTR,#task_ctl
   \   000016   F0           MOVX    @DPTR,A
    116                  }
    117              }
    118          }
   \                     ??task_idle_event_0:
   \   000017   02....       LJMP    ?BRET
    119          
    120          //任务主流程
    121          #pragma location="TASK_IDLE_SEG"

   \                                 In segment TASK_IDLE_SEG, align 1, keep-with-next
    122          void task_idle(void)
   \                     task_idle:
    123          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    124              printf("task_idle\n");
   \   000000                ; Setup parameters for call to function my_printf
   \   000000   7A..         MOV     R2,#(`?<Constant "task_idle\\n">` & 0xff)
   \   000002   7B..         MOV     R3,#((`?<Constant "task_idle\\n">` >> 8) & 0xff)
   \   000004   12....       LCALL   my_printf & 0xFFFF
    125              task_idle_enter();
   \   000007                ; Setup parameters for call to function led_mode_off
   \   000007   90....       MOV     DPTR,#(led_mode_off & 0xffff)
   \   00000A   74..         MOV     A,#((led_mode_off >> 16) & 0xff)
   \   00000C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00000F                ; Setup parameters for call to function led_idle
   \   00000F   90....       MOV     DPTR,#(led_idle & 0xffff)
   \   000012   74..         MOV     A,#((led_idle >> 16) & 0xff)
   \   000014   8005         SJMP    ??task_idle_0
    126              while (task_ctl.work_sta == TASK_IDLE) {
    127                  task_idle_event();
   \                     ??task_idle_1:
   \   000016                ; Setup parameters for call to function task_idle_event
   \   000016   90....       MOV     DPTR,#(task_idle_event & 0xffff)
   \   000019   74..         MOV     A,#((task_idle_event >> 16) & 0xff)
   \                     ??task_idle_0:
   \   00001B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    128              }
   \   00001E   90....       MOV     DPTR,#task_ctl
   \   000021   E0           MOVX    A,@DPTR
   \   000022   641C         XRL     A,#0x1c
   \   000024   60F0         JZ      ??task_idle_1
    129              task_idle_exit();
   \   000026                ; Setup parameters for call to function led_mode_on
   \   000026   80..         SJMP    ?Subroutine0
    130          }

   \                                 In segment CODE_C, align 1
   \                     `?<Constant "task_idle\\n">`:
   \   000000   7461736B     DB "task_idle\012"
   \            5F69646C
   \            650A00  
    131          

   Maximum stack usage in bytes:

     Function                  EXT_STACK PSTACK XSTACK
     --------                  --------- ------ ------
     task_idle                        0      0      0
       -> my_printf                   0      0      0
       -> led_mode_off                0      0      0
       -> led_idle                    0      0      0
       -> task_idle_event             0      0      0
       -> led_mode_on                 0      0      0
     task_idle_enter                  0      0      0
       -> led_mode_off                0      0      0
       -> led_idle                    0      0      0
     task_idle_event                  0      0      0
       -> device_need_activate        0      0      0
       -> device_activate             0      0      0
     task_idle_exit                   0      0      0
       -> led_mode_on                 0      0      0


   Segment part sizes:

     Function/Label            Bytes
     --------------            -----
     WDTCON                       1
     task_idle_enter             15
     ?Subroutine0                11
     task_idle_exit               0
     task_idle_event             26
     task_idle                   40
     ?<Constant "task_idle\n">   11

 
 11 bytes in segment CODE_C
  1 byte  in segment SFR_AN
 92 bytes in segment TASK_IDLE_SEG
 
 103 bytes of CODE memory
   0 bytes of DATA memory (+ 1 byte shared)

Errors: none
Warnings: none
