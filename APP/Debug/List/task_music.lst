##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   22/Jun/2016  18:27:57 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  banked                                            #
#    Data model         =  large                                             #
#    Calling convention =  extended stack reentrant                          #
#    Constant location  =  code                                              #
#    Extended stack     =  enabled                                           #
#    Dptr setup         =  1,16                                              #
#    Source file        =  E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\task\t #
#                          ask_music.c                                       #
#    Command line       =  -I "C:\Program Files\IAR Systems\Embedded         #
#                          Workbench 4.05 Evaluation version\8051\INC\" -I   #
#                          "C:\Program Files\IAR Systems\Embedded Workbench  #
#                          4.05 Evaluation version\8051\INC\CLIB\" -I        #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\api\   #
#                          -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\dis #
#                          play\ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\A #
#                          PP\display\lcd\ -I E:\Juchen\CW6687G\JC_M_328_201 #
#                          60617_P0\APP\display\lcdseg\ -I                   #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\displa #
#                          y\led\ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\ #
#                          APP\display\ledseg\ -I E:\Juchen\CW6687G\JC_M_328 #
#                          _20160617_P0\APP\display\no\ -I                   #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\config #
#                          \ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\c #
#                          ommon\ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\ #
#                          APP\task\ -I E:\Juchen\CW6687G\JC_M_328_20160617_ #
#                          P0\APP\user\ -I E:\Juchen\CW6687G\JC_M_328_201606 #
#                          17_P0\APP\user\mp3res\ -I                         #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\btstac #
#                          k\ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\ #
#                          user\user_config\ -I E:\Juchen\CW6687G\JC_M_328_2 #
#                          0160617_P0\APP\user\user_iis\ -lC                 #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\Debug\ #
#                          List\ -o E:\Juchen\CW6687G\JC_M_328_20160617_P0\A #
#                          PP\Debug\Obj\ -e -z9 --debug --core=plain         #
#                          --dptr=16,1 --data_model=large                    #
#                          --code_model=banked --calling_convention=ext_stac #
#                          k_reentrant --place_constants=code                #
#                          --nr_virtual_regs 20 --extended_stack             #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\task\t #
#                          ask_music.c                                       #
#    List file          =  E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\Debug\ #
#                          List\task_music.lst                               #
#    Object file        =  E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\Debug\ #
#                          Obj\task_music.r51                                #
#                                                                            #
#                                                                            #
##############################################################################

E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\task\task_music.c
      1          /*****************************************************************************
      2           * Module    : Task
      3           * File      : task_music.c
      4           * Author    : Hanny
      5           * Function  : 音乐播放任务流程
      6           *****************************************************************************/
      7          #include "include.h"

   \                                 In segment SFR_AN, at 0xf7
   \   unsigned char volatile __sfr WDTCON
   \                     WDTCON:
   \   000000                DS 1
      8          #include "task_NPCP215X.h" 
      9          
     10          #if TASK_MUSIC_EN
     11          #include "task.h"
     12          #include "task_music.h"
     13          #include "user_spi.h"
     14          
     15          //音乐任务调试使能
     16          #define DBG_TASK_MUSIC(...)          //printf(__VA_ARGS__)
     17          
     18          //type_move_ctl move_ctl;
     19          extern u8 work_sta_interrupt;   //任务中断标志
     20          #if MUSIC_ENCRYPT_EN
     21          extern u8 music_encrypt;
     22          extern void music_head_decrypt(void);
     23          extern bool lrc_open_encrypt(void);
     24          #endif
     25          extern u16 crc_calculate(void *buf, u16 len);
     26          void task_music_comm_event(void);
     27          void task_music_comm_deal_msg(u8 msg);
     28          void task_music_get_num(void);
     29          void task_music_prev(void);
     30          void task_music_next(void);
     31          void task_music_event(void);
     32          void task_music_break_save(void);
     33          void task_music_select_numsic(u8 num);
     34          extern u8 dec_ibuf[0xa08];
     35          void task_music_repeat_play(void);
     36          bool task_music_auto_next_device(void);
     37          enum {
     38              PLAYER_NORMAL,                  //正常播放
     39              PLAYER_REPEAT,                  //复读模式
     40          };
     41          
     42          //task music controller

   \                                 In segment MUSIC_XDATA, align 1, root
     43          IAR_XDATA_A type_task_music_ctl t_msc @ "MUSIC_XDATA";
   \                     t_msc:
   \   000000                DS 37
     44          
     45          void task_music_set_a(void);
     46          void task_music_clear_a(void);
     47          bool task_music_get_total(void);
     48          void task_music_repeat_start(u8 repeat_cnt);
     49          void task_music_lrc_init(void);
     50          void task_music_device_remount(void);
     51          void task_music_play_init(void);
     52          void music_play_vol_music(void);
     53          extern type_music_point pt;

   \                                 In segment CODE_C, align 1
     54          IAR_CONST u8 tbl_speed_order[] = {0, 3, 4, 0, 1, 2};
   \                     tbl_speed_order:
   \   000000   00030400     DB 0, 3, 4, 0, 1, 2
   \            0102    
     55          
     56          #define TASK_SUB
     57          #include SET_USER_PATH(CFG_UI_MUSIC_DIR, /ui/ui_music.c)

   \                                 In segment TASK_MUSIC_SEG, align 1, keep-with-next
   \   __banked_func __ext_stack_reentrant void task_music_display(void)
   \                     task_music_display:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000                ; Setup parameters for call to function ledseg_ocx_event
   \   000000   90....       MOV     DPTR,#(ledseg_ocx_event & 0xffff)
   \   000003   74..         MOV     A,#((ledseg_ocx_event >> 16) & 0xff)
   \   000005   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000008   90....       MOV     DPTR,#(ledseg_ocx + 2)
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for task_music_display>_0`:
   \   00000F   00           DB        0
   \   000010   00           DB        0
   \   000011   ....         DW        ??task_music_display_0
   \   000013   ....         DW        ??task_music_display_1
   \                     ??task_music_display_1:
   \   000015   90....       MOV     DPTR,#(sys_ctl + 27)
   \   000018   E0           MOVX    A,@DPTR
   \   000019   7027         JNZ     ??task_music_display_2
   \   00001B   90....       MOV     DPTR,#(sys_ctl + 56)
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   6009         JZ      ??task_music_display_3
   \   000021                ; Setup parameters for call to function ledseg_disp
   \   000021   791B         MOV     R1,#0x1b
   \                     ??task_music_display_4:
   \   000023   90....       MOV     DPTR,#(ledseg_disp & 0xffff)
   \   000026   74..         MOV     A,#((ledseg_disp >> 16) & 0xff)
   \   000028   8015         SJMP    ??task_music_display_5
   \                     ??task_music_display_3:
   \   00002A   90....       MOV     DPTR,#(t_msc + 10)
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000030   5004         JNC     ??task_music_display_6
   \   000032                ; Setup parameters for call to function ledseg_disp
   \   000032   7909         MOV     R1,#0x9
   \   000034   80ED         SJMP    ??task_music_display_4
   \                     ??task_music_display_6:
   \   000036                ; Setup parameters for call to function ledseg_disp
   \   000036   7908         MOV     R1,#0x8
   \   000038   80E9         SJMP    ??task_music_display_4
   \                     ??task_music_display_0:
   \   00003A                ; Setup parameters for call to function ledseg_ocx_display
   \   00003A   90....       MOV     DPTR,#(ledseg_ocx_display & 0xffff)
   \   00003D   74..         MOV     A,#((ledseg_ocx_display >> 16) & 0xff)
   \                     ??task_music_display_5:
   \   00003F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \                     ??task_music_display_2:
   \   000042   02....       LJMP    ?BRET

   \                                 In segment TASK_MUSIC_SEG, align 1, keep-with-next
   \   __banked_func __ext_stack_reentrant void task_music_deal_msg(u8)
   \                     task_music_deal_msg:
   \   000000   EE           MOV     A,R6
   \   000001   C0E0         PUSH    A
   \   000003                ; Saved register size: 1
   \   000003                ; Auto size: 0
   \   000003   E9           MOV     A,R1
   \   000004   FE           MOV     R6,A
   \   000005   7003         JNZ     $+5
   \   000007   02....       LJMP    ??task_music_deal_msg_0 & 0xFFFF
   \   00000A   90....       MOV     DPTR,#(sys_ctl + 56)
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000010   92F0         MOV     B.0,C
   \   000012   90....       MOV     DPTR,#(sys_ctl + 27)
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FA           MOV     R2,A
   \   000017   EE           MOV     A,R6
   \   000018   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for task_music_deal_msg>_0`:
   \   00001B   01           DB        1
   \   00001C   20           DB        32
   \   00001D   29           DB        41
   \   00001E   ....         DW        ??task_music_deal_msg_1
   \   000020   09           DB        9
   \   000021   7E           DB        126
   \   000022   ....         DW        ??task_music_deal_msg_2
   \   000024   81           DB        129
   \   000025   ....         DW        ??task_music_deal_msg_3
   \   000027   82           DB        130
   \   000028   ....         DW        ??task_music_deal_msg_4
   \   00002A   83           DB        131
   \   00002B   ....         DW        ??task_music_deal_msg_5
   \   00002D   8E           DB        142
   \   00002E   ....         DW        ??task_music_deal_msg_6
   \   000030   91           DB        145
   \   000031   ....         DW        ??task_music_deal_msg_3
   \   000033   92           DB        146
   \   000034   ....         DW        ??task_music_deal_msg_4
   \   000036   93           DB        147
   \   000037   ....         DW        ??task_music_deal_msg_5
   \   000039   94           DB        148
   \   00003A   ....         DW        ??task_music_deal_msg_7
   \   00003C   ....         DW        ??task_music_deal_msg_8
   \                     ??task_music_deal_msg_3:
   \   00003E   EA           MOV     A,R2
   \   00003F   6003         JZ      $+5
   \   000041   02....       LJMP    ??task_music_deal_msg_0 & 0xFFFF
   \   000044   A2F0         MOV     C,B.0
   \   000046   5003         JNC     $+5
   \   000048   02....       LJMP    ??task_music_deal_msg_0 & 0xFFFF
   \   00004B                ; Setup parameters for call to function task_music_prev
   \   00004B   90....       MOV     DPTR,#(task_music_prev & 0xffff)
   \   00004E   74..         MOV     A,#((task_music_prev >> 16) & 0xff)
   \                     ??task_music_deal_msg_9:
   \   000050   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000053   02....       LJMP    ??task_music_deal_msg_0 & 0xFFFF
   \                     ??task_music_deal_msg_5:
   \   000056   EA           MOV     A,R2
   \   000057   6003         JZ      $+5
   \   000059   02....       LJMP    ??task_music_deal_msg_0 & 0xFFFF
   \   00005C   A2F0         MOV     C,B.0
   \   00005E   5003         JNC     $+5
   \   000060   02....       LJMP    ??task_music_deal_msg_0 & 0xFFFF
   \   000063                ; Setup parameters for call to function task_music_next
   \   000063   90....       MOV     DPTR,#(task_music_next & 0xffff)
   \   000066   74..         MOV     A,#((task_music_next >> 16) & 0xff)
   \   000068   80E6         SJMP    ??task_music_deal_msg_9
   \                     ??task_music_deal_msg_4:
   \   00006A   EA           MOV     A,R2
   \   00006B   6003         JZ      $+5
   \   00006D   02....       LJMP    ??task_music_deal_msg_0 & 0xFFFF
   \   000070   A2F0         MOV     C,B.0
   \   000072   500C         JNC     ??task_music_deal_msg_10
   \   000074   90....       MOV     DPTR,#(t_msc + 10)
   \   000077   E0           MOVX    A,@DPTR
   \   000078   C2E6         CLR     0xE0 /* A   */.6
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   12....       LCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_0:
   \   00007E   803C         SJMP    ??task_music_deal_msg_11
   \                     ??task_music_deal_msg_10:
   \   000080                ; Setup parameters for call to function AudioCodec_MUTE
   \   000080   7901         MOV     R1,#0x1
   \   000082   90....       MOV     DPTR,#(AudioCodec_MUTE & 0xffff)
   \   000085   74..         MOV     A,#((AudioCodec_MUTE >> 16) & 0xff)
   \   000087   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00008A                ; Setup parameters for call to function music_start_pause
   \   00008A   90....       MOV     DPTR,#(music_start_pause & 0xffff)
   \   00008D   74..         MOV     A,#((music_start_pause >> 16) & 0xff)
   \   00008F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000092   5016         JNC     ??task_music_deal_msg_12
   \   000094   90....       MOV     DPTR,#(t_msc + 10)
   \   000097   E0           MOVX    A,@DPTR
   \   000098   C2E0         CLR     0xE0 /* A   */.0
   \   00009A   F0           MOVX    @DPTR,A
   \   00009B   7401         MOV     A,#0x1
   \   00009D   90....       MOV     DPTR,#(sys_ctl + 60)
   \   0000A0   12....       LCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_2:
   \   0000A3                ; Setup parameters for call to function led_music_play
   \   0000A3   90....       MOV     DPTR,#(led_music_play & 0xffff)
   \   0000A6   74..         MOV     A,#((led_music_play >> 16) & 0xff)
   \   0000A8   800F         SJMP    ??task_music_deal_msg_13
   \                     ??task_music_deal_msg_12:
   \   0000AA   E4           CLR     A
   \   0000AB   90....       MOV     DPTR,#(sys_ctl + 60)
   \   0000AE   12....       LCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_8:
   \   0000B1   D2E0         SETB    0xE0 /* A   */.0
   \   0000B3   F0           MOVX    @DPTR,A
   \   0000B4                ; Setup parameters for call to function led_idle
   \   0000B4   90....       MOV     DPTR,#(led_idle & 0xffff)
   \   0000B7   74..         MOV     A,#((led_idle >> 16) & 0xff)
   \                     ??task_music_deal_msg_13:
   \   0000B9   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \                     ??task_music_deal_msg_11:
   \   0000BC   90....       MOV     DPTR,#(t_msc + 21)
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   D2E3         SETB    0xE0 /* A   */.3
   \                     ??task_music_deal_msg_14:
   \   0000C2   F0           MOVX    @DPTR,A
   \   0000C3   02....       LJMP    ??task_music_deal_msg_0 & 0xFFFF
   \                     ??task_music_deal_msg_1:
   \   0000C6   EA           MOV     A,R2
   \   0000C7   6003         JZ      $+5
   \   0000C9   02....       LJMP    ??task_music_deal_msg_0 & 0xFFFF
   \   0000CC                ; Setup parameters for call to function task_music_select_numsic
   \   0000CC   74E0         MOV     A,#-0x20
   \   0000CE   2E           ADD     A,R6
   \   0000CF   F9           MOV     R1,A
   \   0000D0   90....       MOV     DPTR,#(task_music_select_numsic & 0xffff)
   \   0000D3   74..         MOV     A,#((task_music_select_numsic >> 16) & 0xff)
   \   0000D5   02....       LJMP    ??task_music_deal_msg_9
   \                     ??task_music_deal_msg_6:
   \   0000D8   EA           MOV     A,R2
   \   0000D9   6003         JZ      $+5
   \   0000DB   02....       LJMP    ??task_music_deal_msg_0 & 0xFFFF
   \   0000DE   90....       MOV     DPTR,#(t_msc + 10)
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   A2E4         MOV     C,0xE0 /* A   */.4
   \   0000E4   5007         JNC     ??task_music_deal_msg_15
   \                     ??task_music_deal_msg_16:
   \   0000E6   741B         MOV     A,#0x1b
   \   0000E8   90....       MOV     DPTR,#task_ctl
   \   0000EB   801F         SJMP    ??task_music_deal_msg_17
   \                     ??task_music_deal_msg_15:
   \   0000ED                ; Setup parameters for call to function music_next_device
   \   0000ED   90....       MOV     DPTR,#(music_next_device & 0xffff)
   \   0000F0   74..         MOV     A,#((music_next_device >> 16) & 0xff)
   \   0000F2   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000F5   50EF         JNC     ??task_music_deal_msg_16
   \   0000F7   90....       MOV     DPTR,#(t_msc + 10)
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   D2E6         SETB    0xE0 /* A   */.6
   \   0000FD   F0           MOVX    @DPTR,A
   \   0000FE                ; Setup parameters for call to function task_music_get_num
   \   0000FE   90....       MOV     DPTR,#(task_music_get_num & 0xffff)
   \   000101   74..         MOV     A,#((task_music_get_num >> 16) & 0xff)
   \   000103   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000106   90....       MOV     DPTR,#(t_msc + 10)
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   D2E1         SETB    0xE0 /* A   */.1
   \                     ??task_music_deal_msg_17:
   \   00010C   12....       LCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_9:
   \   00010F   D2E4         SETB    0xE0 /* A   */.4
   \   000111   80AF         SJMP    ??task_music_deal_msg_14
   \                     ??task_music_deal_msg_7:
   \   000113   EA           MOV     A,R2
   \   000114   7069         JNZ     ??task_music_deal_msg_0
   \   000116   90....       MOV     DPTR,#(sys_ctl + 4)
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   FA           MOV     R2,A
   \   00011B   7004         JNZ     ??task_music_deal_msg_18
   \   00011D   7404         MOV     A,#0x4
   \   00011F   800A         SJMP    ??task_music_deal_msg_19
   \                     ??task_music_deal_msg_18:
   \   000121   7404         MOV     A,#0x4
   \   000123   6A           XRL     A,R2
   \   000124   7004         JNZ     ??task_music_deal_msg_20
   \   000126   7401         MOV     A,#0x1
   \   000128   8001         SJMP    ??task_music_deal_msg_19
   \                     ??task_music_deal_msg_20:
   \   00012A   E4           CLR     A
   \                     ??task_music_deal_msg_19:
   \   00012B   F0           MOVX    @DPTR,A
   \   00012C                ; Setup parameters for call to function spi_param_write8
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   FB           MOV     R3,A
   \   00012E   7A06         MOV     R2,#0x6
   \   000130   7900         MOV     R1,#0x0
   \   000132   90....       MOV     DPTR,#(spi_param_write8 & 0xffff)
   \   000135   74..         MOV     A,#((spi_param_write8 >> 16) & 0xff)
   \   000137   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00013A                ; Setup parameters for call to function ledseg_ocx_show_mode_play
   \   00013A   90....       MOV     DPTR,#(ledseg_ocx_show_mode_play & 0xffff)
   \   00013D   74..         MOV     A,#((ledseg_ocx_show_mode_play >> 16) & 0xff)
   \   00013F   02....       LJMP    ??task_music_deal_msg_9
   \                     ??task_music_deal_msg_2:
   \   000142   90....       MOV     DPTR,#(t_msc + 10)
   \   000145   E0           MOVX    A,@DPTR
   \   000146   A2E5         MOV     C,0xE0 /* A   */.5
   \   000148   4014         JC      ??task_music_deal_msg_21
   \   00014A                ; Setup parameters for call to function music_get_point
   \   00014A   7A..         MOV     R2,#((t_msc + 25) & 0xff)
   \   00014C   7B..         MOV     R3,#(((t_msc + 25) >> 8) & 0xff)
   \   00014E   90....       MOV     DPTR,#(music_get_point & 0xffff)
   \   000151   74..         MOV     A,#((music_get_point >> 16) & 0xff)
   \   000153   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000156                ; Setup parameters for call to function task_music_break_save
   \   000156   90....       MOV     DPTR,#(task_music_break_save & 0xffff)
   \   000159   74..         MOV     A,#((task_music_break_save >> 16) & 0xff)
   \   00015B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \                     ??task_music_deal_msg_21:
   \   00015E   90....       MOV     DPTR,#(sys_ctl + 60)
   \   000161   E0           MOVX    A,@DPTR
   \   000162   6016         JZ      ??task_music_deal_msg_8
   \   000164   90....       MOV     DPTR,#(t_msc + 10)
   \   000167   E0           MOVX    A,@DPTR
   \   000168   A2E0         MOV     C,0xE0 /* A   */.0
   \   00016A   400E         JC      ??task_music_deal_msg_8
   \   00016C   E4           CLR     A
   \   00016D   90....       MOV     DPTR,#(sys_ctl + 60)
   \   000170   F0           MOVX    @DPTR,A
   \   000171                ; Setup parameters for call to function AudioCodec_MUTE
   \   000171   F9           MOV     R1,A
   \   000172   90....       MOV     DPTR,#(AudioCodec_MUTE & 0xffff)
   \   000175   74..         MOV     A,#((AudioCodec_MUTE >> 16) & 0xff)
   \   000177   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \                     ??task_music_deal_msg_8:
   \   00017A                ; Setup parameters for call to function deal_msg
   \   00017A   EE           MOV     A,R6
   \   00017B   F9           MOV     R1,A
   \   00017C   12....       LCALL   deal_msg & 0xFFFF
   \                     ??task_music_deal_msg_0:
   \   00017F                REQUIRE ?Subroutine21
   \   00017F                ; // Fall through to label ?Subroutine21

   \                                 In segment TASK_MUSIC_SEG, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   D0E0         POP     A
   \   000002   FE           MOV     R6,A
   \   000003   02....       LJMP    ?BRET

   \                                 In segment TASK_MUSIC_SEG, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   90....       MOV     DPTR,#(t_msc + 1)
   \   000003   7401         MOV     A,#0x1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   E4           CLR     A
   \   000008   12....       LCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_6:
   \   00000B   22           RET

   \                                 In segment TASK_MUSIC_SEG, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#(t_msc + 10)
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In segment TASK_MUSIC_SEG, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine4
   \                     ??CrossCallReturnLabel_11:
   \   000003   D2E1         SETB    0xE0 /* A   */.1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET

   \                                 In segment TASK_MUSIC_SEG, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#(sys_ctl + 21)
   \   000004   74FF         MOV     A,#-0x1
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   F0           MOVX    @DPTR,A
   \   000009   22           RET
     58          #include "sub/tasksub_music_menu.c"

   \                                 In segment LIST_CONTENT, align 1
   \   unsigned short const __code tbl_music_menu1[8]
   \                     tbl_music_menu1:
   \   000000   33001800     DW 51, 24, 39, 140, 93, 94, 26, 25
   \            27008C00
   \            5D005E00
   \            1A001900

   \                                 In segment LIST_CONTENT, align 1
   \   unsigned short const __code tbl_music_menu2[8]
   \                     tbl_music_menu2:
   \   000000   33001800     DW 51, 24, 39, 140, 93, 94, 26, 25
   \            27008C00
   \            5D005E00
   \            1A001900

   \                                 In segment LIST_CONTENT, align 1
   \   unsigned short const __code tbl_music_select_device[3]
   \                     tbl_music_select_device:
   \   000000   8C008900     DW 140, 137, 139
   \            8B00    

   \                                 In segment LIST_CONTENT, align 1
   \   unsigned short const __code tbl_playmode_items[7]
   \                     tbl_playmode_items:
   \   000000   27002800     DW 39, 40, 42, 41, 44, 43, 46
   \            2A002900
   \            2C002B00
   \            2E00    

   \                                 In segment LIST_CONTENT, align 1
   \   unsigned short const __code tbl_music_eq[8]
   \                     tbl_music_eq:
   \   000000   18004100     DW 24, 65, 66, 67, 68, 69, 70
   \            42004300
   \            44004500
   \            4600    
   \   00000E   0000         DB 0, 0

   \                                 In segment TASK_MUSIC_MENU_SEG_1, align 1, keep-with-next
   \   __banked_func __ext_stack_reentrant bool task_music_device_autochange(void)
   \                     task_music_device_autochange:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000                ; Setup parameters for call to function fs_cur_dev
   \   000000   12....       LCALL   fs_cur_dev & 0xFFFF
   \   000003   E9           MOV     A,R1
   \   000004   701C         JNZ     ??task_music_device_autochange_0
   \   000006                ; Setup parameters for call to function device_is_actived
   \   000006   7901         MOV     R1,#0x1
   \   000008   12....       LCALL   device_is_actived & 0xFFFF
   \   00000B   5025         JNC     ??task_music_device_autochange_1
   \   00000D                ; Setup parameters for call to function fs_sel
   \   00000D   7901         MOV     R1,#0x1
   \                     ??task_music_device_autochange_2:
   \   00000F   90....       MOV     DPTR,#(fs_sel & 0xffff)
   \   000012   74..         MOV     A,#((fs_sel >> 16) & 0xff)
   \   000014   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000017                ; Setup parameters for call to function task_music_device_remount
   \   000017   90....       MOV     DPTR,#(task_music_device_remount & 0xffff)
   \   00001A   74..         MOV     A,#((task_music_device_remount >> 16) & 0xff)
   \   00001C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00001F   D3           SETB    C
   \   000020   8011         SJMP    ??task_music_device_autochange_3
   \                     ??task_music_device_autochange_0:
   \   000022                ; Setup parameters for call to function fs_cur_dev
   \   000022   12....       LCALL   ?Subroutine5
   \                     ??CrossCallReturnLabel_12:
   \   000025   700B         JNZ     ??task_music_device_autochange_1
   \   000027                ; Setup parameters for call to function device_is_actived
   \   000027   7900         MOV     R1,#0x0
   \   000029   12....       LCALL   device_is_actived & 0xFFFF
   \   00002C   5004         JNC     ??task_music_device_autochange_1
   \   00002E                ; Setup parameters for call to function fs_sel
   \   00002E   7900         MOV     R1,#0x0
   \   000030   80DD         SJMP    ??task_music_device_autochange_2
   \                     ??task_music_device_autochange_1:
   \   000032   C3           CLR     C
   \                     ??task_music_device_autochange_3:
   \   000033   02....       LJMP    ?BRET

   \                                 In segment TASK_MUSIC_MENU_SEG_1, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   fs_cur_dev & 0xFFFF
   \   000003   E9           MOV     A,R1
   \   000004   6401         XRL     A,#0x1
   \   000006   22           RET

   \                                 In segment TASK_MUSIC_MENU_SEG_1, align 1, keep-with-next
   \   __banked_func __ext_stack_reentrant bool task_music_get_total(void)
   \                     task_music_get_total:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000                ; Setup parameters for call to function music_total
   \   000000   90....       MOV     DPTR,#(music_total & 0xffff)
   \   000003   74..         MOV     A,#((music_total >> 16) & 0xff)
   \   000005   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000008   90....       MOV     DPTR,#(t_msc + 3)
   \   00000B   EA           MOV     A,R2
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   EB           MOV     A,R3
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   90....       MOV     DPTR,#(t_msc + 3)
   \   000013   E0           MOVX    A,@DPTR
   \   000014   7002         JNZ     ??task_music_get_total_0
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \                     ??task_music_get_total_0:
   \   000018   90....       MOV     DPTR,#(t_msc + 10)
   \   00001B   703B         JNZ     ??task_music_get_total_1
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   A2E3         MOV     C,0xE0 /* A   */.3
   \   000020   4011         JC      ??task_music_get_total_2
   \   000022   D2E3         SETB    0xE0 /* A   */.3
   \   000024   F0           MOVX    @DPTR,A
   \   000025                ; Setup parameters for call to function task_music_device_autochange
   \   000025   90....       MOV     DPTR,#(task_music_device_autochange & 0xffff)
   \   000028   74..         MOV     A,#((task_music_device_autochange >> 16) & 0xff)
   \   00002A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00002D   5004         JNC     ??task_music_get_total_2
   \                     ??task_music_get_total_3:
   \   00002F   D3           SETB    C
   \                     ??task_music_get_total_4:
   \   000030   02....       LJMP    ?BRET
   \                     ??task_music_get_total_2:
   \   000033   741B         MOV     A,#0x1b
   \   000035   90....       MOV     DPTR,#task_ctl
   \   000038   F0           MOVX    @DPTR,A
   \   000039   90....       MOV     DPTR,#(t_msc + 10)
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   A2E5         MOV     C,0xE0 /* A   */.5
   \   00003F   7C05         MOV     R4,#0x5
   \   000041   7900         MOV     R1,#0x0
   \   000043   5004         JNC     ??task_music_get_total_5
   \   000045                ; Setup parameters for call to function msgbox
   \   000045   7A58         MOV     R2,#0x58
   \   000047   8002         SJMP    ??task_music_get_total_6
   \                     ??task_music_get_total_5:
   \   000049                ; Setup parameters for call to function msgbox
   \   000049   7A57         MOV     R2,#0x57
   \                     ??task_music_get_total_6:
   \   00004B   7B00         MOV     R3,#0x0
   \   00004D   90....       MOV     DPTR,#(msgbox & 0xffff)
   \   000050   74..         MOV     A,#((msgbox >> 16) & 0xff)
   \   000052   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000055   C3           CLR     C
   \   000056   80D8         SJMP    ??task_music_get_total_4
   \                     ??task_music_get_total_1:
   \   000058   E0           MOVX    A,@DPTR
   \   000059   C2E3         CLR     0xE0 /* A   */.3
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   80D1         SJMP    ??task_music_get_total_3

   \                                 In segment TASK_MUSIC_MENU_SEG_1, align 1, keep-with-next
   \   __banked_func __ext_stack_reentrant u8 task_music_num_get(void)
   \                     task_music_num_get:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000                ; Setup parameters for call to function fs_cur_dev
   \   000000   12....       LCALL   ?Subroutine5
   \                     ??CrossCallReturnLabel_13:
   \   000003   7004         JNZ     ??task_music_num_get_0
   \   000005                ; Setup parameters for call to function spi_read16
   \   000005                ; Setup parameters for call to function spi_param_addr
   \   000005   7A18         MOV     R2,#0x18
   \   000007   8002         SJMP    ??task_music_num_get_1
   \                     ??task_music_num_get_0:
   \   000009                ; Setup parameters for call to function spi_read16
   \   000009                ; Setup parameters for call to function spi_param_addr
   \   000009   7A0F         MOV     R2,#0xf
   \                     ??task_music_num_get_1:
   \   00000B   7900         MOV     R1,#0x0
   \   00000D   12....       LCALL   spi_param_addr & 0xFFFF
   \   000010   12....       LCALL   spi_read16 & 0xFFFF
   \   000013   90....       MOV     DPTR,#(t_msc + 1)
   \   000016   EA           MOV     A,R2
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   EB           MOV     A,R3
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B                ; Setup parameters for call to function task_music_get_total
   \   00001B   90....       MOV     DPTR,#(task_music_get_total & 0xffff)
   \   00001E   74..         MOV     A,#((task_music_get_total >> 16) & 0xff)
   \   000020   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000023   4004         JC      ??task_music_num_get_2
   \   000025   7900         MOV     R1,#0x0
   \   000027   8024         SJMP    ??task_music_num_get_3
   \                     ??task_music_num_get_2:
   \   000029   90....       MOV     DPTR,#(t_msc + 1)
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F8           MOV     R0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   E8           MOV     A,R0
   \   000032   7001         JNZ     ??task_music_num_get_4
   \   000034   E9           MOV     A,R1
   \                     ??task_music_num_get_4:
   \   000035   600B         JZ      ??task_music_num_get_5
   \   000037   90....       MOV     DPTR,#(t_msc + 3)
   \   00003A   C3           CLR     C
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   98           SUBB    A,R0
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   99           SUBB    A,R1
   \   000040   5009         JNC     ??task_music_num_get_6
   \                     ??task_music_num_get_5:
   \   000042   90....       MOV     DPTR,#(t_msc + 1)
   \   000045   7401         MOV     A,#0x1
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   E4           CLR     A
   \   00004A   F0           MOVX    @DPTR,A
   \                     ??task_music_num_get_6:
   \   00004B   7901         MOV     R1,#0x1
   \                     ??task_music_num_get_3:
   \   00004D   02....       LJMP    ?BRET

   \                                 In segment TASK_MUSIC_MENU_SEG_1, align 1, keep-with-next
   \   __banked_func __ext_stack_reentrant void task_music_device_remount(void)
   \                     task_music_device_remount:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000                ; Setup parameters for call to function music_stop
   \   000000   90....       MOV     DPTR,#(music_stop & 0xffff)
   \   000003   74..         MOV     A,#((music_stop >> 16) & 0xff)
   \   000005   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000008                ; Setup parameters for call to function fs_need_mounted
   \   000008   12....       LCALL   fs_need_mounted & 0xFFFF
   \   00000B   5008         JNC     ??task_music_device_remount_0
   \   00000D                ; Setup parameters for call to function fs_init
   \   00000D   90....       MOV     DPTR,#(fs_init & 0xffff)
   \   000010   74..         MOV     A,#((fs_init >> 16) & 0xff)
   \   000012   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \                     ??task_music_device_remount_0:
   \   000015                ; Setup parameters for call to function fs_is_mounted
   \   000015   12....       LCALL   fs_is_mounted & 0xFFFF
   \   000018   4007         JC      ??task_music_device_remount_1
   \   00001A   741B         MOV     A,#0x1b
   \   00001C   90....       MOV     DPTR,#task_ctl
   \   00001F   8011         SJMP    ??task_music_device_remount_2
   \                     ??task_music_device_remount_1:
   \   000021                ; Setup parameters for call to function task_music_num_get
   \   000021   90....       MOV     DPTR,#(task_music_num_get & 0xffff)
   \   000024   74..         MOV     A,#((task_music_num_get >> 16) & 0xff)
   \   000026   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000029   E9           MOV     A,R1
   \   00002A   6007         JZ      ??task_music_device_remount_3
   \   00002C   90....       MOV     DPTR,#(t_msc + 10)
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   4442         ORL     A,#0x42
   \                     ??task_music_device_remount_2:
   \   000032   F0           MOVX    @DPTR,A
   \                     ??task_music_device_remount_3:
   \   000033   02....       LJMP    ?BRET

   \                                 In segment TASK_MUSIC_MENU_SEG_1, align 1, keep-with-next
   \   __banked_func __ext_stack_reentrant void task_music_device_select(void)
   \                     task_music_device_select:
   \   000000   EE           MOV     A,R6
   \   000001   C0E0         PUSH    A
   \   000003   EF           MOV     A,R7
   \   000004   C0E0         PUSH    A
   \   000006                ; Saved register size: 2
   \   000006                ; Auto size: 0
   \   000006                ; Setup parameters for call to function listbox
   \   000006   7450         MOV     A,#0x50
   \   000008   C0E0         PUSH    A
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C   7A03         MOV     R2,#0x3
   \   00000E   EA           MOV     A,R2
   \   00000F   C0E0         PUSH    A
   \   000011   EB           MOV     A,R3
   \   000012   C0E0         PUSH    A
   \   000014                ; Setup parameters for call to function fs_cur_dev
   \   000014   12....       LCALL   fs_cur_dev & 0xFFFF
   \   000017   7C..         MOV     R4,#(tbl_music_select_device & 0xff)
   \   000019   74..         MOV     A,#((tbl_music_select_device >> 8) & 0xff)
   \   00001B   FD           MOV     R5,A
   \   00001C   D0E0         POP     A
   \   00001E   FB           MOV     R3,A
   \   00001F   D0E0         POP     A
   \   000021   FA           MOV     R2,A
   \   000022   90....       MOV     DPTR,#(listbox & 0xffff)
   \   000025   74..         MOV     A,#((listbox >> 16) & 0xff)
   \   000027   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00002A   D0E0         POP     A
   \   00002C   E9           MOV     A,R1
   \   00002D   FE           MOV     R6,A
   \   00002E                ; Setup parameters for call to function draw_wait
   \   00002E   90....       MOV     DPTR,#(draw_wait & 0xffff)
   \   000031   74..         MOV     A,#((draw_wait >> 16) & 0xff)
   \   000033   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000036   7401         MOV     A,#0x1
   \   000038   6E           XRL     A,R6
   \   000039   7011         JNZ     ??task_music_device_select_0
   \   00003B                ; Setup parameters for call to function fs_cur_dev
   \   00003B   12....       LCALL   fs_cur_dev & 0xFFFF
   \   00003E   E9           MOV     A,R1
   \   00003F   702C         JNZ     ??task_music_device_select_1
   \   000041                ; Setup parameters for call to function device_is_actived
   \   000041   7901         MOV     R1,#0x1
   \   000043   12....       LCALL   device_is_actived & 0xFFFF
   \   000046   5025         JNC     ??task_music_device_select_1
   \   000048                ; Setup parameters for call to function fs_sel
   \   000048   7901         MOV     R1,#0x1
   \   00004A   8011         SJMP    ??task_music_device_select_2
   \                     ??task_music_device_select_0:
   \   00004C   EE           MOV     A,R6
   \   00004D   701E         JNZ     ??task_music_device_select_1
   \   00004F                ; Setup parameters for call to function fs_cur_dev
   \   00004F   12....       LCALL   ?Subroutine5
   \                     ??CrossCallReturnLabel_14:
   \   000052   7019         JNZ     ??task_music_device_select_1
   \   000054                ; Setup parameters for call to function device_is_actived
   \   000054   7900         MOV     R1,#0x0
   \   000056   12....       LCALL   device_is_actived & 0xFFFF
   \   000059   5012         JNC     ??task_music_device_select_1
   \   00005B                ; Setup parameters for call to function fs_sel
   \   00005B   7900         MOV     R1,#0x0
   \                     ??task_music_device_select_2:
   \   00005D   90....       MOV     DPTR,#(fs_sel & 0xffff)
   \   000060   74..         MOV     A,#((fs_sel >> 16) & 0xff)
   \   000062   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000065                ; Setup parameters for call to function task_music_device_remount
   \   000065   90....       MOV     DPTR,#(task_music_device_remount & 0xffff)
   \   000068   74..         MOV     A,#((task_music_device_remount >> 16) & 0xff)
   \   00006A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \                     ??task_music_device_select_1:
   \   00006D   D0E0         POP     A
   \   00006F   FF           MOV     R7,A
   \   000070   D0E0         POP     A
   \   000072   FE           MOV     R6,A
   \   000073   02....       LJMP    ?BRET

   \                                 In segment TASK_MUSIC_MENU_SEG_1, align 1, keep-with-next
   \   __banked_func __ext_stack_reentrant void task_music_menu(void)
   \                     task_music_menu:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000                ; Setup parameters for call to function fs_cur_dev
   \   000000   12....       LCALL   fs_cur_dev & 0xFFFF
   \   000003   E9           MOV     A,R1
   \   000004   700A         JNZ     ??task_music_menu_0
   \   000006                ; Setup parameters for call to function listbox
   \   000006   7450         MOV     A,#0x50
   \   000008   C0E0         PUSH    A
   \   00000A   7C..         MOV     R4,#(tbl_music_menu1 & 0xff)
   \   00000C   7D..         MOV     R5,#((tbl_music_menu1 >> 8) & 0xff)
   \   00000E   8008         SJMP    ??task_music_menu_1
   \                     ??task_music_menu_0:
   \   000010                ; Setup parameters for call to function listbox
   \   000010   7450         MOV     A,#0x50
   \   000012   C0E0         PUSH    A
   \   000014   7C..         MOV     R4,#(tbl_music_menu2 & 0xff)
   \   000016   7D..         MOV     R5,#((tbl_music_menu2 >> 8) & 0xff)
   \                     ??task_music_menu_1:
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   7A08         MOV     R2,#0x8
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   90....       MOV     DPTR,#(listbox & 0xffff)
   \   000021   74..         MOV     A,#((listbox >> 16) & 0xff)
   \   000023   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000026   D0E0         POP     A
   \   000028   E9           MOV     A,R1
   \   000029   FA           MOV     R2,A
   \   00002A   EA           MOV     A,R2
   \   00002B   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for task_music_menu>_0`:
   \   00002E   00           DB        0
   \   00002F   05           DB        5
   \   000030   ....         DW        ??task_music_menu_2
   \   000032   ....         DW        ??task_music_menu_3
   \   000034   ....         DW        ??task_music_menu_4
   \   000036   ....         DW        ??task_music_menu_5
   \   000038   ....         DW        ??task_music_menu_6
   \   00003A   ....         DW        ??task_music_menu_7
   \   00003C   ....         DW        ??task_music_menu_8
   \                     ??task_music_menu_3:
   \   00003E                ; Setup parameters for call to function user_set_eq
   \   00003E                ; Setup parameters for call to function listbox
   \   00003E   7450         MOV     A,#0x50
   \   000040   C0E0         PUSH    A
   \   000042   7C..         MOV     R4,#(tbl_music_eq & 0xff)
   \   000044   7D..         MOV     R5,#((tbl_music_eq >> 8) & 0xff)
   \   000046   7B10         MOV     R3,#0x10
   \   000048   7A08         MOV     R2,#0x8
   \   00004A   90....       MOV     DPTR,#(sys_ctl + 3)
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F9           MOV     R1,A
   \   00004F   90....       MOV     DPTR,#(listbox & 0xffff)
   \   000052   74..         MOV     A,#((listbox >> 16) & 0xff)
   \   000054   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000057   D0E0         POP     A
   \   000059   90....       MOV     DPTR,#(user_set_eq & 0xffff)
   \   00005C   74..         MOV     A,#((user_set_eq >> 16) & 0xff)
   \   00005E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000061                ; Setup parameters for call to function music_eq
   \   000061   90....       MOV     DPTR,#(sys_ctl + 3)
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F9           MOV     R1,A
   \   000066   90....       MOV     DPTR,#(music_eq & 0xffff)
   \   000069   74..         MOV     A,#((music_eq >> 16) & 0xff)
   \   00006B   02....       LJMP    ??task_music_menu_9
   \                     ??task_music_menu_4:
   \   00006E                ; Setup parameters for call to function user_set_mode_play
   \   00006E                ; Setup parameters for call to function listbox
   \   00006E   7450         MOV     A,#0x50
   \   000070   C0E0         PUSH    A
   \   000072   7C..         MOV     R4,#(tbl_playmode_items & 0xff)
   \   000074   7D..         MOV     R5,#((tbl_playmode_items >> 8) & 0xff)
   \   000076   7B00         MOV     R3,#0x0
   \   000078   7A07         MOV     R2,#0x7
   \   00007A   90....       MOV     DPTR,#(sys_ctl + 4)
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F9           MOV     R1,A
   \   00007F   90....       MOV     DPTR,#(listbox & 0xffff)
   \   000082   74..         MOV     A,#((listbox >> 16) & 0xff)
   \   000084   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000087   D0E0         POP     A
   \   000089   90....       MOV     DPTR,#(user_set_mode_play & 0xffff)
   \   00008C   74..         MOV     A,#((user_set_mode_play >> 16) & 0xff)
   \   00008E   02....       LJMP    ??task_music_menu_9
   \                     ??task_music_menu_6:
   \   000091                ; Setup parameters for call to function msgbox
   \   000091   7C00         MOV     R4,#0x0
   \   000093   7980         MOV     R1,#-0x80
   \   000095   7A5F         MOV     R2,#0x5f
   \   000097   7B00         MOV     R3,#0x0
   \   000099   90....       MOV     DPTR,#(msgbox & 0xffff)
   \   00009C   74..         MOV     A,#((msgbox >> 16) & 0xff)
   \   00009E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000A1   4003         JC      $+5
   \   0000A3   02....       LJMP    ??task_music_menu_2 & 0xFFFF
   \   0000A6                ; Setup parameters for call to function music_stop
   \   0000A6   90....       MOV     DPTR,#(music_stop & 0xffff)
   \   0000A9   74..         MOV     A,#((music_stop >> 16) & 0xff)
   \   0000AB   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000AE                ; Setup parameters for call to function f_delete
   \   0000AE   90....       MOV     DPTR,#(t_msc + 1)
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   FA           MOV     R2,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   FB           MOV     R3,A
   \   0000B6   90....       MOV     DPTR,#(f_delete & 0xffff)
   \   0000B9   74..         MOV     A,#((f_delete >> 16) & 0xff)
   \   0000BB   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000BE   5052         JNC     ??task_music_menu_10
   \   0000C0   12....       LCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_15:
   \   0000C3   90....       MOV     DPTR,#(t_msc + 1)
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   7002         JNZ     ??task_music_menu_11
   \   0000C9   A3           INC     DPTR
   \   0000CA   E0           MOVX    A,@DPTR
   \                     ??task_music_menu_11:
   \   0000CB   7011         JNZ     ??task_music_menu_12
   \   0000CD   90....       MOV     DPTR,#(t_msc + 3)
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   F8           MOV     R0,A
   \   0000D2   A3           INC     DPTR
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   F9           MOV     R1,A
   \   0000D5   90....       MOV     DPTR,#(t_msc + 1)
   \   0000D8   E8           MOV     A,R0
   \   0000D9   F0           MOVX    @DPTR,A
   \   0000DA   A3           INC     DPTR
   \   0000DB   E9           MOV     A,R1
   \   0000DC   8006         SJMP    ??CrossCallReturnLabel_17
   \                     ??task_music_menu_12:
   \   0000DE   90....       MOV     DPTR,#(t_msc + 1)
   \   0000E1   12....       LCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_17:
   \   0000E4   F0           MOVX    @DPTR,A
   \   0000E5   90....       MOV     DPTR,#(t_msc + 10)
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   D2E1         SETB    0xE0 /* A   */.1
   \   0000EB   F0           MOVX    @DPTR,A
   \   0000EC   90....       MOV     DPTR,#(t_msc + 3)
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   7002         JNZ     ??task_music_menu_13
   \   0000F2   A3           INC     DPTR
   \   0000F3   E0           MOVX    A,@DPTR
   \                     ??task_music_menu_13:
   \   0000F4   6003         JZ      $+5
   \   0000F6   02....       LJMP    ??task_music_menu_2 & 0xFFFF
   \   0000F9                ; Setup parameters for call to function msgbox
   \   0000F9   7C05         MOV     R4,#0x5
   \   0000FB   7900         MOV     R1,#0x0
   \   0000FD   7A57         MOV     R2,#0x57
   \   0000FF   7B00         MOV     R3,#0x0
   \   000101   90....       MOV     DPTR,#(msgbox & 0xffff)
   \   000104   74..         MOV     A,#((msgbox >> 16) & 0xff)
   \   000106   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \                     ??task_music_menu_8:
   \   000109   741B         MOV     A,#0x1b
   \   00010B   90....       MOV     DPTR,#task_ctl
   \   00010E   F0           MOVX    @DPTR,A
   \   00010F   02....       LJMP    ??task_music_menu_2 & 0xFFFF
   \                     ??task_music_menu_10:
   \   000112                ; Setup parameters for call to function msgbox
   \   000112   7C05         MOV     R4,#0x5
   \   000114   7900         MOV     R1,#0x0
   \   000116   7A61         MOV     R2,#0x61
   \   000118   7B00         MOV     R3,#0x0
   \   00011A   90....       MOV     DPTR,#(msgbox & 0xffff)
   \   00011D   74..         MOV     A,#((msgbox >> 16) & 0xff)
   \   00011F   8071         SJMP    ??task_music_menu_9
   \                     ??task_music_menu_7:
   \   000121                ; Setup parameters for call to function msgbox
   \   000121   7C00         MOV     R4,#0x0
   \   000123   7980         MOV     R1,#-0x80
   \   000125   7A60         MOV     R2,#0x60
   \   000127   7B00         MOV     R3,#0x0
   \   000129   90....       MOV     DPTR,#(msgbox & 0xffff)
   \   00012C   74..         MOV     A,#((msgbox >> 16) & 0xff)
   \   00012E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000131   5062         JNC     ??task_music_menu_2
   \   000133                ; Setup parameters for call to function music_stop
   \   000133   90....       MOV     DPTR,#(music_stop & 0xffff)
   \   000136   74..         MOV     A,#((music_stop >> 16) & 0xff)
   \   000138   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00013B   8003         SJMP    ??CrossCallReturnLabel_16
   \                     ??task_music_menu_14:
   \   00013D   12....       LCALL   ?Subroutine6
   \                     ??CrossCallReturnLabel_16:
   \   000140   90....       MOV     DPTR,#(t_msc + 3)
   \   000143   E0           MOVX    A,@DPTR
   \   000144   7002         JNZ     ??task_music_menu_15
   \   000146   A3           INC     DPTR
   \   000147   E0           MOVX    A,@DPTR
   \                     ??task_music_menu_15:
   \   000148   601E         JZ      ??task_music_menu_16
   \   00014A                ; Setup parameters for call to function f_delete
   \   00014A   7A01         MOV     R2,#0x1
   \   00014C   7B00         MOV     R3,#0x0
   \   00014E   90....       MOV     DPTR,#(f_delete & 0xffff)
   \   000151   74..         MOV     A,#((f_delete >> 16) & 0xff)
   \   000153   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000156   40E5         JC      ??task_music_menu_14
   \   000158                ; Setup parameters for call to function msgbox
   \   000158   7C05         MOV     R4,#0x5
   \   00015A   7900         MOV     R1,#0x0
   \   00015C   7A61         MOV     R2,#0x61
   \   00015E   7B00         MOV     R3,#0x0
   \   000160   90....       MOV     DPTR,#(msgbox & 0xffff)
   \   000163   74..         MOV     A,#((msgbox >> 16) & 0xff)
   \   000165   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \                     ??task_music_menu_16:
   \   000168   90....       MOV     DPTR,#(t_msc + 3)
   \   00016B   E0           MOVX    A,@DPTR
   \   00016C   7002         JNZ     ??task_music_menu_17
   \   00016E   A3           INC     DPTR
   \   00016F   E0           MOVX    A,@DPTR
   \                     ??task_music_menu_17:
   \   000170   7016         JNZ     ??task_music_menu_18
   \   000172                ; Setup parameters for call to function msgbox
   \   000172   7C05         MOV     R4,#0x5
   \   000174   7900         MOV     R1,#0x0
   \   000176   7A57         MOV     R2,#0x57
   \   000178   7B00         MOV     R3,#0x0
   \   00017A   90....       MOV     DPTR,#(msgbox & 0xffff)
   \   00017D   74..         MOV     A,#((msgbox >> 16) & 0xff)
   \   00017F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000182   741B         MOV     A,#0x1b
   \   000184   90....       MOV     DPTR,#task_ctl
   \   000187   F0           MOVX    @DPTR,A
   \                     ??task_music_menu_18:
   \   000188   43F720       ORL     0xf7,#0x20
   \   00018B   8008         SJMP    ??task_music_menu_2
   \                     ??task_music_menu_5:
   \   00018D                ; Setup parameters for call to function task_music_device_select
   \   00018D   90....       MOV     DPTR,#(task_music_device_select & 0xffff)
   \   000190   74..         MOV     A,#((task_music_device_select >> 16) & 0xff)
   \                     ??task_music_menu_9:
   \   000192   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \                     ??task_music_menu_2:
   \   000195   90....       MOV     DPTR,#(t_msc + 21)
   \   000198   E0           MOVX    A,@DPTR
   \   000199   D2E0         SETB    0xE0 /* A   */.0
   \   00019B   F0           MOVX    @DPTR,A
   \   00019C   02....       LJMP    ?BRET

   \                                 In segment TASK_MUSIC_MENU_SEG_1, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   90....       MOV     DPTR,#(t_msc + 3)
   \   000003   12....       LCALL   ?Subroutine7
   \                     ??CrossCallReturnLabel_18:
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In segment TASK_MUSIC_MENU_SEG_1, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   24FF         ADD     A,#-0x1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   34FF         ADDC    A,#-0x1
   \   000008   22           RET

   \                                 In segment TASK_MUSIC_MENU_SEG, align 1, keep-with-next
   \   __banked_func __ext_stack_reentrant void tasksub_music_menu_enter(void)
   \                     tasksub_music_menu_enter:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP    ?BRET

   \                                 In segment TASK_MUSIC_MENU_SEG, align 1, keep-with-next
   \   __banked_func __ext_stack_reentrant void tasksub_music_menu_exit(void)
   \                     tasksub_music_menu_exit:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP    ?BRET

   \                                 In segment TASK_MUSIC_MENU_SEG, align 1, keep-with-next
   \   __banked_func __ext_stack_reentrant void tasksub_music_menu_event(void)
   \                     tasksub_music_menu_event:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP    ?BRET

   \                                 In segment TASK_MUSIC_MENU_SEG, align 1, keep-with-next
   \   __banked_func __ext_stack_reentrant void task_music_menu_deal_msg(u8)
   \                     task_music_menu_deal_msg:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP    ?BRET

   \                                 In segment TASK_MUSIC_MENU_SEG, align 1, keep-with-next
   \   __banked_func __ext_stack_reentrant void tasksub_music_menu_loop(void)
   \                     tasksub_music_menu_loop:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000                ; Setup parameters for call to function task_music_menu
   \   000000                REQUIRE ?Subroutine22
   \   000000                ; // Fall through to label ?Subroutine22

   \                                 In segment TASK_MUSIC_MENU_SEG, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   90....       MOV     DPTR,#(task_music_menu & 0xffff)
   \   000003   74..         MOV     A,#((task_music_menu >> 16) & 0xff)
   \   000005   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000008   02....       LJMP    ?BRET

   \                                 In segment TASK_MUSIC_MENU_SEG, align 1, keep-with-next
   \   __banked_func __ext_stack_reentrant void tasksub_music_menu(void)
   \                     tasksub_music_menu:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000                ; Setup parameters for call to function task_music_menu
   \   000000   80..         SJMP    ?Subroutine22
     59          
     60          #if BREAK_POINT_EN
     61          #pragma location="TASK_MUSIC_SEG"
     62          //保存断电记忆

   \                                 In segment TASK_MUSIC_SEG, align 1, keep-with-next
     63          void task_music_break_save(void)
   \                     task_music_break_save:
     64          {
   \   000000   C0..         PUSH    ?V0 + 0
   \   000002   C0..         PUSH    ?V0 + 1
   \   000004   C0..         PUSH    ?V0 + 2
   \   000006   C0..         PUSH    ?V0 + 3
   \   000008                ; Saved register size: 4
   \   000008                ; Auto size: 0
     65              if (fs_cur_dev() == DEVICE_UDISK)
   \   000008                ; Setup parameters for call to function fs_cur_dev
   \   000008   12....       LCALL   fs_cur_dev & 0xFFFF
   \   00000B   E9           MOV     A,R1
   \   00000C   6401         XRL     A,#0x1
   \   00000E   90....       MOV     DPTR,#(t_msc + 25)
   \   000011   78..         MOV     R0,#?V0 + 0
   \   000013   7029         JNZ     ??task_music_break_save_0
     66              {
     67                  irtcc_write_ram32(USB_BREAK_FRAME, t_msc.break_point.frame);
   \   000015                ; Setup parameters for call to function irtcc_write_ram32
   \   000015   12....       LCALL   ?L_MOV_X
   \   000018   AA..         MOV     R2,?V0 + 0
   \   00001A   AB..         MOV     R3,?V0 + 1
   \   00001C   AC..         MOV     R4,?V0 + 2
   \   00001E   AD..         MOV     R5,?V0 + 3
   \   000020   790A         MOV     R1,#0xa
   \   000022   90....       MOV     DPTR,#(irtcc_write_ram32 & 0xffff)
   \   000025   74..         MOV     A,#((irtcc_write_ram32 >> 16) & 0xff)
   \   000027   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
     68                  irtcc_write_ram32(USB_BREAK_POS, t_msc.break_point.pos);
   \   00002A                ; Setup parameters for call to function irtcc_write_ram32
   \   00002A   90....       MOV     DPTR,#(t_msc + 29)
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?L_MOV_X
   \   000032   AA..         MOV     R2,?V0 + 0
   \   000034   AB..         MOV     R3,?V0 + 1
   \   000036   AC..         MOV     R4,?V0 + 2
   \   000038   AD..         MOV     R5,?V0 + 3
   \   00003A   790E         MOV     R1,#0xe
   \   00003C   8027         SJMP    ??task_music_break_save_1
     69              }
     70              else
     71              {
     72                  irtcc_write_ram32(SD_BREAK_FRAME, t_msc.break_point.frame);
   \                     ??task_music_break_save_0:
   \   00003E                ; Setup parameters for call to function irtcc_write_ram32
   \   00003E   12....       LCALL   ?L_MOV_X
   \   000041   AA..         MOV     R2,?V0 + 0
   \   000043   AB..         MOV     R3,?V0 + 1
   \   000045   AC..         MOV     R4,?V0 + 2
   \   000047   AD..         MOV     R5,?V0 + 3
   \   000049   7914         MOV     R1,#0x14
   \   00004B   90....       MOV     DPTR,#(irtcc_write_ram32 & 0xffff)
   \   00004E   74..         MOV     A,#((irtcc_write_ram32 >> 16) & 0xff)
   \   000050   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
     73                  irtcc_write_ram32(SD_BREAK_POS, t_msc.break_point.pos);
   \   000053                ; Setup parameters for call to function irtcc_write_ram32
   \   000053   90....       MOV     DPTR,#(t_msc + 29)
   \   000056   78..         MOV     R0,#?V0 + 0
   \   000058   12....       LCALL   ?L_MOV_X
   \   00005B   AA..         MOV     R2,?V0 + 0
   \   00005D   AB..         MOV     R3,?V0 + 1
   \   00005F   AC..         MOV     R4,?V0 + 2
   \   000061   AD..         MOV     R5,?V0 + 3
   \   000063   7918         MOV     R1,#0x18
   \                     ??task_music_break_save_1:
   \   000065   90....       MOV     DPTR,#(irtcc_write_ram32 & 0xffff)
   \   000068   74..         MOV     A,#((irtcc_write_ram32 >> 16) & 0xff)
   \   00006A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
     74                  //printf("fra:%ld,pos:%ld\n",t_msc.break_point.frame,t_msc.break_point.pos);
     75              }
     76          }
   \   00006D   D0..         POP     ?V0 + 3
   \   00006F   D0..         POP     ?V0 + 2
   \   000071   D0..         POP     ?V0 + 1
   \   000073   D0..         POP     ?V0 + 0
   \   000075   02....       LJMP    ?BRET
     77          
     78          //播放完一曲时，清除断点信息

   \                                 In segment BANKED_CODE, align 1, keep-with-next
     79          void task_music_break_clr(void)
   \                     task_music_break_clr:
     80          {
   \   000000   7408         MOV     A,#0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_SP
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
     81              if(task_ctl.last_work == TASK_MUSIC && !sys_ctl.voice_play_flag && !t_msc.music_voice_flag) {
   \   000005   90....       MOV     DPTR,#(task_ctl + 1)
   \   000008   E0           MOVX    A,@DPTR
   \   000009   6405         XRL     A,#0x5
   \   00000B   707E         JNZ     ??task_music_break_clr_0
   \   00000D   90....       MOV     DPTR,#(sys_ctl + 26)
   \   000010   E0           MOVX    A,@DPTR
   \   000011   7078         JNZ     ??task_music_break_clr_0
   \   000013   90....       MOV     DPTR,#(t_msc + 10)
   \   000016   E0           MOVX    A,@DPTR
   \   000017   A2E5         MOV     C,0xE0 /* A   */.5
   \   000019   4070         JC      ??task_music_break_clr_0
     82                  u32 cur_sec = music_get_mtime()/10;
   \   00001B                ; Setup parameters for call to function music_get_mtime
   \   00001B   12....       LCALL   music_get_mtime & 0xFFFF
   \   00001E   8A..         MOV     ?V0 + 0,R2
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   8C..         MOV     ?V0 + 2,R4
   \   000024   8D..         MOV     ?V0 + 3,R5
   \   000026   90....       MOV     DPTR,#__Constant_a
   \   000029   78..         MOV     R0,#?V0 + 4
   \   00002B   12....       LCALL   ?L_MOV_C
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   79..         MOV     R1,#?V0 + 4
   \   000032   12....       LCALL   ?UL_DIV_MOD
     83                  //printf("mtime: %04x, alltime: %04x\n", (u16)cur_sec, music_get_alltime());
     84                  if(cur_sec >= 35999) {  //alltime最大值为35999s
   \   000035   90....       MOV     DPTR,#__Constant_8c9f
   \   000038   78..         MOV     R0,#?V0 + 4
   \   00003A   12....       LCALL   ?L_MOV_C
   \   00003D   78..         MOV     R0,#?V0 + 4
   \   00003F   79..         MOV     R1,#?V0 + 0
   \   000041   12....       LCALL   ?UL_GT
   \   000044   5045         JNC     ??task_music_break_clr_0
     85                      return;             //超过35999s的文件不清断点
     86                  }
     87                  if((u16)cur_sec+2 >= music_get_alltime()) {
   \   000046   7402         MOV     A,#0x2
   \   000048   25..         ADD     A,?V0 + 0
   \   00004A   FE           MOV     R6,A
   \   00004B   E4           CLR     A
   \   00004C   35..         ADDC    A,?V0 + 1
   \   00004E   FF           MOV     R7,A
   \   00004F                ; Setup parameters for call to function music_get_alltime
   \   00004F   90....       MOV     DPTR,#(music_get_alltime & 0xffff)
   \   000052   74..         MOV     A,#((music_get_alltime >> 16) & 0xff)
   \   000054   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000057   8A..         MOV     ?V0 + 0,R2
   \   000059   8B..         MOV     ?V0 + 1,R3
   \   00005B   C3           CLR     C
   \   00005C   EE           MOV     A,R6
   \   00005D   95..         SUBB    A,?V0 + 0
   \   00005F   EF           MOV     A,R7
   \   000060   95..         SUBB    A,?V0 + 1
   \   000062   4027         JC      ??task_music_break_clr_0
     88                      //printf("clr_bp\n");
     89                      if (t_msc.break_dev == DEVICE_UDISK) {  //2014-1-6, 修正清错断点问题
   \   000064   90....       MOV     DPTR,#(t_msc + 22)
   \   000067   E0           MOVX    A,@DPTR
   \   000068   6401         XRL     A,#0x1
   \   00006A   90....       MOV     DPTR,#(t_msc + 23)
   \   00006D   700B         JNZ     ??task_music_break_clr_1
     90                          irtcc_write_ram16(USB_NAME_CRC, ~t_msc.filename_crc);
   \   00006F                ; Setup parameters for call to function irtcc_write_ram16
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F4           CPL     A
   \   000071   FA           MOV     R2,A
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F4           CPL     A
   \   000075   FB           MOV     R3,A
   \   000076   7912         MOV     R1,#0x12
   \   000078   8009         SJMP    ??task_music_break_clr_2
     91                      } else {
     92                          irtcc_write_ram16(SD_NAME_CRC, ~t_msc.filename_crc);
   \                     ??task_music_break_clr_1:
   \   00007A                ; Setup parameters for call to function irtcc_write_ram16
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   F4           CPL     A
   \   00007C   FA           MOV     R2,A
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F4           CPL     A
   \   000080   FB           MOV     R3,A
   \   000081   791C         MOV     R1,#0x1c
   \                     ??task_music_break_clr_2:
   \   000083   90....       MOV     DPTR,#(irtcc_write_ram16 & 0xffff)
   \   000086   74..         MOV     A,#((irtcc_write_ram16 >> 16) & 0xff)
   \   000088   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \                     ??task_music_break_clr_0:
   \   00008B   7F08         MOV     R7,#0x8
   \   00008D   02....       LJMP    ?BANKED_LEAVE_SP
     93                      }
     94                  }
     95              }
     96          }
     97          
     98          //读取断点记忆
     99          #pragma location="TASK_MUSIC_SEG_1"

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
    100          void task_music_break_read(void)
   \                     task_music_break_read:
    101          {
   \   000000   C0..         PUSH    ?V0 + 0
   \   000002   C0..         PUSH    ?V0 + 1
   \   000004   C0..         PUSH    ?V0 + 2
   \   000006   C0..         PUSH    ?V0 + 3
   \   000008                ; Saved register size: 4
   \   000008                ; Auto size: 0
    102              if (fs_cur_dev() == DEVICE_UDISK)
   \   000008                ; Setup parameters for call to function fs_cur_dev
   \   000008   12....       LCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_21:
   \   00000B   7038         JNZ     ??task_music_break_read_0
    103              {
    104                  t_msc.break_point.frame = irtcc_read_ram32(USB_BREAK_FRAME);
   \   00000D                ; Setup parameters for call to function irtcc_read_ram32
   \   00000D   790A         MOV     R1,#0xa
   \   00000F   90....       MOV     DPTR,#(irtcc_read_ram32 & 0xffff)
   \   000012   74..         MOV     A,#((irtcc_read_ram32 >> 16) & 0xff)
   \   000014   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000017   8A..         MOV     ?V0 + 0,R2
   \   000019   8B..         MOV     ?V0 + 1,R3
   \   00001B   8C..         MOV     ?V0 + 2,R4
   \   00001D   8D..         MOV     ?V0 + 3,R5
   \   00001F   90....       MOV     DPTR,#(t_msc + 25)
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?L_MOV_TO_X
    105                  t_msc.break_point.pos = irtcc_read_ram32(USB_BREAK_POS);
   \   000027                ; Setup parameters for call to function irtcc_read_ram32
   \   000027   790E         MOV     R1,#0xe
   \   000029   90....       MOV     DPTR,#(irtcc_read_ram32 & 0xffff)
   \   00002C   74..         MOV     A,#((irtcc_read_ram32 >> 16) & 0xff)
   \   00002E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000031   8A..         MOV     ?V0 + 0,R2
   \   000033   8B..         MOV     ?V0 + 1,R3
   \   000035   8C..         MOV     ?V0 + 2,R4
   \   000037   8D..         MOV     ?V0 + 3,R5
   \   000039   90....       MOV     DPTR,#(t_msc + 29)
   \   00003C   78..         MOV     R0,#?V0 + 0
   \   00003E   12....       LCALL   ?L_MOV_TO_X
    106                  t_msc.filename_crc = irtcc_read_ram16(USB_NAME_CRC);
   \   000041                ; Setup parameters for call to function irtcc_read_ram16
   \   000041   7912         MOV     R1,#0x12
   \   000043   8036         SJMP    ??task_music_break_read_1
    107              }
    108              else
    109              {
    110                  t_msc.break_point.frame = irtcc_read_ram32(SD_BREAK_FRAME);
   \                     ??task_music_break_read_0:
   \   000045                ; Setup parameters for call to function irtcc_read_ram32
   \   000045   7914         MOV     R1,#0x14
   \   000047   90....       MOV     DPTR,#(irtcc_read_ram32 & 0xffff)
   \   00004A   74..         MOV     A,#((irtcc_read_ram32 >> 16) & 0xff)
   \   00004C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00004F   8A..         MOV     ?V0 + 0,R2
   \   000051   8B..         MOV     ?V0 + 1,R3
   \   000053   8C..         MOV     ?V0 + 2,R4
   \   000055   8D..         MOV     ?V0 + 3,R5
   \   000057   90....       MOV     DPTR,#(t_msc + 25)
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?L_MOV_TO_X
    111                  t_msc.break_point.pos = irtcc_read_ram32(SD_BREAK_POS);
   \   00005F                ; Setup parameters for call to function irtcc_read_ram32
   \   00005F   7918         MOV     R1,#0x18
   \   000061   90....       MOV     DPTR,#(irtcc_read_ram32 & 0xffff)
   \   000064   74..         MOV     A,#((irtcc_read_ram32 >> 16) & 0xff)
   \   000066   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000069   8A..         MOV     ?V0 + 0,R2
   \   00006B   8B..         MOV     ?V0 + 1,R3
   \   00006D   8C..         MOV     ?V0 + 2,R4
   \   00006F   8D..         MOV     ?V0 + 3,R5
   \   000071   90....       MOV     DPTR,#(t_msc + 29)
   \   000074   78..         MOV     R0,#?V0 + 0
   \   000076   12....       LCALL   ?L_MOV_TO_X
    112                 // printf("frar:%ld,posr:%ld\n",t_msc.break_point.frame,t_msc.break_point.pos);
    113                  t_msc.filename_crc = irtcc_read_ram16(SD_NAME_CRC);
   \   000079                ; Setup parameters for call to function irtcc_read_ram16
   \   000079   791C         MOV     R1,#0x1c
   \                     ??task_music_break_read_1:
   \   00007B   90....       MOV     DPTR,#(irtcc_read_ram16 & 0xffff)
   \   00007E   74..         MOV     A,#((irtcc_read_ram16 >> 16) & 0xff)
   \   000080   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000083   90....       MOV     DPTR,#(t_msc + 23)
   \   000086   EA           MOV     A,R2
   \   000087   F0           MOVX    @DPTR,A
   \   000088   A3           INC     DPTR
   \   000089   EB           MOV     A,R3
   \   00008A   F0           MOVX    @DPTR,A
    114              }
    115          }
   \   00008B   D0..         POP     ?V0 + 3
   \   00008D                REQUIRE ?Subroutine23
   \   00008D                ; // Fall through to label ?Subroutine23

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   D0..         POP     ?V0 + 2
   \                     ??Subroutine23_0:
   \   000002   D0..         POP     ?V0 + 1
   \   000004   D0..         POP     ?V0 + 0
   \   000006   02....       LJMP    ?BRET

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   fs_cur_dev & 0xFFFF
   \   000003   E9           MOV     A,R1
   \   000004   6401         XRL     A,#0x1
   \   000006   22           RET
    116          
    117          #pragma location="TASK_MUSIC_SEG_1"

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
    118          void task_music_save_num(void)
   \                     task_music_save_num:
    119          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    120              if(t_msc.music_voice_flag) {
   \   000000   90....       MOV     DPTR,#(t_msc + 10)
   \   000003   E0           MOVX    A,@DPTR
   \   000004   A2E5         MOV     C,0xE0 /* A   */.5
   \   000006   500C         JNC     ??task_music_save_num_0
    121                  sys_param_write16(PARAM_VOICE_NUM, t_msc.music_num);        //保存打开的文件编号
   \   000008                ; Setup parameters for call to function spi_param_write16
   \   000008   90....       MOV     DPTR,#(t_msc + 1)
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   FC           MOV     R4,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FD           MOV     R5,A
   \   000010   7A16         MOV     R2,#0x16
   \   000012   8018         SJMP    ??task_music_save_num_1
    122              } else {
    123                  if (fs_cur_dev() == DEVICE_UDISK) {
   \                     ??task_music_save_num_0:
   \   000014                ; Setup parameters for call to function fs_cur_dev
   \   000014   12....       LCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_22:
   \   000017   90....       MOV     DPTR,#(t_msc + 1)
   \   00001A   7009         JNZ     ??task_music_save_num_2
    124                      sys_param_write16(PARAM_MUSIC_NUM_USB, t_msc.music_num);        //保存打开的文件编号
   \   00001C                ; Setup parameters for call to function spi_param_write16
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FC           MOV     R4,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FD           MOV     R5,A
   \   000021   7A18         MOV     R2,#0x18
   \   000023   8007         SJMP    ??task_music_save_num_1
    125                  } else {
    126                      sys_param_write16(PARAM_MUSIC_NUM_SD, t_msc.music_num);        //保存打开的文件编号
   \                     ??task_music_save_num_2:
   \   000025                ; Setup parameters for call to function spi_param_write16
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FC           MOV     R4,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FD           MOV     R5,A
   \   00002A   7A0F         MOV     R2,#0xf
   \                     ??task_music_save_num_1:
   \   00002C   7900         MOV     R1,#0x0
   \   00002E   90....       MOV     DPTR,#(spi_param_write16 & 0xffff)
   \   000031   74..         MOV     A,#((spi_param_write16 >> 16) & 0xff)
   \   000033                REQUIRE ?Subroutine24
   \   000033                ; // Fall through to label ?Subroutine24
    127                  }
    128              }
    129          }

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000003   02....       LJMP    ?BRET
    130          
    131          //进入音乐任务对断电记忆的操作
    132          #pragma location="TASK_MUSIC_SEG_2"

   \                                 In segment TASK_MUSIC_SEG_2, align 1, keep-with-next
    133          void task_music_break_init(void)
   \                     task_music_break_init:
    134          {
   \   000000   C0..         PUSH    ?V0 + 0
   \   000002   C0..         PUSH    ?V0 + 1
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    135              if(t_msc.break_flag)
   \   000004   90....       MOV     DPTR,#(t_msc + 10)
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E6         MOV     C,0xE0 /* A   */.6
   \   00000A   5038         JNC     ??task_music_break_init_0
    136              {
    137                  task_music_break_read();
   \   00000C                ; Setup parameters for call to function task_music_break_read
   \   00000C   90....       MOV     DPTR,#(task_music_break_read & 0xffff)
   \   00000F   74..         MOV     A,#((task_music_break_read >> 16) & 0xff)
   \   000011   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    138                  if(crc_calculate(filename,8) == t_msc.filename_crc)
   \   000014                ; Setup parameters for call to function crc_calculate
   \   000014   7C08         MOV     R4,#0x8
   \   000016   7D00         MOV     R5,#0x0
   \   000018   7A..         MOV     R2,#(filename & 0xff)
   \   00001A   7B..         MOV     R3,#((filename >> 8) & 0xff)
   \   00001C   90....       MOV     DPTR,#(crc_calculate & 0xffff)
   \   00001F   74..         MOV     A,#((crc_calculate >> 16) & 0xff)
   \   000021   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000024   8A..         MOV     ?V0 + 0,R2
   \   000026   8B..         MOV     ?V0 + 1,R3
   \   000028   A8..         MOV     R0,?V0 + 0
   \   00002A   A9..         MOV     R1,?V0 + 1
   \   00002C   90....       MOV     DPTR,#(t_msc + 23)
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   68           XRL     A,R0
   \   000031   7003         JNZ     ??task_music_break_init_1
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   69           XRL     A,R1
   \                     ??task_music_break_init_1:
   \   000036   700C         JNZ     ??task_music_break_init_0
    139                  {
    140                      music_jump(&t_msc.break_point);
   \   000038                ; Setup parameters for call to function music_jump
   \   000038   7A..         MOV     R2,#((t_msc + 25) & 0xff)
   \   00003A   7B..         MOV     R3,#(((t_msc + 25) >> 8) & 0xff)
   \   00003C   90....       MOV     DPTR,#(music_jump & 0xffff)
   \   00003F   74..         MOV     A,#((music_jump >> 16) & 0xff)
   \   000041   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    141                  }
    142              }
    143              t_msc.filename_crc = crc_calculate(filename,8);
   \                     ??task_music_break_init_0:
   \   000044                ; Setup parameters for call to function crc_calculate
   \   000044   7C08         MOV     R4,#0x8
   \   000046   7D00         MOV     R5,#0x0
   \   000048   7A..         MOV     R2,#(filename & 0xff)
   \   00004A   7B..         MOV     R3,#((filename >> 8) & 0xff)
   \   00004C   90....       MOV     DPTR,#(crc_calculate & 0xffff)
   \   00004F   74..         MOV     A,#((crc_calculate >> 16) & 0xff)
   \   000051   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000054   90....       MOV     DPTR,#(t_msc + 23)
   \   000057   EA           MOV     A,R2
   \   000058   F0           MOVX    @DPTR,A
   \   000059   A3           INC     DPTR
   \   00005A   EB           MOV     A,R3
   \   00005B   F0           MOVX    @DPTR,A
    144              t_msc.break_dev = fs_cur_dev();             //2014-1-6, 修正清错断点问题
   \   00005C                ; Setup parameters for call to function fs_cur_dev
   \   00005C   12....       LCALL   fs_cur_dev & 0xFFFF
   \   00005F   E9           MOV     A,R1
   \   000060   90....       MOV     DPTR,#(t_msc + 22)
   \   000063   F0           MOVX    @DPTR,A
    145              if (fs_cur_dev() == DEVICE_UDISK)
   \   000064                ; Setup parameters for call to function fs_cur_dev
   \   000064   12....       LCALL   fs_cur_dev & 0xFFFF
   \   000067   E9           MOV     A,R1
   \   000068   6401         XRL     A,#0x1
   \   00006A   90....       MOV     DPTR,#(t_msc + 23)
   \   00006D   7009         JNZ     ??task_music_break_init_2
    146              {
    147                  irtcc_write_ram16(USB_NAME_CRC, t_msc.filename_crc);
   \   00006F                ; Setup parameters for call to function irtcc_write_ram16
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   FA           MOV     R2,A
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   FB           MOV     R3,A
   \   000074   7912         MOV     R1,#0x12
   \   000076   8007         SJMP    ??task_music_break_init_3
    148              }
    149              else
    150              {
    151                  irtcc_write_ram16(SD_NAME_CRC, t_msc.filename_crc);
   \                     ??task_music_break_init_2:
   \   000078                ; Setup parameters for call to function irtcc_write_ram16
   \   000078   E0           MOVX    A,@DPTR
   \   000079   FA           MOV     R2,A
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   FB           MOV     R3,A
   \   00007D   791C         MOV     R1,#0x1c
   \                     ??task_music_break_init_3:
   \   00007F   90....       MOV     DPTR,#(irtcc_write_ram16 & 0xffff)
   \   000082   74..         MOV     A,#((irtcc_write_ram16 >> 16) & 0xff)
   \   000084   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    152              }
    153          }
   \   000087   D0..         POP     ?V0 + 1
   \   000089   D0..         POP     ?V0 + 0
   \   00008B   02....       LJMP    ?BRET
    154          #endif
    155          
    156          //进入音乐任务对歌曲目的获取
    157          #pragma location="TASK_MUSIC_SEG_1"

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
    158          void task_music_get_num(void)
   \                     task_music_get_num:
    159          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    160              if (fs_cur_dev() == DEVICE_UDISK) {
   \   000000                ; Setup parameters for call to function fs_cur_dev
   \   000000   12....       LCALL   ?Subroutine10
   \                     ??CrossCallReturnLabel_23:
   \   000003   7004         JNZ     ??task_music_get_num_0
    161                  t_msc.music_num = sys_param_read16(PARAM_MUSIC_NUM_USB);        //打开的文件编号
   \   000005                ; Setup parameters for call to function spi_read16
   \   000005                ; Setup parameters for call to function spi_param_addr
   \   000005   7A18         MOV     R2,#0x18
   \   000007   8002         SJMP    ??task_music_get_num_1
    162              } else {
    163                  t_msc.music_num = sys_param_read16(PARAM_MUSIC_NUM_SD);        //打开的文件编号
   \                     ??task_music_get_num_0:
   \   000009                ; Setup parameters for call to function spi_read16
   \   000009                ; Setup parameters for call to function spi_param_addr
   \   000009   7A0F         MOV     R2,#0xf
   \                     ??task_music_get_num_1:
   \   00000B   7900         MOV     R1,#0x0
   \   00000D   12....       LCALL   spi_param_addr & 0xFFFF
   \   000010   12....       LCALL   spi_read16 & 0xFFFF
   \   000013   90....       MOV     DPTR,#(t_msc + 1)
   \   000016   EA           MOV     A,R2
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   EB           MOV     A,R3
   \   00001A   F0           MOVX    @DPTR,A
    164              }
    165              if (t_msc.music_num == 0 || t_msc.music_num > t_msc.music_total) {
   \   00001B   90....       MOV     DPTR,#(t_msc + 1)
   \   00001E   12....       LCALL   ??Subroutine16_0
   \                     ??CrossCallReturnLabel_40:
   \   000021   E8           MOV     A,R0
   \   000022   7001         JNZ     ??task_music_get_num_2
   \   000024   E9           MOV     A,R1
   \                     ??task_music_get_num_2:
   \   000025   6005         JZ      ??task_music_get_num_3
   \   000027   12....       LCALL   ?Subroutine11
   \                     ??CrossCallReturnLabel_24:
   \   00002A   5009         JNC     ??task_music_get_num_4
    166                  t_msc.music_num = 1;
   \                     ??task_music_get_num_3:
   \   00002C   90....       MOV     DPTR,#(t_msc + 1)
   \   00002F   7401         MOV     A,#0x1
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   E4           CLR     A
   \   000034   F0           MOVX    @DPTR,A
    167              }
    168          }
   \                     ??task_music_get_num_4:
   \   000035   02....       LJMP    ?BRET

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   90....       MOV     DPTR,#(t_msc + 3)
   \                     ??Subroutine16_0:
   \   000003   12....       LCALL   ?Subroutine19
   \                     ??CrossCallReturnLabel_49:
   \   000006   22           RET

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   90....       MOV     DPTR,#(t_msc + 3)
   \                     ??Subroutine11_0:
   \   000003   C3           CLR     C
   \   000004   E0           MOVX    A,@DPTR
   \   000005   98           SUBB    A,R0
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   99           SUBB    A,R1
   \   000009   22           RET
    169          
    170          /*****************************************************************************
    171           * Module    : 音乐任务公共流程
    172           *****************************************************************************/
    173          //音乐任务初始化
    174          #pragma location="TASK_MUSIC_SEG_1"

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
    175          void task_music_enter(void)
   \                     task_music_enter:
    176          {
   \   000000   C0..         PUSH    ?V0 + 0
   \   000002   C0..         PUSH    ?V0 + 1
   \   000004   C0..         PUSH    ?V0 + 2
   \   000006                ; Saved register size: 3
   \   000006                ; Auto size: 0
    177          
    178              led_mode_off();
   \   000006                ; Setup parameters for call to function led_mode_off
   \   000006   90....       MOV     DPTR,#(led_mode_off & 0xffff)
   \   000009   74..         MOV     A,#((led_mode_off >> 16) & 0xff)
   \   00000B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    179              led_idle();
   \   00000E                ; Setup parameters for call to function led_idle
   \   00000E   90....       MOV     DPTR,#(led_idle & 0xffff)
   \   000011   74..         MOV     A,#((led_idle >> 16) & 0xff)
   \   000013   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    180              set_sys_clk(SYS_48M);
   \   000016                ; Setup parameters for call to function set_sys_clk
   \   000016   7900         MOV     R1,#0x0
   \   000018   90....       MOV     DPTR,#(set_sys_clk & 0xffff)
   \   00001B   74..         MOV     A,#((set_sys_clk >> 16) & 0xff)
   \   00001D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    181              draw_wait();
   \   000020                ; Setup parameters for call to function draw_wait
   \   000020   90....       MOV     DPTR,#(draw_wait & 0xffff)
   \   000023   74..         MOV     A,#((draw_wait >> 16) & 0xff)
   \   000025   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    182              //ledseg_disp(MENU_MUSIC_PLAY);
    183          #if FIRST_PLAY_UDISK                                  //2014-1-2, 避免U盘在线时，在其他模式插入SD卡仍播U盘
    184              if(device_is_actived(DEVICE_SDMMC) && device_is_actived(DEVICE_UDISK)) { //U盘和SD卡同时在线时优先播放U盘
    185                  if(fs_cur_dev() != DEVICE_UDISK){
    186                      fs_sel(DEVICE_UDISK);
    187                  }
    188              }
    189          #endif
    190          
    191          /*    if (!device_is_actived(DEVICE_SDMMC)) {
    192                  if (!device_is_actived(DEVICE_UDISK))
    193                  {
    194                      printf("A\n");
    195                      msgbox(STR_NO_DEVICE, NULL, MSGBOX_TIME);
    196                      task_ctl.work_sta = TASK_EXIT;      //设备无效，返回主菜单
    197                      return;
    198                  }
    199              } */
    200              draw_wait();
   \   000028                ; Setup parameters for call to function draw_wait
   \   000028   90....       MOV     DPTR,#(draw_wait & 0xffff)
   \   00002B   74..         MOV     A,#((draw_wait >> 16) & 0xff)
   \   00002D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    201              //设置任务
    202              task_ctl.work_sta = TASK_MUSIC;
   \   000030   7405         MOV     A,#0x5
   \   000032   90....       MOV     DPTR,#task_ctl
   \   000035   F0           MOVX    @DPTR,A
    203              memset(&t_msc,0, sizeof(t_msc));
   \   000036                ; Setup parameters for call to function my_memset
   \   000036   7C25         MOV     R4,#0x25
   \   000038   7D00         MOV     R5,#0x0
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   7A..         MOV     R2,#(t_msc & 0xff)
   \   00003E   7B..         MOV     R3,#((t_msc >> 8) & 0xff)
   \   000040   12....       LCALL   my_memset & 0xFFFF
    204          #if BREAK_POINT_EN
    205              t_msc.break_flag = 1;
    206          #endif
    207              //播放信息初始化
    208              t_msc.file_change = 1;                  //需要打开一个新文件
   \   000043   90....       MOV     DPTR,#(t_msc + 10)
   \   000046   E0           MOVX    A,@DPTR
   \   000047   4442         ORL     A,#0x42
   \   000049   F0           MOVX    @DPTR,A
    209              t_msc.music_num = 1;                    //打开的文件编号
   \   00004A   90....       MOV     DPTR,#(t_msc + 1)
   \   00004D   7401         MOV     A,#0x1
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   E4           CLR     A
   \   000052   F0           MOVX    @DPTR,A
    210              sys_ctl.dig_vol = 13;
   \   000053   740D         MOV     A,#0xd
   \   000055   90....       MOV     DPTR,#(sys_ctl + 29)
   \   000058   F0           MOVX    @DPTR,A
    211              sys_ctl.mic_volume = 8;
   \   000059   7408         MOV     A,#0x8
   \   00005B   90....       MOV     DPTR,#(sys_ctl + 30)
   \   00005E   F0           MOVX    @DPTR,A
    212              ocx_init(task_music_event, NULL);       //设置OCX需要响应的消息及事件
   \   00005F                ; Setup parameters for call to function ocx_init
   \   00005F   75..00       MOV     ?V0 + 0,#0x0
   \   000062   75..00       MOV     ?V0 + 1,#0x0
   \   000065   75..00       MOV     ?V0 + 2,#0x0
   \   000068   78..         MOV     R0,#?V0 + 0
   \   00006A   12....       LCALL   ?PUSH_ISTACK_I_THREE
   \   00006D   79..         MOV     R1,#(task_music_event & 0xff)
   \   00006F   7A..         MOV     R2,#((task_music_event >> 8) & 0xff)
   \   000071   7B..         MOV     R3,#((task_music_event >> 16) & 0xff)
   \   000073   90....       MOV     DPTR,#(ocx_init & 0xffff)
   \   000076   74..         MOV     A,#((ocx_init >> 16) & 0xff)
   \   000078   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00007B   D0E0         POP     A
   \   00007D   D0E0         POP     A
   \   00007F   D0E0         POP     A
    213              t_msc.disp_flag = 1; //显示控制
   \   000081   90....       MOV     DPTR,#(t_msc + 21)
   \   000084   E0           MOVX    A,@DPTR
   \   000085   D2E0         SETB    0xE0 /* A   */.0
   \   000087   F0           MOVX    @DPTR,A
    214              //change_digital_volume(sys_ctl.dig_vol);
    215              //sound_ctl_init(3, 0x800, 25, 0x800);     //连续3次超过0x800认为开始有声；连续25次0x800认为静音
    216              user_change_volume(sys_ctl.volume);//模拟音量
   \   000088                ; Setup parameters for call to function user_change_volume
   \   000088   90....       MOV     DPTR,#(sys_ctl + 6)
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F9           MOV     R1,A
   \   00008D   90....       MOV     DPTR,#(user_change_volume & 0xffff)
   \   000090   74..         MOV     A,#((user_change_volume >> 16) & 0xff)
   \   000092   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    217              dac_enable();
   \   000095                ; Setup parameters for call to function dac_enable
   \   000095   90....       MOV     DPTR,#(dac_enable & 0xffff)
   \   000098   74..         MOV     A,#((dac_enable >> 16) & 0xff)
   \   00009A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    218              //if (!sys_ctl.mute_flag) {
    219              //    sys_unmute();
    220              //}
    221          
    222              //配置扫描过滤器
    223              f_scan_set(SCAN_SUB_FOLDER|SCAN_SPEED, &file_filter_music, &dir_filter_music);
   \   00009D                ; Setup parameters for call to function f_scan_set
   \   00009D   75....       MOV     ?V0 + 0,#(dir_filter_music & 0xff)
   \   0000A0   75....       MOV     ?V0 + 1,#((dir_filter_music >> 8) & 0xff)
   \   0000A3   75....       MOV     ?V0 + 2,#((dir_filter_music >> 16) & 0xff)
   \   0000A6   78..         MOV     R0,#?V0 + 0
   \   0000A8   12....       LCALL   ?PUSH_ISTACK_I_THREE
   \   0000AB   75....       MOV     ?V0 + 0,#(file_filter_music & 0xff)
   \   0000AE   75....       MOV     ?V0 + 1,#((file_filter_music >> 8) & 0xff)
   \   0000B1   75....       MOV     ?V0 + 2,#((file_filter_music >> 16) & 0xff)
   \   0000B4   78..         MOV     R0,#?V0 + 0
   \   0000B6   12....       LCALL   ?PUSH_ISTACK_I_THREE
   \   0000B9   7921         MOV     R1,#0x21
   \   0000BB   90....       MOV     DPTR,#(f_scan_set & 0xffff)
   \   0000BE   74..         MOV     A,#((f_scan_set >> 16) & 0xff)
   \   0000C0   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000C3   74FA         MOV     A,#-0x6
   \   0000C5   12....       LCALL   ?DEALLOC_EXT_STACK8
    224              set_sys_clk(SYS_48M);
   \   0000C8                ; Setup parameters for call to function set_sys_clk
   \   0000C8   F9           MOV     R1,A
   \   0000C9   90....       MOV     DPTR,#(set_sys_clk & 0xffff)
   \   0000CC   74..         MOV     A,#((set_sys_clk >> 16) & 0xff)
   \   0000CE   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    225              if(!music_mount_device()) {
   \   0000D1                ; Setup parameters for call to function music_mount_device
   \   0000D1   90....       MOV     DPTR,#(music_mount_device & 0xffff)
   \   0000D4   74..         MOV     A,#((music_mount_device >> 16) & 0xff)
   \   0000D6   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000D9   401C         JC      ??task_music_enter_0
    226                  msgbox(STR_NO_MUSIC, NULL, MSGBOX_TIME);
   \   0000DB                ; Setup parameters for call to function msgbox
   \   0000DB   7C05         MOV     R4,#0x5
   \   0000DD   7900         MOV     R1,#0x0
   \   0000DF   7A57         MOV     R2,#0x57
   \   0000E1   7B00         MOV     R3,#0x0
   \   0000E3   90....       MOV     DPTR,#(msgbox & 0xffff)
   \   0000E6   74..         MOV     A,#((msgbox >> 16) & 0xff)
   \   0000E8   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    227                  if(task_ctl.work_sta != TASK_UPDATE_FW)
   \   0000EB   90....       MOV     DPTR,#task_ctl
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   6415         XRL     A,#0x15
   \   0000F1   6028         JZ      ??task_music_enter_1
    228                      task_ctl.work_sta = TASK_EXIT;          //设备无效，退出
   \   0000F3   741B         MOV     A,#0x1b
   \   0000F5   8023         SJMP    ??task_music_enter_2
    229                  return;
    230              }
    231              //sys_unmute();
    232              
    233              task_music_get_num();
   \                     ??task_music_enter_0:
   \   0000F7                ; Setup parameters for call to function task_music_get_num
   \   0000F7   90....       MOV     DPTR,#(task_music_get_num & 0xffff)
   \   0000FA   74..         MOV     A,#((task_music_get_num >> 16) & 0xff)
   \   0000FC   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    234              //开始播放
    235          
    236          #if MUSIC_MODE_WARNING_MUSIC
    237              if (work_sta_interrupt == TASK_NULL) {
    238                   mp3_res_play_wait(RES_MP3_MUSIC_MODE);
    239              }
    240          #endif
    241              work_sta_interrupt = TASK_NULL;
   \   0000FF   E4           CLR     A
   \   000100   90....       MOV     DPTR,#work_sta_interrupt
   \   000103   F0           MOVX    @DPTR,A
    242              led_idle();
   \   000104                ; Setup parameters for call to function led_idle
   \   000104   90....       MOV     DPTR,#(led_idle & 0xffff)
   \   000107   74..         MOV     A,#((led_idle >> 16) & 0xff)
   \   000109   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    243          
    244              dac_dynamic(DYNAMIC_NO);
   \   00010C                ; Setup parameters for call to function dac_dynamic
   \   00010C   7900         MOV     R1,#0x0
   \   00010E   90....       MOV     DPTR,#(dac_dynamic & 0xffff)
   \   000111   74..         MOV     A,#((dac_dynamic >> 16) & 0xff)
   \   000113   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    245          #if MIC_DIRECT_OUT_EN
    246              mic_direct_out_enter(MIC_CHANNEL_SEL,11);
    247          #endif
    248          #if THEME_SELECT==THEME_LCD_DEFAULT
    249              lcd_buf = lcd_buf2;   // lcd使用小buf，buf1与读lrc的buf复用了
    250          #endif
    251          #if 0
    252          #if IIS_TYPE == IIS_TAS5711
    253                      TAS5711_AMP_Mute_Set(FALSE);
    254          #endif
    255          #endif
    256              sys_ctl.mode_switch_flag = 0;
   \   000116   E4           CLR     A
   \   000117   90....       MOV     DPTR,#(sys_ctl + 61)
   \                     ??task_music_enter_2:
   \   00011A   F0           MOVX    @DPTR,A
    257          }
   \                     ??task_music_enter_1:
   \   00011B   02....       LJMP    ?Subroutine23
    258          
    259          //初始化第music_num首歌，并查找LRC文件
    260          #pragma location="MUSIC_SEG"

   \                                 In segment MUSIC_SEG, align 1, keep-with-next
    261          bool task_music_init(u16 music_num)
   \                     task_music_init:
    262          {
   \   000000   EE           MOV     A,R6
   \   000001   C0E0         PUSH    A
   \   000003   EF           MOV     A,R7
   \   000004   C0E0         PUSH    A
   \   000006                ; Saved register size: 2
   \   000006                ; Auto size: 0
   \   000006   EA           MOV     A,R2
   \   000007   FE           MOV     R6,A
   \   000008   EB           MOV     A,R3
   \   000009   FF           MOV     R7,A
    263              set_sys_clk(SYS_48M);
   \   00000A                ; Setup parameters for call to function set_sys_clk
   \   00000A   7900         MOV     R1,#0x0
   \   00000C   90....       MOV     DPTR,#(set_sys_clk & 0xffff)
   \   00000F   74..         MOV     A,#((set_sys_clk >> 16) & 0xff)
   \   000011   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    264              if (!f_open_opt(music_num)) {
   \   000014                ; Setup parameters for call to function f_open_opt
   \   000014   EE           MOV     A,R6
   \   000015   FA           MOV     R2,A
   \   000016   EF           MOV     A,R7
   \   000017   FB           MOV     R3,A
   \   000018   90....       MOV     DPTR,#(f_open_opt & 0xffff)
   \   00001B   74..         MOV     A,#((f_open_opt >> 16) & 0xff)
   \   00001D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000020   4003         JC      ??task_music_init_0
    265                  return false;
   \   000022   C3           CLR     C
   \   000023   8038         SJMP    ??task_music_init_1
    266              }
    267              t_msc.dir_num = fs_apiinfo.dir_count;
   \                     ??task_music_init_0:
   \   000025   90....       MOV     DPTR,#(fs_apiinfo + 6)
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   90....       MOV     DPTR,#(t_msc + 35)
   \   000030   E8           MOV     A,R0
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   E9           MOV     A,R1
   \   000034   F0           MOVX    @DPTR,A
    268          #if MUSIC_ENCRYPT_EN
    269              music_check_encrypt();//判断是否为加密mp3
    270          #endif
    271              f_get_opt_filename(filename);
   \   000035                ; Setup parameters for call to function f_get_opt_filename
   \   000035   7A..         MOV     R2,#(filename & 0xff)
   \   000037   7B..         MOV     R3,#((filename >> 8) & 0xff)
   \   000039   90....       MOV     DPTR,#(f_get_opt_filename & 0xffff)
   \   00003C   74..         MOV     A,#((f_get_opt_filename >> 16) & 0xff)
   \   00003E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    272          #if MUSIC_ENCRYPT_EN
    273              music_head_decrypt();
    274          #endif
    275          #if MUSIC_LRC_EN
    276              task_music_lrc_init();                  //歌词在mp3初始化之前查找，否则可能破坏MP3数据
    277          #endif
    278              //printf("dir: %d %d\n", t_msc.dir_start, t_msc.dir_total);
    279          
    280              t_msc.music_type = music_init();
   \   000041                ; Setup parameters for call to function music_init
   \   000041   90....       MOV     DPTR,#(music_init & 0xffff)
   \   000044   74..         MOV     A,#((music_init >> 16) & 0xff)
   \   000046   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000049   E9           MOV     A,R1
   \   00004A   90....       MOV     DPTR,#(t_msc + 7)
   \   00004D   F0           MOVX    @DPTR,A
    281          #if MUSIC_ID3_EN
    282              music_decode_ID3();
    283          #endif
    284              if (t_msc.music_type == TYPE_MP3) {
   \   00004E   6401         XRL     A,#0x1
   \   000050   700A         JNZ     ??task_music_init_2
    285                  set_sys_clk(SYS_24M);               //MP3使用24MHz
   \   000052                ; Setup parameters for call to function set_sys_clk
   \   000052   7901         MOV     R1,#0x1
   \   000054   90....       MOV     DPTR,#(set_sys_clk & 0xffff)
   \   000057   74..         MOV     A,#((set_sys_clk >> 16) & 0xff)
   \   000059   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    286              }
    287              return true;
   \                     ??task_music_init_2:
   \   00005C   D3           SETB    C
   \                     ??task_music_init_1:
   \   00005D   D0E0         POP     A
   \   00005F   FF           MOV     R7,A
   \   000060   D0E0         POP     A
   \   000062   FE           MOV     R6,A
   \   000063   02....       LJMP    ?BRET
    288          }
    289          
    290          #if MUSIC_LRC_EN
    291          //初始化歌词
    292          #pragma location="MUSIC_SEG"
    293          bool music_lrc_init(void)
    294          {
    295          #if MUSIC_ENCRYPT_EN
    296              if (!lrc_open_encrypt())
    297          #endif
    298              {
    299                  if (!f_open_lrcfile()) {
    300                      return false;
    301                  }
    302              }
    303              t_msc.lrc_type = lrc_init();
    304          
    305          #if (LRC_FILENAME_TIME == 1)
    306              //直接显示歌词
    307              t_msc.lrc_change = music_get_lrc(music_lrc_cur_time());
    308          #endif
    309              return true;
    310          }
    311          
    312          //刚打开歌时，需要查找并初始化LRC文件
    313          #pragma location="TASK_MUSIC_SEG_1"
    314          void task_music_lrc_init(void)
    315          {
    316              t_msc.lrc_flag = music_lrc_init();            //打开歌词
    317              if (!t_msc.lrc_flag) {
    318                  t_msc.filename_change = 1;          //刷新文件名显示
    319              } else {
    320                  t_msc.lrc_change = 1;               //刷新歌词显示
    321              }
    322          }
    323          #endif
    324          
    325          //退出Music任务
    326          #pragma location="TASK_MUSIC_SEG_1"

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
    327          void task_music_exit(void)
   \                     task_music_exit:
    328          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    329          #if NPCP215X
    330              //Audio_Slow_Volume(MUTE);
    331              AudioCodec_MUTE(MUTE);
   \   000000                ; Setup parameters for call to function AudioCodec_MUTE
   \   000000   7901         MOV     R1,#0x1
   \   000002   90....       MOV     DPTR,#(AudioCodec_MUTE & 0xffff)
   \   000005   74..         MOV     A,#((AudioCodec_MUTE >> 16) & 0xff)
   \   000007   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    332          #endif
    333              //sys_mute();
    334              //printf("task_music_exit\n");
    335          #if 0    
    336          #if IIS_TYPE == IIS_TAS5711
    337              TAS5711_AMP_Mute_Set(TRUE);
    338          #endif
    339          #endif
    340          
    341          #if MODE_CHANGE_BLUE_ON
    342              led_mode_on();
   \   00000A                ; Setup parameters for call to function led_mode_on
   \   00000A   90....       MOV     DPTR,#(led_mode_on & 0xffff)
   \   00000D   74..         MOV     A,#((led_mode_on >> 16) & 0xff)
   \   00000F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    343          #endif
    344              music_stop();                           //结束Music播放
   \   000012                ; Setup parameters for call to function music_stop
   \   000012   90....       MOV     DPTR,#(music_stop & 0xffff)
   \   000015   74..         MOV     A,#((music_stop >> 16) & 0xff)
   \   000017   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    345          #if MIC_DIRECT_OUT_EN
    346              mic_direct_out_exit();
    347          #endif
    348              dac_disable();
   \   00001A                ; Setup parameters for call to function dac_disable
   \   00001A   90....       MOV     DPTR,#(dac_disable & 0xffff)
   \   00001D   74..         MOV     A,#((dac_disable >> 16) & 0xff)
   \   00001F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    349              dac_dynamic(DYNAMIC_NO);
   \   000022                ; Setup parameters for call to function dac_dynamic
   \   000022   7900         MOV     R1,#0x0
   \   000024   90....       MOV     DPTR,#(dac_dynamic & 0xffff)
   \   000027   74..         MOV     A,#((dac_dynamic >> 16) & 0xff)
   \   000029   02....       LJMP    ?Subroutine24
    350          #if THEME_SELECT==THEME_LCD_DEFAULT
    351              lcd_buf = lcd_buf1;   // lcd恢复使用大buf
    352          #endif
    353          }
    354          
    355          #pragma location="TASK_MUSIC_SEG"

   \                                 In segment TASK_MUSIC_SEG, align 1, keep-with-next
    356          bool task_music_auto_prev_device(void)
   \                     task_music_auto_prev_device:
    357          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    358              if(is_other_device()) {                 //检查是否有其他设备
   \   000000                ; Setup parameters for call to function is_other_device
   \   000000   90....       MOV     DPTR,#(is_other_device & 0xffff)
   \   000003   74..         MOV     A,#((is_other_device >> 16) & 0xff)
   \   000005   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000008   501D         JNC     ??task_music_auto_prev_device_0
    359                  //t_msc.music_err = 0;
    360                  if(!music_next_device()) {          //选择上一设备挂载文件系统
   \   00000A                ; Setup parameters for call to function music_next_device
   \   00000A   90....       MOV     DPTR,#(music_next_device & 0xffff)
   \   00000D   74..         MOV     A,#((music_next_device >> 16) & 0xff)
   \   00000F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000012   4013         JC      ??task_music_auto_prev_device_0
    361                      if(!music_next_device()) {      //如果无上一设备返回原设备
   \   000014                ; Setup parameters for call to function music_next_device
   \   000014   90....       MOV     DPTR,#(music_next_device & 0xffff)
   \   000017   74..         MOV     A,#((music_next_device >> 16) & 0xff)
   \   000019   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00001C   4009         JC      ??task_music_auto_prev_device_0
    362                          task_ctl.work_sta = TASK_EXIT;  //设备无效，退出
   \   00001E   741B         MOV     A,#0x1b
   \   000020   90....       MOV     DPTR,#task_ctl
   \   000023   F0           MOVX    @DPTR,A
    363                          return false;
   \   000024   C3           CLR     C
   \   000025   8013         SJMP    ??task_music_auto_prev_device_1
    364                      }
    365                  }
    366              }
    367          
    368              t_msc.music_num = t_msc.music_total;    //从第最后一首歌播起
   \                     ??task_music_auto_prev_device_0:
   \   000027   90....       MOV     DPTR,#(t_msc + 3)
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F8           MOV     R0,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F9           MOV     R1,A
   \   00002F   90....       MOV     DPTR,#(t_msc + 1)
   \   000032   E8           MOV     A,R0
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   E9           MOV     A,R1
   \   000036   12....       LCALL   ?Subroutine2
    369              t_msc.file_change = 1;                  //需要打开一个新文件
    370              return true;
   \                     ??CrossCallReturnLabel_4:
   \   000039   D3           SETB    C
   \                     ??task_music_auto_prev_device_1:
   \   00003A   02....       LJMP    ?BRET
    371          }

   \                                 In segment TASK_MUSIC_SEG, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_7:
   \   000003   22           RET
    372          
    373          //自动下一曲到下一设备播放
    374          #pragma location="TASK_MUSIC_SEG"

   \                                 In segment TASK_MUSIC_SEG, align 1, keep-with-next
    375          bool task_music_auto_next_device(void)
   \                     task_music_auto_next_device:
    376          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    377              if(is_other_device()) {                 //检查是否有其他设备
   \   000000                ; Setup parameters for call to function is_other_device
   \   000000   90....       MOV     DPTR,#(is_other_device & 0xffff)
   \   000003   74..         MOV     A,#((is_other_device >> 16) & 0xff)
   \   000005   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000008   501D         JNC     ??task_music_auto_next_device_0
    378                  //t_msc.music_err = 0;
    379                  if(!music_next_device()) {          //选择下一设备挂载文件系统
   \   00000A                ; Setup parameters for call to function music_next_device
   \   00000A   90....       MOV     DPTR,#(music_next_device & 0xffff)
   \   00000D   74..         MOV     A,#((music_next_device >> 16) & 0xff)
   \   00000F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000012   4013         JC      ??task_music_auto_next_device_0
    380                      if(!music_next_device()) {      //如果无下一设备返回原设备
   \   000014                ; Setup parameters for call to function music_next_device
   \   000014   90....       MOV     DPTR,#(music_next_device & 0xffff)
   \   000017   74..         MOV     A,#((music_next_device >> 16) & 0xff)
   \   000019   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00001C   4009         JC      ??task_music_auto_next_device_0
    381                          task_ctl.work_sta = TASK_EXIT;  //设备无效，退出
   \   00001E   741B         MOV     A,#0x1b
   \   000020   90....       MOV     DPTR,#task_ctl
   \   000023   F0           MOVX    @DPTR,A
    382                          return false;
   \   000024   C3           CLR     C
   \   000025   8004         SJMP    ??task_music_auto_next_device_1
    383                      }
    384                  }
    385              }
    386          
    387              t_msc.music_num = 1;                    //从第一首歌播起
   \                     ??task_music_auto_next_device_0:
   \   000027   12....       LCALL   ?Subroutine0
    388              t_msc.file_change = 1;                  //需要打开一个新文件
    389              return true;
   \                     ??CrossCallReturnLabel_1:
   \   00002A   D3           SETB    C
   \                     ??task_music_auto_next_device_1:
   \   00002B   02....       LJMP    ?BRET
    390          }
    391          
    392          #if AB_REPEAT_EN
    393          //计算AB时间
    394          #pragma location="TASK_MUSIC_SEG_1"
    395          u32 task_music_calc_pointab(void)
    396          {
    397              return (music_calc_mtime(t_msc.point.pb.frame) - music_calc_mtime(t_msc.point.pa.frame));
    398          }
    399          #endif
    400          
    401          //上一文件夹
    402          #if FOLDER_SELECT
    403          #pragma location="TASK_MUSIC_SEG_1"

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
    404          void task_music_prev_dir(void)
   \                     task_music_prev_dir:
    405          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    406              if(t_msc.dir_total <= 1) {
   \   000000   12....       LCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_34:
   \   000003   402B         JC      ??CrossCallReturnLabel_52
    407                  return;
    408              }
    409          
    410              if(t_msc.dir_num <= 1) {
   \   000005   90....       MOV     DPTR,#(t_msc + 35)
   \   000008   C3           CLR     C
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   9402         SUBB    A,#0x2
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   9400         SUBB    A,#0x0
   \   000010   90....       MOV     DPTR,#(t_msc + 35)
   \   000013   5006         JNC     ??task_music_prev_dir_0
    411                  t_msc.dir_num = t_msc.dir_total;
   \   000015   E8           MOV     A,R0
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   E9           MOV     A,R1
   \   000019   8003         SJMP    ??CrossCallReturnLabel_50
    412              } else {
    413                  t_msc.dir_num--;
   \                     ??task_music_prev_dir_0:
   \   00001B   12....       LCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_50:
   \   00001E   F0           MOVX    @DPTR,A
    414              }
    415              music_stop();
   \   00001F                ; Setup parameters for call to function music_stop
   \   00001F   90....       MOV     DPTR,#(music_stop & 0xffff)
   \   000022   74..         MOV     A,#((music_stop >> 16) & 0xff)
   \   000024   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    416              f_open_folder(t_msc.dir_num);
   \   000027                ; Setup parameters for call to function f_open_folder
   \   000027   12....       LCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_36:
   \   00002A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    417              t_msc.file_change = 1;
   \   00002D   12....       LCALL   ?Subroutine8
    418              t_msc.music_num = fs_apiinfo.file_count;
    419          }
   \                     ??CrossCallReturnLabel_52:
   \   000030   02....       LJMP    ?BRET

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   90....       MOV     DPTR,#(t_msc + 35)
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FB           MOV     R3,A
   \   000008   90....       MOV     DPTR,#(f_open_folder & 0xffff)
   \   00000B   74..         MOV     A,#((f_open_folder >> 16) & 0xff)
   \   00000D   22           RET

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   90....       MOV     DPTR,#(t_msc + 33)
   \   000003   12....       LCALL   ?Subroutine19
   \                     ??CrossCallReturnLabel_48:
   \   000006   C3           CLR     C
   \   000007   E8           MOV     A,R0
   \   000008   9402         SUBB    A,#0x2
   \   00000A   E9           MOV     A,R1
   \   00000B   9400         SUBB    A,#0x0
   \   00000D   22           RET

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   90....       MOV     DPTR,#(t_msc + 10)
   \   000003   E0           MOVX    A,@DPTR
   \   000004   D2E1         SETB    0xE0 /* A   */.1
   \   000006   F0           MOVX    @DPTR,A
   \   000007   90....       MOV     DPTR,#(fs_apiinfo + 4)
   \   00000A   12....       LCALL   ?Subroutine19
   \                     ??CrossCallReturnLabel_46:
   \   00000D   90....       MOV     DPTR,#(t_msc + 1)
   \   000010                REQUIRE ?Subroutine25
   \   000010                ; // Fall through to label ?Subroutine25

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   24FF         ADD     A,#-0x1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   34FF         ADDC    A,#-0x1
   \   000008   22           RET
    420          
    421          //上一文件夹
    422          #pragma location="TASK_MUSIC_SEG_1"

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
    423          void task_music_next_dir(void)
   \                     task_music_next_dir:
    424          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    425              if(t_msc.dir_total <= 1) {
   \   000000   12....       LCALL   ?Subroutine13
   \                     ??CrossCallReturnLabel_35:
   \   000003   4027         JC      ??CrossCallReturnLabel_53
    426                  return;
    427              }
    428          
    429              if(t_msc.dir_num >= t_msc.dir_total) {
   \   000005   90....       MOV     DPTR,#(t_msc + 35)
   \   000008   12....       LCALL   ??Subroutine11_0
   \                     ??CrossCallReturnLabel_25:
   \   00000B   90....       MOV     DPTR,#(t_msc + 35)
   \   00000E   4007         JC      ??task_music_next_dir_0
    430                  t_msc.dir_num = 1;
   \   000010   7401         MOV     A,#0x1
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   E4           CLR     A
   \   000015   8003         SJMP    ??CrossCallReturnLabel_31
    431              } else {
    432                  t_msc.dir_num++;
   \                     ??task_music_next_dir_0:
   \   000017   12....       LCALL   ??Subroutine12_0
   \                     ??CrossCallReturnLabel_31:
   \   00001A   F0           MOVX    @DPTR,A
    433              }
    434              music_stop();
   \   00001B                ; Setup parameters for call to function music_stop
   \   00001B   90....       MOV     DPTR,#(music_stop & 0xffff)
   \   00001E   74..         MOV     A,#((music_stop >> 16) & 0xff)
   \   000020   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    435              f_open_folder(t_msc.dir_num);
   \   000023                ; Setup parameters for call to function f_open_folder
   \   000023   12....       LCALL   ?Subroutine14
   \                     ??CrossCallReturnLabel_37:
   \   000026   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    436              t_msc.file_change = 1;
   \   000029   12....       LCALL   ?Subroutine8
    437              t_msc.music_num = fs_apiinfo.file_count;
    438          }
   \                     ??CrossCallReturnLabel_53:
   \   00002C   02....       LJMP    ?BRET

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   90....       MOV     DPTR,#(t_msc + 1)
   \                     ??Subroutine12_0:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2401         ADD     A,#0x1
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3400         ADDC    A,#0x0
   \   00000B   22           RET
    439          #endif
    440          
    441          #pragma location="TASK_MUSIC_SEG_1"

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
    442          void music_file_num_set(bool Up_Down)
   \                     music_file_num_set:
    443          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   A2F0         MOV     C,B.0
    444              sys_ctl.file_change_flag = 1;
   \   000002   7401         MOV     A,#0x1
   \   000004   90....       MOV     DPTR,#(sys_ctl + 62)
   \   000007   F0           MOVX    @DPTR,A
    445              if(Up_Down)
   \   000008   5007         JNC     ??music_file_num_set_0
    446              {
    447                  task_music_next_dir();
   \   00000A                ; Setup parameters for call to function task_music_next_dir
   \   00000A   90....       MOV     DPTR,#(task_music_next_dir & 0xffff)
   \   00000D   74..         MOV     A,#((task_music_next_dir >> 16) & 0xff)
   \   00000F   8005         SJMP    ??music_file_num_set_1
    448              }
    449              else 
    450              {
    451                  task_music_prev_dir();    
   \                     ??music_file_num_set_0:
   \   000011                ; Setup parameters for call to function task_music_prev_dir
   \   000011   90....       MOV     DPTR,#(task_music_prev_dir & 0xffff)
   \   000014   74..         MOV     A,#((task_music_prev_dir >> 16) & 0xff)
   \                     ??music_file_num_set_1:
   \   000016   02....       LJMP    ?Subroutine24
    452              }    
    453          }
    454          
    455          //上一曲
    456          #pragma location="TASK_MUSIC_SEG_1"

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
    457          void task_music_prev(void)
   \                     task_music_prev:
    458          {
   \   000000   7402         MOV     A,#0x2
   \   000002   12....       LCALL   ?FUNC_ENTER_SP
   \   000005                ; Saved register size: 5
   \   000005                ; Auto size: 0
    459          #if AUTO_CHANGE_DEVICE
    460              if(sys_ctl.mode_play == ITEM_LOOP_ALL)  //全部循环才自动切设备
    461              {
    462                  if(t_msc.music_num == 1)
    463                  {
    464                      if(task_music_auto_prev_device())
    465                      {
    466          #if BREAK_POINT_EN
    467                          t_msc.break_flag = 0;
    468          #endif
    469                          return;
    470                      }
    471                  }
    472              }
    473          #endif
    474              u16 dir_start = f_get_indexbefore() + 1;        //当前目录第一个文件的编号
   \   000005                ; Setup parameters for call to function f_get_indexbefore
   \   000005   90....       MOV     DPTR,#(f_get_indexbefore & 0xffff)
   \   000008   74..         MOV     A,#((f_get_indexbefore >> 16) & 0xff)
   \   00000A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00000D   12....       LCALL   ?Subroutine18
    475              switch (sys_ctl.mode_play) {
   \                     ??CrossCallReturnLabel_44:
   \   000010   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for task_music_prev>_0`:
   \   000013   00           DB        0
   \   000014   05           DB        5
   \   000015   ....         DW        ??task_music_prev_0
   \   000017   ....         DW        ??task_music_prev_1
   \   000019   ....         DW        ??task_music_prev_1
   \   00001B   ....         DW        ??task_music_prev_2
   \   00001D   ....         DW        ??task_music_prev_1
   \   00001F   ....         DW        ??task_music_prev_3
   \   000021   ....         DW        ??task_music_prev_2
    476              case ITEM_LOOP_ALL:
    477              case ITEM_LOOP_SINGLE:
    478              case ITEM_LOOP_NORMAL:
    479                  //全部循环
    480                  t_msc.music_num--;
   \                     ??task_music_prev_1:
   \   000023   12....       LCALL   ?Subroutine9
    481                  if (t_msc.music_num == 0 || t_msc.music_num > t_msc.music_total) {
   \                     ??CrossCallReturnLabel_19:
   \   000026   E8           MOV     A,R0
   \   000027   7001         JNZ     ??task_music_prev_4
   \   000029   E9           MOV     A,R1
   \                     ??task_music_prev_4:
   \   00002A   6008         JZ      ??task_music_prev_5
   \   00002C   90....       MOV     DPTR,#(t_msc + 3)
   \   00002F   12....       LCALL   ??Subroutine11_0
   \                     ??CrossCallReturnLabel_26:
   \   000032   504E         JNC     ??task_music_prev_0
    482                      t_msc.music_num = t_msc.music_total;
   \                     ??task_music_prev_5:
   \   000034   90....       MOV     DPTR,#(t_msc + 3)
   \                     ??task_music_prev_6:
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F8           MOV     R0,A
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   803C         SJMP    ??task_music_prev_7
    483                  }
    484                  break;
    485              case ITEM_LOOP_FOLDER:
    486              case ITEM_LOOP_BROWSE:
    487                  //目录循环
    488          	    music_stop();
   \                     ??task_music_prev_2:
   \   00003D                ; Setup parameters for call to function music_stop
   \   00003D   90....       MOV     DPTR,#(music_stop & 0xffff)
   \   000040   74..         MOV     A,#((music_stop >> 16) & 0xff)
   \   000042   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    489                  t_msc.dir_last = dir_start + f_get_dirtotal() - 1;
   \   000045                ; Setup parameters for call to function f_get_dirtotal
   \   000045   90....       MOV     DPTR,#(f_get_dirtotal & 0xffff)
   \   000048   74..         MOV     A,#((f_get_dirtotal >> 16) & 0xff)
   \   00004A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00004D   12....       LCALL   ?Subroutine17
    490                  t_msc.music_num--;
   \                     ??CrossCallReturnLabel_54:
   \   000050   12....       LCALL   ?Subroutine9
    491                  if (t_msc.music_num < dir_start || t_msc.music_num > t_msc.dir_last) {
   \                     ??CrossCallReturnLabel_20:
   \   000053   C3           CLR     C
   \   000054   E8           MOV     A,R0
   \   000055   9E           SUBB    A,R6
   \   000056   E9           MOV     A,R1
   \   000057   9F           SUBB    A,R7
   \   000058   4008         JC      ??task_music_prev_8
   \   00005A   90....       MOV     DPTR,#(t_msc + 5)
   \   00005D   12....       LCALL   ??Subroutine11_0
   \                     ??CrossCallReturnLabel_27:
   \   000060   5020         JNC     ??task_music_prev_0
    492                      t_msc.music_num = t_msc.dir_last;
   \                     ??task_music_prev_8:
   \   000062   90....       MOV     DPTR,#(t_msc + 5)
   \   000065   80D0         SJMP    ??task_music_prev_6
    493                  }
    494                  break;
    495              case ITEM_LOOP_RAMDOM:
    496                  t_msc.music_num = rand(t_msc.music_total) + 1;
   \                     ??task_music_prev_3:
   \   000067                ; Setup parameters for call to function rand
   \   000067   12....       LCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_38:
   \   00006A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00006D   8A..         MOV     ?V0 + 0,R2
   \   00006F   8B..         MOV     ?V0 + 1,R3
   \   000071   7401         MOV     A,#0x1
   \   000073   25..         ADD     A,?V0 + 0
   \   000075   F8           MOV     R0,A
   \   000076   E4           CLR     A
   \   000077   35..         ADDC    A,?V0 + 1
   \                     ??task_music_prev_7:
   \   000079   F9           MOV     R1,A
   \   00007A   90....       MOV     DPTR,#(t_msc + 1)
   \   00007D   E8           MOV     A,R0
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   A3           INC     DPTR
   \   000080   E9           MOV     A,R1
   \   000081   F0           MOVX    @DPTR,A
    497                  break;
    498              }
    499              t_msc.file_change = 1;
    500              t_msc.file_prev_next = 1;                       //设置方向，供解码出错时使用
   \                     ??task_music_prev_0:
   \   000082   90....       MOV     DPTR,#(t_msc + 10)
   \   000085   E0           MOVX    A,@DPTR
   \   000086   4406         ORL     A,#0x6
   \   000088                REQUIRE ?Subroutine26
   \   000088                ; // Fall through to label ?Subroutine26
    501          }

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   7F02         MOV     R7,#0x2
   \   000003   02....       LJMP    ?BANKED_LEAVE_SP

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   90....       MOV     DPTR,#(t_msc + 1)
   \   000003   12....       LCALL   ?Subroutine20
   \                     ??CrossCallReturnLabel_51:
   \   000006   F0           MOVX    @DPTR,A
   \   000007   90....       MOV     DPTR,#(t_msc + 1)
   \   00000A   12....       LCALL   ?Subroutine19
   \                     ??CrossCallReturnLabel_47:
   \   00000D   22           RET

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   8A..         MOV     ?V0 + 0,R2
   \   000002   8B..         MOV     ?V0 + 1,R3
   \   000004   7401         MOV     A,#0x1
   \   000006   25..         ADD     A,?V0 + 0
   \   000008   FE           MOV     R6,A
   \   000009   E4           CLR     A
   \   00000A   35..         ADDC    A,?V0 + 1
   \   00000C   FF           MOV     R7,A
   \   00000D   90....       MOV     DPTR,#(sys_ctl + 4)
   \   000010   E0           MOVX    A,@DPTR
   \   000011   22           RET

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   EA           MOV     A,R2
   \   000001   2E           ADD     A,R6
   \   000002   F8           MOV     R0,A
   \   000003   EB           MOV     A,R3
   \   000004   3F           ADDC    A,R7
   \   000005   F9           MOV     R1,A
   \   000006   74FF         MOV     A,#-0x1
   \   000008   28           ADD     A,R0
   \   000009   18           DEC     R0
   \   00000A   74FF         MOV     A,#-0x1
   \   00000C   39           ADDC    A,R1
   \   00000D   F9           MOV     R1,A
   \   00000E   90....       MOV     DPTR,#(t_msc + 5)
   \   000011   02....       LJMP    ?Subroutine25

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   90....       MOV     DPTR,#(t_msc + 3)
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FB           MOV     R3,A
   \   000008   90....       MOV     DPTR,#(rand & 0xffff)
   \   00000B   74..         MOV     A,#((rand >> 16) & 0xff)
   \   00000D   22           RET
    502          
    503          //下一曲
    504          #pragma location="TASK_MUSIC_SEG_1"

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
    505          void task_music_next(void)
   \                     task_music_next:
    506          {
   \   000000   7402         MOV     A,#0x2
   \   000002   12....       LCALL   ?FUNC_ENTER_SP
   \   000005                ; Saved register size: 5
   \   000005                ; Auto size: 0
    507          #if AUTO_CHANGE_DEVICE
    508              if(sys_ctl.mode_play == ITEM_LOOP_ALL)          //全部循环才自动切设备
    509              {   //全部循环才自动切设备
    510                  if(t_msc.music_num == t_msc.music_total)
    511                  {
    512                      if(task_music_auto_next_device())
    513                      {
    514          #if BREAK_POINT_EN
    515                          t_msc.break_flag = 0;
    516          #endif
    517                          return;
    518                      }
    519                  }
    520              }
    521          #endif
    522              u16 dir_start = f_get_indexbefore() + 1;        //当前目录第一个文件的编号
   \   000005                ; Setup parameters for call to function f_get_indexbefore
   \   000005   90....       MOV     DPTR,#(f_get_indexbefore & 0xffff)
   \   000008   74..         MOV     A,#((f_get_indexbefore >> 16) & 0xff)
   \   00000A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00000D   12....       LCALL   ?Subroutine18
    523              switch (sys_ctl.mode_play) {
   \                     ??CrossCallReturnLabel_45:
   \   000010   12....       LCALL   ?UC_SWITCH_DENSE
   \                     `?<Jumptable for task_music_next>_0`:
   \   000013   00           DB        0
   \   000014   05           DB        5
   \   000015   ....         DW        ??task_music_next_0
   \   000017   ....         DW        ??task_music_next_1
   \   000019   ....         DW        ??task_music_next_1
   \   00001B   ....         DW        ??task_music_next_2
   \   00001D   ....         DW        ??task_music_next_1
   \   00001F   ....         DW        ??task_music_next_3
   \   000021   ....         DW        ??task_music_next_2
    524              case ITEM_LOOP_ALL:
    525              case ITEM_LOOP_SINGLE:
    526              case ITEM_LOOP_NORMAL:
    527                  //全部循环
    528                  if (t_msc.music_num >= t_msc.music_total) {
   \                     ??task_music_next_1:
   \   000023   12....       LCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_41:
   \   000026   7583..       MOV     DPH,#(((t_msc + 1) >> 8) & 0xff)
   \   000029   7582..       MOV     DPL,#((t_msc + 1) & 0xff)
   \   00002C   12....       LCALL   ??Subroutine11_0
   \                     ??CrossCallReturnLabel_28:
   \   00002F   4007         JC      ??task_music_next_4
    529                      t_msc.music_num = 0;
   \   000031   90....       MOV     DPTR,#(t_msc + 1)
   \   000034   E4           CLR     A
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   F0           MOVX    @DPTR,A
    530                  }
    531                  t_msc.music_num++;
   \                     ??task_music_next_4:
   \   000038   12....       LCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_32:
   \   00003B   804F         SJMP    ??task_music_next_5
    532                  break;
    533              case ITEM_LOOP_FOLDER:
    534              case ITEM_LOOP_BROWSE:
    535                  //目录循环
    536          		music_stop();
   \                     ??task_music_next_2:
   \   00003D                ; Setup parameters for call to function music_stop
   \   00003D   90....       MOV     DPTR,#(music_stop & 0xffff)
   \   000040   74..         MOV     A,#((music_stop >> 16) & 0xff)
   \   000042   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    537                  t_msc.dir_last = dir_start + f_get_dirtotal() - 1;
   \   000045                ; Setup parameters for call to function f_get_dirtotal
   \   000045   90....       MOV     DPTR,#(f_get_dirtotal & 0xffff)
   \   000048   74..         MOV     A,#((f_get_dirtotal >> 16) & 0xff)
   \   00004A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00004D   12....       LCALL   ?Subroutine17
    538                  t_msc.music_num++;
   \                     ??CrossCallReturnLabel_55:
   \   000050   12....       LCALL   ?Subroutine12
   \                     ??CrossCallReturnLabel_33:
   \   000053   F0           MOVX    @DPTR,A
    539                  if (t_msc.music_num < dir_start || t_msc.music_num > t_msc.dir_last) {
   \   000054   90....       MOV     DPTR,#(t_msc + 1)
   \   000057   12....       LCALL   ??Subroutine16_0
   \                     ??CrossCallReturnLabel_42:
   \   00005A   C3           CLR     C
   \   00005B   E8           MOV     A,R0
   \   00005C   9E           SUBB    A,R6
   \   00005D   E9           MOV     A,R1
   \   00005E   9F           SUBB    A,R7
   \   00005F   4008         JC      ??task_music_next_6
   \   000061   90....       MOV     DPTR,#(t_msc + 5)
   \   000064   12....       LCALL   ??Subroutine11_0
   \                     ??CrossCallReturnLabel_29:
   \   000067   5024         JNC     ??task_music_next_0
    540                      t_msc.music_num = dir_start;
   \                     ??task_music_next_6:
   \   000069   90....       MOV     DPTR,#(t_msc + 1)
   \   00006C   EE           MOV     A,R6
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   A3           INC     DPTR
   \   00006F   EF           MOV     A,R7
   \   000070   801A         SJMP    ??task_music_next_5
    541                  }
    542                  break;
    543              case ITEM_LOOP_RAMDOM:
    544                  t_msc.music_num = rand(t_msc.music_total) + 1;
   \                     ??task_music_next_3:
   \   000072                ; Setup parameters for call to function rand
   \   000072   12....       LCALL   ?Subroutine15
   \                     ??CrossCallReturnLabel_39:
   \   000075   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000078   8A..         MOV     ?V0 + 0,R2
   \   00007A   8B..         MOV     ?V0 + 1,R3
   \   00007C   7401         MOV     A,#0x1
   \   00007E   25..         ADD     A,?V0 + 0
   \   000080   F8           MOV     R0,A
   \   000081   E4           CLR     A
   \   000082   35..         ADDC    A,?V0 + 1
   \   000084   F9           MOV     R1,A
   \   000085   90....       MOV     DPTR,#(t_msc + 1)
   \   000088   E8           MOV     A,R0
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   E9           MOV     A,R1
   \                     ??task_music_next_5:
   \   00008C   F0           MOVX    @DPTR,A
    545                  break;
    546              }
    547              t_msc.file_change = 1;
    548              t_msc.file_prev_next = 0;                       //设置方向，供解码出错时使用
   \                     ??task_music_next_0:
   \   00008D   90....       MOV     DPTR,#(t_msc + 10)
   \   000090   E0           MOVX    A,@DPTR
   \   000091   54FB         ANL     A,#0xfb
   \   000093   4402         ORL     A,#0x2
   \   000095   02....       LJMP    ?Subroutine26
    549          }
    550          
    551          //自动下一曲
    552          #pragma location="TASK_MUSIC_SEG_1"

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
    553          void task_music_auto_next(void)
   \                     task_music_auto_next:
    554          {
   \   000000   7408         MOV     A,#0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_SP
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    555              if (music_get_mtime() < 3) {
   \   000005                ; Setup parameters for call to function music_get_mtime
   \   000005   12....       LCALL   music_get_mtime & 0xFFFF
   \   000008   8A..         MOV     ?V0 + 0,R2
   \   00000A   8B..         MOV     ?V0 + 1,R3
   \   00000C   8C..         MOV     ?V0 + 2,R4
   \   00000E   8D..         MOV     ?V0 + 3,R5
   \   000010   90....       MOV     DPTR,#__Constant_3
   \   000013   78..         MOV     R0,#?V0 + 4
   \   000015   12....       LCALL   ?L_MOV_C
   \   000018   78..         MOV     R0,#?V0 + 4
   \   00001A   79..         MOV     R1,#?V0 + 0
   \   00001C   12....       LCALL   ?UL_GT
   \   00001F   90....       MOV     DPTR,#(t_msc + 10)
   \   000022   E0           MOVX    A,@DPTR
   \   000023   5015         JNC     ??task_music_auto_next_0
    556                  //播放不足300ms，认为本歌错误
    557                  if (t_msc.file_prev_next) {             //初始化失败，重新读取下一个文件
   \   000025   A2E2         MOV     C,0xE0 /* A   */.2
   \   000027   500A         JNC     ??task_music_auto_next_1
    558                      task_music_prev();
   \   000029                ; Setup parameters for call to function task_music_prev
   \   000029   90....       MOV     DPTR,#(task_music_prev & 0xffff)
   \   00002C   74..         MOV     A,#((task_music_prev >> 16) & 0xff)
   \                     ??task_music_auto_next_2:
   \   00002E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000031   8014         SJMP    ??task_music_auto_next_3
    559                  } else {
    560                      task_music_next();
   \                     ??task_music_auto_next_1:
   \   000033                ; Setup parameters for call to function task_music_next
   \   000033   90....       MOV     DPTR,#(task_music_next & 0xffff)
   \   000036   74..         MOV     A,#((task_music_next >> 16) & 0xff)
   \   000038   80F4         SJMP    ??task_music_auto_next_2
    561                  }
    562              } else {
    563                  t_msc.file_prev_next = 0;                       //清除方向
    564                  t_msc.file_change = 1;
   \                     ??task_music_auto_next_0:
   \   00003A   54FB         ANL     A,#0xfb
   \   00003C   4402         ORL     A,#0x2
   \   00003E   F0           MOVX    @DPTR,A
    565                  if (sys_ctl.mode_play != ITEM_LOOP_SINGLE) {
   \   00003F   90....       MOV     DPTR,#(sys_ctl + 4)
   \   000042   E0           MOVX    A,@DPTR
   \   000043   6401         XRL     A,#0x1
   \   000045   70EC         JNZ     ??task_music_auto_next_1
    566                      task_music_next();
    567                  }
    568              }
    569          }
   \                     ??task_music_auto_next_3:
   \   000047   7F08         MOV     R7,#0x8
   \   000049   02....       LJMP    ?BANKED_LEAVE_SP
    570          
    571          //计算显示的时间
    572          #pragma location="TASK_MUSIC_SEG"

   \                                 In segment TASK_MUSIC_SEG, align 1, keep-with-next
    573          void task_music_cal_time(void)
   \                     task_music_cal_time:
    574          {
   \   000000   740C         MOV     A,#0xc
   \   000002   12....       LCALL   ?FUNC_ENTER_SP
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
    575              u32 cur_sec = music_get_mtime() / 10;           //当前播放时间，精确到0.1s
   \   000005                ; Setup parameters for call to function music_get_mtime
   \   000005   12....       LCALL   music_get_mtime & 0xFFFF
   \   000008   8A..         MOV     ?V0 + 4,R2
   \   00000A   8B..         MOV     ?V0 + 5,R3
   \   00000C   8C..         MOV     ?V0 + 6,R4
   \   00000E   8D..         MOV     ?V0 + 7,R5
   \   000010   90....       MOV     DPTR,#__Constant_a
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?L_MOV_C
   \   000018   78..         MOV     R0,#?V0 + 4
   \   00001A   79..         MOV     R1,#?V0 + 0
   \   00001C   12....       LCALL   ?UL_DIV_MOD
    576          
    577              t_msc.cur_time.min = cur_sec / 60;
   \   00001F   85....       MOV     ?V0 + 0,?V0 + 4
   \   000022   85....       MOV     ?V0 + 1,?V0 + 5
   \   000025   85....       MOV     ?V0 + 2,?V0 + 6
   \   000028   85....       MOV     ?V0 + 3,?V0 + 7
   \   00002B   90....       MOV     DPTR,#__Constant_3c
   \   00002E   78..         MOV     R0,#?V0 + 8
   \   000030   12....       LCALL   ?L_MOV_C
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   79..         MOV     R1,#?V0 + 8
   \   000037   12....       LCALL   ?UL_DIV_MOD
   \   00003A   E5..         MOV     A,?V0 + 0
   \   00003C   90....       MOV     DPTR,#(t_msc + 11)
   \   00003F   F0           MOVX    @DPTR,A
    578              t_msc.cur_time.sec = cur_sec % 60;
   \   000040   90....       MOV     DPTR,#__Constant_3c
   \   000043   78..         MOV     R0,#?V0 + 0
   \   000045   12....       LCALL   ?L_MOV_C
   \   000048   78..         MOV     R0,#?V0 + 4
   \   00004A   79..         MOV     R1,#?V0 + 0
   \   00004C   12....       LCALL   ?UL_DIV_MOD
   \   00004F   E5..         MOV     A,?V0 + 0
   \   000051   90....       MOV     DPTR,#(t_msc + 12)
   \   000054   F0           MOVX    @DPTR,A
    579          
    580          #if AB_REPEAT_EN
    581              u32 a_time = (music_point_a_mtime() + 5) / 10;
    582              t_msc.rtime = ((cur_sec > a_time) ? (cur_sec - a_time) : 0);
    583          #endif
    584          }
   \   000055   7F0C         MOV     R7,#0xc
   \   000057   02....       LJMP    ?BANKED_LEAVE_SP
    585          
    586          //音乐任务的一些信息初始化
    587          #pragma location="TASK_MUSIC_SEG_1"

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
    588          void task_music_play_init(void)
   \                     task_music_play_init:
    589          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    590              t_msc.pause = 0;                        //清除暂停状态
   \   000000   90....       MOV     DPTR,#(t_msc + 10)
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C2E0         CLR     0xE0 /* A   */.0
   \   000006   F0           MOVX    @DPTR,A
    591              t_msc.speed = 0;                        //设置播放速度
   \   000007   E4           CLR     A
   \   000008   90....       MOV     DPTR,#(t_msc + 9)
   \   00000B   F0           MOVX    @DPTR,A
    592          /*
    593          #if AB_REPEAT_EN
    594              t_msc.auto_repeat_start = 0;
    595              umsc_sound_detect(t_msc.auto_repeat);
    596          #endif*/
    597              //sound_set_flag(0, 0);
    598          
    599              music_set_speed(0);
   \   00000C                ; Setup parameters for call to function music_set_speed
   \   00000C   F9           MOV     R1,A
   \   00000D   90....       MOV     DPTR,#(music_set_speed & 0xffff)
   \   000010   74..         MOV     A,#((music_set_speed >> 16) & 0xff)
   \   000012   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    600          
    601              t_msc.play_sta = PLAYER_NORMAL;         //正常播放状态
   \   000015   E4           CLR     A
   \   000016   90....       MOV     DPTR,#t_msc
   \   000019   F0           MOVX    @DPTR,A
    602          }
   \   00001A   02....       LJMP    ?BRET
    603          
    604          //用于在播放歌曲时插入语音菜单的播放，播放完语音菜单后继续播放原来的歌曲

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    605          void mp3res_play_musicmode(u8 music_name)
   \                     mp3res_play_musicmode:
    606          {
   \   000000   EE           MOV     A,R6
   \   000001   C0E0         PUSH    A
   \   000003                ; Saved register size: 1
   \   000003                ; Auto size: 8
   \   000003   7408         MOV     A,#0x8
   \   000005   12....       LCALL   ?ALLOC_EXT_STACK8
   \   000008   E9           MOV     A,R1
   \   000009   FE           MOV     R6,A
    607              type_music_point pt;
    608              music_get_point(&pt);                       //设置返回播放点
   \   00000A                ; Setup parameters for call to function music_get_point
   \   00000A   7582F7       MOV     DPL,#-0x9
   \   00000D   7583FF       MOV     DPH,#-0x1
   \   000010   12....       LCALL   ?EXT_STACK_DISP0_16
   \   000013   AA82         MOV     R2,DPL
   \   000015   AB83         MOV     R3,DPH
   \   000017   90....       MOV     DPTR,#(music_get_point & 0xffff)
   \   00001A   74..         MOV     A,#((music_get_point >> 16) & 0xff)
   \   00001C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    609              music_stop();                               //停止当彰音乐播放
   \   00001F                ; Setup parameters for call to function music_stop
   \   00001F   90....       MOV     DPTR,#(music_stop & 0xffff)
   \   000022   74..         MOV     A,#((music_stop >> 16) & 0xff)
   \   000024   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    610          
    611              mp3_res_play_wait(music_name);              //播放提示音
   \   000027                ; Setup parameters for call to function mp3_res_play_wait
   \   000027   EE           MOV     A,R6
   \   000028   F9           MOV     R1,A
   \   000029   90....       MOV     DPTR,#(mp3_res_play_wait & 0xffff)
   \   00002C   74..         MOV     A,#((mp3_res_play_wait >> 16) & 0xff)
   \   00002E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    612          
    613              music_init();
   \   000031                ; Setup parameters for call to function music_init
   \   000031   90....       MOV     DPTR,#(music_init & 0xffff)
   \   000034   74..         MOV     A,#((music_init >> 16) & 0xff)
   \   000036   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    614          #if MUSIC_LRC_EN
    615              if (t_msc.lrc_flag) {
    616                  t_msc.lrc_type = lrc_init();            //再次初始化歌词
    617              }
    618          #endif
    619              task_music_play_init();
   \   000039                ; Setup parameters for call to function task_music_play_init
   \   000039   90....       MOV     DPTR,#(task_music_play_init & 0xffff)
   \   00003C   74..         MOV     A,#((task_music_play_init >> 16) & 0xff)
   \   00003E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    620              music_jump(&pt);                            //恢复播放
   \   000041                ; Setup parameters for call to function music_jump
   \   000041   7582F7       MOV     DPL,#-0x9
   \   000044   7583FF       MOV     DPH,#-0x1
   \   000047   12....       LCALL   ?EXT_STACK_DISP0_16
   \   00004A   AA82         MOV     R2,DPL
   \   00004C   AB83         MOV     R3,DPH
   \   00004E   90....       MOV     DPTR,#(music_jump & 0xffff)
   \   000051   74..         MOV     A,#((music_jump >> 16) & 0xff)
   \   000053   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    621              music_play();
   \   000056                ; Setup parameters for call to function music_play
   \   000056   90....       MOV     DPTR,#(music_play & 0xffff)
   \   000059   74..         MOV     A,#((music_play >> 16) & 0xff)
   \   00005B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    622          }
   \   00005E   74F8         MOV     A,#-0x8
   \   000060   12....       LCALL   ?DEALLOC_EXT_STACK8
   \   000063   D0E0         POP     A
   \   000065   FE           MOV     R6,A
   \   000066   02....       LJMP    ?BRET
    623          
    624          #pragma location="TASK_MUSIC_SEG_1"

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
    625          void task_music_new(void)
   \                     task_music_new:
    626          {
   \   000000   EE           MOV     A,R6
   \   000001   C0E0         PUSH    A
   \   000003   EF           MOV     A,R7
   \   000004   C0E0         PUSH    A
   \   000006                ; Saved register size: 2
   \   000006                ; Auto size: 0
    627              u16 err_cnt = 0;
   \   000006   7E00         MOV     R6,#0x0
   \   000008   7F00         MOV     R7,#0x0
    628          
    629              led_music_play();
   \   00000A                ; Setup parameters for call to function led_music_play
   \   00000A   90....       MOV     DPTR,#(led_music_play & 0xffff)
   \   00000D   74..         MOV     A,#((led_music_play >> 16) & 0xff)
   \                     ??task_music_new_0:
   \   00000F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000012   802E         SJMP    ??task_music_new_1
    630          
    631              while (device_is_actived(fs_cur_dev()) && t_msc.file_change) {
    632                  DBG_TASK_MUSIC("music_stop\n");
    633                  music_stop();                               //停止播放器
    634                  t_msc.file_change = 0;
    635          #if BT_SPP_MSC_EN
    636                  spp_tx_msc_num(t_msc.music_num);            //切歌，通知SPP曲目变化
    637          #endif
    638                  //播放指定歌曲
    639                  if (task_music_init(t_msc.music_num)) {
    640                      task_music_play_init();
   \                     ??task_music_new_2:
   \   000014                ; Setup parameters for call to function task_music_play_init
   \   000014   90....       MOV     DPTR,#(task_music_play_init & 0xffff)
   \   000017   74..         MOV     A,#((task_music_play_init >> 16) & 0xff)
   \   000019   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    641          #if AB_REPEAT_EN
    642                      t_msc.auto_repeat = 0;                  //清除自动领读功能
    643          #endif
    644          #if BREAK_POINT_EN
    645                      if(!t_msc.music_voice_flag) {           //放在music_play前，防止wav断点记忆时先播放一小段开头再跳到记忆点播放
   \   00001C   90....       MOV     DPTR,#(t_msc + 10)
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   A2E5         MOV     C,0xE0 /* A   */.5
   \   000022   4008         JC      ??task_music_new_3
    646                          task_music_break_init();
   \   000024                ; Setup parameters for call to function task_music_break_init
   \   000024   90....       MOV     DPTR,#(task_music_break_init & 0xffff)
   \   000027   74..         MOV     A,#((task_music_break_init >> 16) & 0xff)
   \   000029   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    647                      }
    648                      task_music_save_num();
   \                     ??task_music_new_3:
   \   00002C                ; Setup parameters for call to function task_music_save_num
   \   00002C   90....       MOV     DPTR,#(task_music_save_num & 0xffff)
   \   00002F   74..         MOV     A,#((task_music_save_num >> 16) & 0xff)
   \   000031   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    649          #endif
    650                      //task_music_clear_a();                   //清除A点
    651                      music_play();
   \   000034                ; Setup parameters for call to function music_play
   \   000034   90....       MOV     DPTR,#(music_play & 0xffff)
   \   000037   74..         MOV     A,#((music_play >> 16) & 0xff)
   \   000039   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    652                      //delay_5ms(5);                           //延时一小段时间，试解几帧，计算出相应信息
    653                      t_msc.disp_music_time.sec = 0xff;       //暂不显示总时间
   \   00003C   74FF         MOV     A,#-0x1
   \   00003E   90....       MOV     DPTR,#(t_msc + 16)
   \   000041   F0           MOVX    @DPTR,A
    654                  } else {
   \                     ??task_music_new_1:
   \   000042                ; Setup parameters for call to function device_is_actived
   \   000042                ; Setup parameters for call to function fs_cur_dev
   \   000042   12....       LCALL   fs_cur_dev & 0xFFFF
   \   000045   12....       LCALL   device_is_actived & 0xFFFF
   \   000048   505D         JNC     ??task_music_new_4
   \   00004A   90....       MOV     DPTR,#(t_msc + 10)
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   A2E1         MOV     C,0xE0 /* A   */.1
   \   000050   5055         JNC     ??task_music_new_4
   \   000052                ; Setup parameters for call to function music_stop
   \   000052   90....       MOV     DPTR,#(music_stop & 0xffff)
   \   000055   74..         MOV     A,#((music_stop >> 16) & 0xff)
   \   000057   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00005A   90....       MOV     DPTR,#(t_msc + 10)
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   C2E1         CLR     0xE0 /* A   */.1
   \   000060   F0           MOVX    @DPTR,A
   \   000061                ; Setup parameters for call to function task_music_init
   \   000061   90....       MOV     DPTR,#(t_msc + 1)
   \   000064   E0           MOVX    A,@DPTR
   \   000065   FA           MOV     R2,A
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   FB           MOV     R3,A
   \   000069   90....       MOV     DPTR,#(task_music_init & 0xffff)
   \   00006C   74..         MOV     A,#((task_music_init >> 16) & 0xff)
   \   00006E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000071   40A1         JC      ??task_music_new_2
    655                      if (!fs_is_mounted() || ++err_cnt >= t_msc.music_total) {    //所有的音乐文件都无法播放
   \   000073                ; Setup parameters for call to function fs_is_mounted
   \   000073   12....       LCALL   fs_is_mounted & 0xFFFF
   \   000076   5012         JNC     ??task_music_new_5
   \   000078   EE           MOV     A,R6
   \   000079   2401         ADD     A,#0x1
   \   00007B   0E           INC     R6
   \   00007C   EF           MOV     A,R7
   \   00007D   3400         ADDC    A,#0x0
   \   00007F   FF           MOV     R7,A
   \   000080   12....       LCALL   ?Subroutine16
   \                     ??CrossCallReturnLabel_43:
   \   000083   C3           CLR     C
   \   000084   EE           MOV     A,R6
   \   000085   98           SUBB    A,R0
   \   000086   EF           MOV     A,R7
   \   000087   99           SUBB    A,R1
   \   000088   403B         JC      ??task_music_new_6
    656          #if K_MODE_CHANGE_DEVICE
    657                          if(is_other_device() && !t_msc.mode_flag) {
   \                     ??task_music_new_5:
   \   00008A                ; Setup parameters for call to function is_other_device
   \   00008A   90....       MOV     DPTR,#(is_other_device & 0xffff)
   \   00008D   74..         MOV     A,#((is_other_device >> 16) & 0xff)
   \   00008F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000092   501C         JNC     ??task_music_new_7
   \   000094   90....       MOV     DPTR,#(t_msc + 10)
   \   000097   E0           MOVX    A,@DPTR
   \   000098   A2E4         MOV     C,0xE0 /* A   */.4
   \   00009A   4014         JC      ??task_music_new_7
    658                              t_msc.mode_flag = 1;
   \   00009C   D2E4         SETB    0xE0 /* A   */.4
   \   00009E   F0           MOVX    @DPTR,A
    659                              task_music_auto_next_device();
   \   00009F                ; Setup parameters for call to function task_music_auto_next_device
   \   00009F   90....       MOV     DPTR,#(task_music_auto_next_device & 0xffff)
   \   0000A2   74..         MOV     A,#((task_music_auto_next_device >> 16) & 0xff)
   \                     ??task_music_new_8:
   \   0000A4   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    660                          } else
    661          #endif
    662                          {
    663                              task_ctl.work_sta = TASK_EXIT;      //连续错误文件过多，退出目录播放
    664                              msgbox(STR_FILE_ERROR, NULL, MSGBOX_TIME);
    665                          }
    666                          break;
    667                      }
    668          
    669                      if (t_msc.file_prev_next) {             //初始化失败，重新读取下一个文件
    670                          task_music_prev();
    671                      } else {
    672                          task_music_next();
    673                      }
    674                  }
    675              }
    676          }
   \                     ??task_music_new_4:
   \   0000A7   D0E0         POP     A
   \   0000A9   FF           MOV     R7,A
   \   0000AA   D0E0         POP     A
   \   0000AC   FE           MOV     R6,A
   \   0000AD   02....       LJMP    ?BRET
   \                     ??task_music_new_7:
   \   0000B0   741B         MOV     A,#0x1b
   \   0000B2   90....       MOV     DPTR,#task_ctl
   \   0000B5   F0           MOVX    @DPTR,A
   \   0000B6                ; Setup parameters for call to function msgbox
   \   0000B6   7C05         MOV     R4,#0x5
   \   0000B8   7900         MOV     R1,#0x0
   \   0000BA   7A5B         MOV     R2,#0x5b
   \   0000BC   7B00         MOV     R3,#0x0
   \   0000BE   90....       MOV     DPTR,#(msgbox & 0xffff)
   \   0000C1   74..         MOV     A,#((msgbox >> 16) & 0xff)
   \   0000C3   80DF         SJMP    ??task_music_new_8
   \                     ??task_music_new_6:
   \   0000C5   90....       MOV     DPTR,#(t_msc + 10)
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   A2E2         MOV     C,0xE0 /* A   */.2
   \   0000CB   5008         JNC     ??task_music_new_9
   \   0000CD                ; Setup parameters for call to function task_music_prev
   \   0000CD   90....       MOV     DPTR,#(task_music_prev & 0xffff)
   \   0000D0   74..         MOV     A,#((task_music_prev >> 16) & 0xff)
   \   0000D2   02....       LJMP    ??task_music_new_0
   \                     ??task_music_new_9:
   \   0000D5                ; Setup parameters for call to function task_music_next
   \   0000D5   90....       MOV     DPTR,#(task_music_next & 0xffff)
   \   0000D8   74..         MOV     A,#((task_music_next >> 16) & 0xff)
   \   0000DA   02....       LJMP    ??task_music_new_0
    677          
    678          //音乐任务事务处理
    679          #pragma location="TASK_MUSIC_SEG"

   \                                 In segment TASK_MUSIC_SEG, align 1, keep-with-next
    680          void task_music_event(void)
   \                     task_music_event:
    681          {
   \   000000   7408         MOV     A,#0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_SP
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    682              task_music_comm_event();                        //调用公共事件
   \   000005                ; Setup parameters for call to function comm_event
   \   000005   90....       MOV     DPTR,#(comm_event & 0xffff)
   \   000008   74..         MOV     A,#((comm_event >> 16) & 0xff)
   \   00000A   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00000D                ; Setup parameters for call to function music_event
   \   00000D   90....       MOV     DPTR,#(music_event & 0xffff)
   \   000010   74..         MOV     A,#((music_event >> 16) & 0xff)
   \   000012   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    683              if(sys_ctl.vol_maxmin_music_play){  //处于播放音量调节提示音状态
   \   000015   90....       MOV     DPTR,#(sys_ctl + 44)
   \   000018   E0           MOVX    A,@DPTR
   \   000019   6003         JZ      $+5
   \   00001B   02....       LJMP    ??task_music_event_0 & 0xFFFF
    684                  return;
    685              }
    686              //检查设备状态
    687              if (!device_is_actived(fs_cur_dev())) {
   \   00001E                ; Setup parameters for call to function device_is_actived
   \   00001E                ; Setup parameters for call to function fs_cur_dev
   \   00001E   12....       LCALL   fs_cur_dev & 0xFFFF
   \   000021   12....       LCALL   device_is_actived & 0xFFFF
   \   000024   400E         JC      ??task_music_event_1
    688                  music_stop();                           //停止当前音乐
   \   000026                ; Setup parameters for call to function music_stop
   \   000026   90....       MOV     DPTR,#(music_stop & 0xffff)
   \   000029   74..         MOV     A,#((music_stop >> 16) & 0xff)
   \   00002B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    689                  task_ctl.dev_change = 1;                //当前设备无效，设备发生变动
   \   00002E   7401         MOV     A,#0x1
   \   000030   90....       MOV     DPTR,#(task_ctl + 3)
   \   000033   F0           MOVX    @DPTR,A
    690              }
    691          
    692              if (device_need_activate(DEVICE_SDMMC) || device_need_activate(DEVICE_UDISK)) {
   \                     ??task_music_event_1:
   \   000034                ; Setup parameters for call to function device_need_activate
   \   000034   7900         MOV     R1,#0x0
   \   000036   12....       LCALL   device_need_activate & 0xFFFF
   \   000039   4007         JC      ??task_music_event_2
   \   00003B                ; Setup parameters for call to function device_need_activate
   \   00003B   7901         MOV     R1,#0x1
   \   00003D   12....       LCALL   device_need_activate & 0xFFFF
   \   000040   5013         JNC     ??task_music_event_3
    693                  music_stop();       //播放当前设备时插入另一设备，立即停止当前音乐
   \                     ??task_music_event_2:
   \   000042                ; Setup parameters for call to function music_stop
   \   000042   90....       MOV     DPTR,#(music_stop & 0xffff)
   \   000045   74..         MOV     A,#((music_stop >> 16) & 0xff)
   \   000047   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    694                  task_ctl.dev_change = 1;
   \   00004A   7401         MOV     A,#0x1
   \   00004C   90....       MOV     DPTR,#(task_ctl + 3)
   \   00004F   12....       LCALL   ?Subroutine4
    695                  t_msc.file_change = 1;
    696          #if BREAK_POINT_EN
    697                  t_msc.break_flag = 1;
   \                     ??CrossCallReturnLabel_10:
   \   000052   4442         ORL     A,#0x42
   \   000054   F0           MOVX    @DPTR,A
    698          #endif
    699              }
    700          
    701              if (device_change()) {
   \                     ??task_music_event_3:
   \   000055                ; Setup parameters for call to function device_change
   \   000055   12....       LCALL   device_change & 0xFFFF
   \   000058   502F         JNC     ??task_music_event_4
    702                  if (!music_remount_device()) {
   \   00005A                ; Setup parameters for call to function music_remount_device
   \   00005A   90....       MOV     DPTR,#(music_remount_device & 0xffff)
   \   00005D   74..         MOV     A,#((music_remount_device >> 16) & 0xff)
   \   00005F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000062   4013         JC      ??task_music_event_5
    703                      if (!music_next_device()) {
   \   000064                ; Setup parameters for call to function music_next_device
   \   000064   90....       MOV     DPTR,#(music_next_device & 0xffff)
   \   000067   74..         MOV     A,#((music_next_device >> 16) & 0xff)
   \   000069   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00006C   4009         JC      ??task_music_event_5
    704                          task_ctl.work_sta = TASK_AUX;  //设备无效，退出
   \   00006E   7402         MOV     A,#0x2
   \   000070   90....       MOV     DPTR,#task_ctl
   \   000073   F0           MOVX    @DPTR,A
    705                          return;
   \   000074   02....       LJMP    ??task_music_event_0 & 0xFFFF
    706                      }
    707                  }
    708                  task_music_get_num();
   \                     ??task_music_event_5:
   \   000077                ; Setup parameters for call to function task_music_get_num
   \   000077   90....       MOV     DPTR,#(task_music_get_num & 0xffff)
   \   00007A   74..         MOV     A,#((task_music_get_num >> 16) & 0xff)
   \   00007C   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    709                  t_msc.file_change = 1;                  //需要打开一个新文件
    710          #if BREAK_POINT_EN
    711                  t_msc.break_flag = 1;
    712          #endif
    713          #if K_MODE_CHANGE_DEVICE
    714                  t_msc.mode_flag = 0;
   \   00007F   90....       MOV     DPTR,#(t_msc + 10)
   \   000082   E0           MOVX    A,@DPTR
   \   000083   C2E4         CLR     0xE0 /* A   */.4
   \   000085   F0           MOVX    @DPTR,A
   \   000086   4442         ORL     A,#0x42
   \   000088   F0           MOVX    @DPTR,A
    715          #endif
    716              }
    717          
    718          #if MUSIC_LRC_EN
    719              //获取歌词
    720              if (t_msc.lrc_flag == LRC_FILENAME_TIME) {
    721                  if(music_get_lrc(music_get_mtime() + 3))  //歌词故意提前300ms显示
    722                  {
    723                      t_msc.lrc_change = 1;
    724                  }
    725              }
    726          #endif
    727          
    728              //打开新文件
    729              if (t_msc.file_change) {
   \                     ??task_music_event_4:
   \   000089   90....       MOV     DPTR,#(t_msc + 10)
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   A2E1         MOV     C,0xE0 /* A   */.1
   \   00008F   5039         JNC     ??task_music_event_6
    730                  //set_sys_clk(SYS_24M);
    731                  if(sys_ctl.mp3_stop_flag)
   \   000091   90....       MOV     DPTR,#(sys_ctl + 56)
   \   000094   E0           MOVX    A,@DPTR
   \   000095   6002         JZ      ??task_music_event_7
    732                      sys_ctl.mp3_stop_flag = 0;
   \   000097   E4           CLR     A
   \   000098   F0           MOVX    @DPTR,A
    733                  task_music_new();
   \                     ??task_music_event_7:
   \   000099                ; Setup parameters for call to function task_music_new
   \   000099   90....       MOV     DPTR,#(task_music_new & 0xffff)
   \   00009C   74..         MOV     A,#((task_music_new >> 16) & 0xff)
   \   00009E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    734                  t_msc.disp_flag = 1;
   \   0000A1   90....       MOV     DPTR,#(t_msc + 21)
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   D2E0         SETB    0xE0 /* A   */.0
   \   0000A7   12....       LCALL   ?Subroutine1
    735                  sys_ctl.sleep_cnt = 0xffff;
    736          #if PLAY_DEVICE_SAVE_EN
    737                  sys_param_write8(PARAM_PLAY_DEVICE,fs_cur_dev());
    738          #endif
    739          #if AB_REPEAT_EN
    740                  t_msc.repeat_flag = 0;
    741                  task_music_set_a();
    742          #endif
    743          #if (IS_LCDSEG_DISPLAY || IS_LEDSEG_DISPLAY)
    744                  if(!sys_ctl.file_change_flag)show_num(t_msc.music_num);         //LCD段码屏及LED屏显示歌曲序号        
   \                     ??CrossCallReturnLabel_3:
   \   0000AA   90....       MOV     DPTR,#(sys_ctl + 62)
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   7010         JNZ     ??task_music_event_8
   \   0000B0                ; Setup parameters for call to function ledseg_ocx_show_num
   \   0000B0   90....       MOV     DPTR,#(t_msc + 1)
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   FA           MOV     R2,A
   \   0000B5   A3           INC     DPTR
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   FB           MOV     R3,A
   \   0000B8   90....       MOV     DPTR,#(ledseg_ocx_show_num & 0xffff)
   \   0000BB   74..         MOV     A,#((ledseg_ocx_show_num >> 16) & 0xff)
   \   0000BD   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    745          #endif
    746          #if NPCP215X
    747                  AudioCodec_MUTE(UNMUTE);
   \                     ??task_music_event_8:
   \   0000C0                ; Setup parameters for call to function AudioCodec_MUTE
   \   0000C0   7900         MOV     R1,#0x0
   \   0000C2   90....       MOV     DPTR,#(AudioCodec_MUTE & 0xffff)
   \   0000C5   74..         MOV     A,#((AudioCodec_MUTE >> 16) & 0xff)
   \   0000C7   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    748          #endif
    749              }
    750              //计算当前显示的时间
    751              task_music_cal_time();
   \                     ??task_music_event_6:
   \   0000CA                ; Setup parameters for call to function task_music_cal_time
   \   0000CA   90....       MOV     DPTR,#(task_music_cal_time & 0xffff)
   \   0000CD   74..         MOV     A,#((task_music_cal_time >> 16) & 0xff)
   \   0000CF   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    752          
    753              if (t_msc.disp_music_time.sec == 0xff) {
   \   0000D2   90....       MOV     DPTR,#(t_msc + 16)
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   64FF         XRL     A,#0xff
   \   0000D8   7041         JNZ     ??task_music_event_9
    754                  u16 all_time = music_get_alltime();
   \   0000DA                ; Setup parameters for call to function music_get_alltime
   \   0000DA   90....       MOV     DPTR,#(music_get_alltime & 0xffff)
   \   0000DD   74..         MOV     A,#((music_get_alltime >> 16) & 0xff)
   \   0000DF   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   0000E2   8A..         MOV     ?V0 + 0,R2
   \   0000E4   8B..         MOV     ?V0 + 1,R3
   \   0000E6   AC..         MOV     R4,?V0 + 0
   \   0000E8   AD..         MOV     R5,?V0 + 1
    755                  //printf("t:%d\n",all_time);
    756                  if (all_time != 0xffff) {
   \   0000EA   74FF         MOV     A,#-0x1
   \   0000EC   6C           XRL     A,R4
   \   0000ED   7003         JNZ     ??task_music_event_10
   \   0000EF   74FF         MOV     A,#-0x1
   \   0000F1   6D           XRL     A,R5
   \                     ??task_music_event_10:
   \   0000F2   6027         JZ      ??task_music_event_9
    757                      t_msc.disp_music_time.min = all_time / 60;      //总时间
   \   0000F4   EC           MOV     A,R4
   \   0000F5   F8           MOV     R0,A
   \   0000F6   ED           MOV     A,R5
   \   0000F7   F9           MOV     R1,A
   \   0000F8   7A3C         MOV     R2,#0x3c
   \   0000FA   7B00         MOV     R3,#0x0
   \   0000FC   12....       LCALL   ?US_DIV_MOD
   \   0000FF   E8           MOV     A,R0
   \   000100   90....       MOV     DPTR,#(t_msc + 15)
   \   000103   F0           MOVX    @DPTR,A
    758                      t_msc.disp_music_time.sec = all_time % 60;
   \   000104   EC           MOV     A,R4
   \   000105   F8           MOV     R0,A
   \   000106   ED           MOV     A,R5
   \   000107   F9           MOV     R1,A
   \   000108   7A3C         MOV     R2,#0x3c
   \   00010A   7B00         MOV     R3,#0x0
   \   00010C   12....       LCALL   ?US_DIV_MOD
   \   00010F   EA           MOV     A,R2
   \   000110   90....       MOV     DPTR,#(t_msc + 16)
   \   000113   F0           MOVX    @DPTR,A
    759                      t_msc.disp_status_flag = 1;                     //更新状态显示
   \   000114   90....       MOV     DPTR,#(t_msc + 21)
   \   000117   E0           MOVX    A,@DPTR
   \   000118   D2E3         SETB    0xE0 /* A   */.3
   \   00011A   F0           MOVX    @DPTR,A
    760                  }
    761              }
    762          
    763              //判断音乐的播放状诚
    764              if ((music_get_status() <= STATUS_PLAY_STOPPING)&&(!sys_ctl.mp3_stop_flag)) {
   \                     ??task_music_event_9:
   \   00011B                ; Setup parameters for call to function music_get_status
   \   00011B   12....       LCALL   music_get_status & 0xFFFF
   \   00011E   C3           CLR     C
   \   00011F   EA           MOV     A,R2
   \   000120   9402         SUBB    A,#0x2
   \   000122   EB           MOV     A,R3
   \   000123   9400         SUBB    A,#0x0
   \   000125   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000127   65D0         XRL     A,PSW
   \   000129   33           RLC     A
   \   00012A   5048         JNC     ??task_music_event_11
   \   00012C   90....       MOV     DPTR,#(sys_ctl + 56)
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   7042         JNZ     ??task_music_event_11
    765              //if (music_get_status() <= STATUS_PLAY_STOPPING){
    766          #if BREAK_POINT_EN
    767                  if(t_msc.break_flag) {
   \   000132   90....       MOV     DPTR,#(t_msc + 10)
   \   000135   E0           MOVX    A,@DPTR
   \   000136   A2E6         MOV     C,0xE0 /* A   */.6
   \   000138   500C         JNC     ??CrossCallReturnLabel_5
    768                      t_msc.break_flag = 0;
   \   00013A   C2E6         CLR     0xE0 /* A   */.6
   \   00013C   F0           MOVX    @DPTR,A
    769                      t_msc.music_num = 0;
   \   00013D   90....       MOV     DPTR,#(t_msc + 1)
   \   000140   E4           CLR     A
   \   000141   F0           MOVX    @DPTR,A
   \   000142   A3           INC     DPTR
   \   000143   12....       LCALL   ?Subroutine2
    770                      t_msc.file_change = 1;
    771                  }
    772                  task_music_break_clr();
   \                     ??CrossCallReturnLabel_5:
   \   000146                ; Setup parameters for call to function task_music_break_clr
   \   000146   90....       MOV     DPTR,#(task_music_break_clr & 0xffff)
   \   000149   74..         MOV     A,#((task_music_break_clr >> 16) & 0xff)
   \   00014B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    773          #endif
    774                  if(sys_ctl.mode_play == ITEM_LOOP_NORMAL)
   \   00014E   90....       MOV     DPTR,#(sys_ctl + 4)
   \   000151   E0           MOVX    A,@DPTR
   \   000152   6403         XRL     A,#0x3
   \   000154   7016         JNZ     ??task_music_event_12
    775                  {
    776                      if(t_msc.music_num >= t_msc.music_total)
   \   000156   90....       MOV     DPTR,#(t_msc + 3)
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   F8           MOV     R0,A
   \   00015B   A3           INC     DPTR
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   F9           MOV     R1,A
   \   00015E   7583..       MOV     DPH,#(((t_msc + 1) >> 8) & 0xff)
   \   000161   7582..       MOV     DPL,#((t_msc + 1) & 0xff)
   \   000164   C3           CLR     C
   \   000165   E0           MOVX    A,@DPTR
   \   000166   98           SUBB    A,R0
   \   000167   A3           INC     DPTR
   \   000168   E0           MOVX    A,@DPTR
   \   000169   99           SUBB    A,R1
   \   00016A   503B         JNC     ??task_music_event_0
    777                      {
    778                          return;
    779                      }
    780                  }
    781                  task_music_auto_next();                      //本曲播放完毕，播放下一曲
   \                     ??task_music_event_12:
   \   00016C                ; Setup parameters for call to function task_music_auto_next
   \   00016C   90....       MOV     DPTR,#(task_music_auto_next & 0xffff)
   \   00016F   74..         MOV     A,#((task_music_auto_next >> 16) & 0xff)
   \   000171   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    782              }
    783          #if BREAK_POINT_EN
    784              t_msc.break_flag = 0;
   \                     ??task_music_event_11:
   \   000174   90....       MOV     DPTR,#(t_msc + 10)
   \   000177   E0           MOVX    A,@DPTR
   \   000178   C2E6         CLR     0xE0 /* A   */.6
   \   00017A   F0           MOVX    @DPTR,A
    785          #endif
    786          
    787          #if AB_REPEAT_EN
    788              //复读状态控制
    789              switch (t_msc.play_sta) {
    790              case PLAYER_NORMAL:
    791                  /*if (t_msc.auto_repeat) {
    792                      task_music_autorepeat();
    793                      t_msc.disp_status_flag = 1;
    794                  }*/
    795                  break;
    796              case PLAYER_REPEAT:
    797                  if (music_get_repeat() == 0) {
    798                      t_msc.play_sta = PLAYER_NORMAL;
    799                      task_music_set_a();
    800                      t_msc.disp_status_flag = 1;             //更新状态显示
    801                  }
    802                  break;
    803              }
    804          #endif
    805              //浏览播放
    806              if(sys_ctl.mode_play == ITEM_LOOP_BROWSE) {
   \   00017B   90....       MOV     DPTR,#(sys_ctl + 4)
   \   00017E   E0           MOVX    A,@DPTR
   \   00017F   6405         XRL     A,#0x5
   \   000181   7024         JNZ     ??task_music_event_0
    807                  if(music_get_mtime() > 100) {
   \   000183                ; Setup parameters for call to function music_get_mtime
   \   000183   12....       LCALL   music_get_mtime & 0xFFFF
   \   000186   8A..         MOV     ?V0 + 0,R2
   \   000188   8B..         MOV     ?V0 + 1,R3
   \   00018A   8C..         MOV     ?V0 + 2,R4
   \   00018C   8D..         MOV     ?V0 + 3,R5
   \   00018E   90....       MOV     DPTR,#__Constant_65
   \   000191   78..         MOV     R0,#?V0 + 4
   \   000193   12....       LCALL   ?L_MOV_C
   \   000196   78..         MOV     R0,#?V0 + 4
   \   000198   79..         MOV     R1,#?V0 + 0
   \   00019A   12....       LCALL   ?UL_GT
   \   00019D   4008         JC      ??task_music_event_0
    808                      task_music_next();
   \   00019F                ; Setup parameters for call to function task_music_next
   \   00019F   90....       MOV     DPTR,#(task_music_next & 0xffff)
   \   0001A2   74..         MOV     A,#((task_music_next >> 16) & 0xff)
   \   0001A4   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \                     ??task_music_event_0:
   \   0001A7   7F08         MOV     R7,#0x8
   \   0001A9   02....       LJMP    ?BANKED_LEAVE_SP
    809                  }
    810              }
    811          
    812          #if MUSIC_AUTO_STANDBY_EN || IR_HARD_POWERDOWN_EN
    813              if((((!sys_ctl.sleep_cnt) && BT_IS_SLEEP) || sys_ctl.ir_power_flag) && !sys_ctl.lowpower_flag){
    814                  if (music_get_status() < STATUS_PLAY_PLAYING) {
    815                      task_hold();
    816                      put_msg(KU_PLAY);   //U盘或SD卡唤醒后直接播放
    817                  }
    818              }
    819          #endif
    820          
    821          #if WARNING_LOWPOWER
    822              if(sys_ctl.lowpower_warning_flag == 1){
    823                  sys_ctl.lowpower_warning_flag = 2;
    824                  mp3res_play_musicmode(RES_MP3_PLEASE_CHARGE);
    825              }
    826          #endif
    827          }
    828          
    829          #if AB_REPEAT_EN
    830          /*****************************************************************************
    831           * Module    : 音乐任务AB复读，追述的流程
    832           *****************************************************************************/
    833          //清除A点
    834          #pragma location="TASK_MUSIC_SEG_1"
    835          void task_music_clear_a(void)
    836          {
    837              memset(&t_msc.point.pa, 0, sizeof(t_msc.point.pa));
    838              music_set_a_point(&t_msc.point.pa);
    839          }
    840          
    841          //设置A点
    842          #pragma location="TASK_MUSIC_SEG_1"
    843          void task_music_set_a(void)
    844          {
    845              music_get_point(&t_msc.point.pa);
    846              music_set_a_point(&t_msc.point.pa);
    847              //printf("a fra:%08lx\n",t_msc.point.pa.frame);
    848              //printf("a pos:%08lx\n",t_msc.point.pa.pos);
    849          }
    850          
    851          //开始复读
    852          #pragma location="TASK_MUSIC_SEG_2"
    853          void task_music_repeat_start(u8 repeat_cnt)
    854          {
    855              DBG_TASK_MUSIC("repeat\n");
    856              music_get_point(&t_msc.point.pb);
    857              music_jump(&t_msc.point.pa);
    858              //printf("b fra:%08lx\n",t_msc.point.pb.frame);
    859              //printf("b pos:%08lx\n",t_msc.point.pb.pos);
    860              music_repeat(repeat_cnt, &t_msc.point);
    861              t_msc.play_sta = PLAYER_REPEAT;
    862          }
    863          
    864          //复读/播放
    865          #pragma location="TASK_MUSIC_SEG_2"
    866          void task_music_repeat_play(void)
    867          {
    868              if (t_msc.pause) {
    869                  return;
    870              }
    871              if (t_msc.play_sta == PLAYER_NORMAL) {
    872                  if (t_msc.auto_repeat) {
    873                      t_msc.auto_repeat = 0;
    874                      umsc_sound_detect(0);
    875                      task_music_set_a();                     //更新A点
    876                      return;
    877                  }
    878                  task_music_repeat_start(REPEAT_LOOP);
    879              } /*else {
    880                  DBG_TASK_MUSIC("play\n");
    881                  t_msc.auto_repeat = 0;                      //关闭自动复读
    882                  umsc_sound_detect(0);
    883                  music_jump(&t_msc.point.pb);
    884                  task_music_set_a();                         //更新A点
    885                  t_msc.play_sta = PLAYER_NORMAL;
    886              }*/
    887          }
    888          #endif
    889          
    890          //复读接口，加在解码过程中

   \                                 In segment NEAR_CODE, align 1, keep-with-next
    891          __near_func bool music_repeat_hook(void)
   \                     music_repeat_hook:
    892          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    893          #if AB_REPEAT_EN
    894              return music_repeat_hook2();
    895          #else
    896              return true;
   \   000000   D3           SETB    C
   \   000001   22           RET
    897          #endif
    898          }
    899          
    900          #if AB_REPEAT_EN
    901          //自动领读
    902          #pragma location="TASK_MUSIC_SEG_1"
    903          void task_music_msg_autorepeat(void)
    904          {
    905              if (t_msc.pause) {
    906                  return;
    907              }
    908              task_music_set_a();
    909              t_msc.auto_repeat = 1;
    910          #if MUSIC_LRC_EN
    911              if (t_msc.lrc_flag) {
    912                  t_msc.next_sentence = music_lrc_next_time();
    913              } else
    914          #endif
    915              {
    916                  umsc_sound_detect(1);                 //无歌词的话，采用静音检测
    917              }
    918              t_msc.next_sentence = music_lrc_next_time();
    919              //printf("next:%ld\n", t_msc.next_sentence);
    920              //sound_set_flag(0, 0);
    921              t_msc.disp_status_flag = 1;
    922          }
    923          #endif
    924          
    925          //数字点歌
    926          #pragma location="TASK_MUSIC_SEG_1"

   \                                 In segment TASK_MUSIC_SEG_1, align 1, keep-with-next
    927          void task_music_select_numsic(u8 num)
   \                     task_music_select_numsic:
    928          {
   \   000000   C0..         PUSH    ?V0 + 0
   \   000002   C0..         PUSH    ?V0 + 1
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    929              u16 f_index = numbox(num, NULL);
   \   000004                ; Setup parameters for call to function numbox
   \   000004   7A00         MOV     R2,#0x0
   \   000006   90....       MOV     DPTR,#(numbox & 0xffff)
   \   000009   74..         MOV     A,#((numbox >> 16) & 0xff)
   \   00000B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00000E   8A..         MOV     ?V0 + 0,R2
   \   000010   8B..         MOV     ?V0 + 1,R3
   \   000012   A8..         MOV     R0,?V0 + 0
   \   000014   A9..         MOV     R1,?V0 + 1
    930              if (f_index != 0 && f_index <= t_msc.music_total) {
   \   000016   E8           MOV     A,R0
   \   000017   7001         JNZ     ??task_music_select_numsic_0
   \   000019   E9           MOV     A,R1
   \                     ??task_music_select_numsic_0:
   \   00001A   601E         JZ      ??task_music_select_numsic_1
   \   00001C   12....       LCALL   ?Subroutine11
   \                     ??CrossCallReturnLabel_30:
   \   00001F   4019         JC      ??task_music_select_numsic_1
    931                  t_msc.music_num = f_index;                //打开播放音乐
   \   000021   90....       MOV     DPTR,#(t_msc + 1)
   \   000024   E8           MOV     A,R0
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   E9           MOV     A,R1
   \   000028   F0           MOVX    @DPTR,A
    932                  t_msc.file_change = 1;
    933                  t_msc.file_prev_next = 0;               //清除方向
   \   000029   90....       MOV     DPTR,#(t_msc + 10)
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   54FB         ANL     A,#0xfb
   \   00002F   4402         ORL     A,#0x2
   \   000031   F0           MOVX    @DPTR,A
    934          #if (IS_LCDSEG_DISPLAY || IS_LEDSEG_DISPLAY)
    935                  show_num(t_msc.music_num);         //LCD段码屏及LED屏显示歌曲序号
   \   000032                ; Setup parameters for call to function ledseg_ocx_show_num
   \   000032   90....       MOV     DPTR,#(ledseg_ocx_show_num & 0xffff)
   \   000035   74..         MOV     A,#((ledseg_ocx_show_num >> 16) & 0xff)
   \   000037   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    936          #endif
    937              }
    938          }
   \                     ??task_music_select_numsic_1:
   \   00003A   02....       LJMP    ??Subroutine23_0
    939          
    940          #if(WARNING_VOL_MAXMIN)
    941          type_music_point pt;
    942          #endif
    943          
    944          #if WARNING_VOL_MAXMIN
    945          #pragma location="TASK_MUSIC_SEG_1"
    946          void music_play_vol_music(void)
    947          {
    948              if(!sys_ctl.vol_maxmin_music_play){
    949                  sys_ctl.vol_maxmin_music_play = 1;
    950                  music_get_point(&pt);               //设置返回播放点
    951              }
    952              mp3_res_play_wait(RES_MP3_VOL_MAXMIN);
    953              flush_msg();
    954          }
    955          #endif
    956          
    957          /*****************************************************************************
    958           * Module    : 音乐任务的公共消息与事件
    959           *****************************************************************************/
    960          //音乐任务的公共事件
    961          #pragma location="TASK_MUSIC_SEG"

   \                                 In segment TASK_MUSIC_SEG, align 1, keep-with-next
    962          void task_music_comm_event(void)
   \                     task_music_comm_event:
    963          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    964              comm_event();                           //调用公共事件
   \   000000                ; Setup parameters for call to function comm_event
   \   000000   90....       MOV     DPTR,#(comm_event & 0xffff)
   \   000003   74..         MOV     A,#((comm_event >> 16) & 0xff)
   \   000005   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    965              music_event();                          //解码需要的事件
   \   000008                ; Setup parameters for call to function music_event
   \   000008   90....       MOV     DPTR,#(music_event & 0xffff)
   \   00000B   74..         MOV     A,#((music_event >> 16) & 0xff)
   \   00000D   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    966          }
   \   000010   02....       LJMP    ?BRET
    967          
    968          /*****************************************************************************
    969           * Module    : 音乐任务入口
    970           *****************************************************************************/
    971          //音乐播放任务
    972          #pragma constseg="TASK_MUSIC_SEG_CONST"

   \                                 In segment TASK_MUSIC_SEG_CONST, align 1
    973          IAR_CONST char str_show_taskmusic[] = "task_music\n";
   \                     str_show_taskmusic:
   \   000000   7461736B     DB "task_music\012"
   \            5F6D7573
   \            69630A00
    974          #pragma constseg=default
    975          
    976          #pragma location="TASK_MUSIC_SEG"

   \                                 In segment TASK_MUSIC_SEG, align 1, keep-with-next
    977          void task_music(void)
   \                     task_music:
    978          {
   \   000000   EE           MOV     A,R6
   \   000001   C0E0         PUSH    A
   \   000003                ; Saved register size: 1
   \   000003                ; Auto size: 0
    979              u8 msg;
    980              //printf(str_show_taskmusic);
    981              task_music_enter();
   \   000003                ; Setup parameters for call to function task_music_enter
   \   000003   90....       MOV     DPTR,#(task_music_enter & 0xffff)
   \   000006   74..         MOV     A,#((task_music_enter >> 16) & 0xff)
   \   000008   801F         SJMP    ??task_music_0
    982              DBG_TASK_MUSIC("Total: %d\n", t_msc.music_total);
    983              while (task_ctl.work_sta == TASK_MUSIC) {
    984          #if IS_LCD_DISPLAY
    985                  WATCHDOG_CLR();
    986                  task_music_event();
    987                  while(msg = get_msg()) {  // lcd显示耗时太大，先集中处理消息，处理完后再显示
    988                      task_music_deal_msg(msg);
    989                  }
    990                  task_music_display();
    991          #else
    992                  msg = get_msg();
   \                     ??task_music_1:
   \   00000A                ; Setup parameters for call to function get_msg
   \   00000A   12....       LCALL   get_msg & 0xFFFF
   \   00000D   E9           MOV     A,R1
   \   00000E   FE           MOV     R6,A
    993                  WATCHDOG_CLR();
   \   00000F   43F720       ORL     0xf7,#0x20
    994                  task_music_event();
   \   000012                ; Setup parameters for call to function task_music_event
   \   000012   90....       MOV     DPTR,#(task_music_event & 0xffff)
   \   000015   74..         MOV     A,#((task_music_event >> 16) & 0xff)
   \   000017   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    995                  task_music_deal_msg(msg);
   \   00001A                ; Setup parameters for call to function task_music_deal_msg
   \   00001A   EE           MOV     A,R6
   \   00001B   F9           MOV     R1,A
   \   00001C   90....       MOV     DPTR,#(task_music_deal_msg & 0xffff)
   \   00001F   74..         MOV     A,#((task_music_deal_msg >> 16) & 0xff)
   \   000021   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    996                  task_music_display();
   \   000024                ; Setup parameters for call to function task_music_display
   \   000024   90....       MOV     DPTR,#(task_music_display & 0xffff)
   \   000027   74..         MOV     A,#((task_music_display >> 16) & 0xff)
   \                     ??task_music_0:
   \   000029   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    997          
    998          #endif
    999              }
   \   00002C   90....       MOV     DPTR,#task_ctl
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6405         XRL     A,#0x5
   \   000032   60D6         JZ      ??task_music_1
   1000              task_music_exit();
   \   000034                ; Setup parameters for call to function task_music_exit
   \   000034   90....       MOV     DPTR,#(task_music_exit & 0xffff)
   \   000037   74..         MOV     A,#((task_music_exit >> 16) & 0xff)
   \   000039   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   1001          }
   \   00003C   02....       LJMP    ?Subroutine21

   \                                 In segment CODE_C, align 1
   \                     __Constant_a:
   \   000000   0A000000     DD 10

   \                                 In segment CODE_C, align 1
   \                     __Constant_8c9f:
   \   000000   9F8C0000     DD 35999

   \                                 In segment CODE_C, align 1
   \                     __Constant_3:
   \   000000   03000000     DD 3

   \                                 In segment CODE_C, align 1
   \                     __Constant_3c:
   \   000000   3C000000     DD 60

   \                                 In segment CODE_C, align 1
   \                     __Constant_65:
   \   000000   65000000     DD 101
   1002          #endif

   Maximum stack usage in bytes:

     Function                       EXT_STACK PSTACK XSTACK
     --------                       --------- ------ ------
     mp3res_play_musicmode                 9      0      0
       -> music_get_point                 18      0      0
       -> music_stop                      18      0      0
       -> mp3_res_play_wait               18      0      0
       -> music_init                      18      0      0
       -> task_music_play_init            18      0      0
       -> music_jump                      18      0      0
       -> music_play                      18      0      0
     music_file_num_set                    0      0      0
       -> task_music_next_dir              0      0      0
       -> task_music_prev_dir              0      0      0
     music_repeat_hook                     0      0      0
     task_music                            1      0      0
       -> task_music_enter                 2      0      0
       -> get_msg                          2      0      0
       -> task_music_event                 2      0      0
       -> task_music_deal_msg              2      0      0
       -> task_music_display               2      0      0
       -> task_music_exit                  2      0      0
     task_music_auto_next                 22      0      0
       -> music_get_mtime                 22      0      0
       -> task_music_prev                 22      0      0
       -> task_music_next                 22      0      0
     task_music_auto_next_device           2      0      0
       -> is_other_device                  0      0      0
       -> music_next_device                0      0      0
       -> music_next_device                0      0      0
     task_music_auto_prev_device           0      0      0
       -> is_other_device                  0      0      0
       -> music_next_device                0      0      0
       -> music_next_device                0      0      0
     task_music_break_clr                 22      0      0
       -> music_get_mtime                 22      0      0
       -> music_get_alltime               22      0      0
       -> irtcc_write_ram16               22      0      0
       -> irtcc_write_ram16               22      0      0
     task_music_break_init                 4      0      0
       -> task_music_break_read            4      0      0
       -> crc_calculate                    4      0      0
       -> music_jump                       4      0      0
       -> crc_calculate                    4      0      0
       -> fs_cur_dev                       4      0      0
       -> fs_cur_dev                       4      0      0
       -> irtcc_write_ram16                4      0      0
       -> irtcc_write_ram16                4      0      0
     task_music_break_read                 6      0      0
       -> fs_cur_dev                       8      0      0
       -> irtcc_read_ram32                 8      0      0
       -> irtcc_read_ram32                 8      0      0
       -> irtcc_read_ram16                 8      0      0
       -> irtcc_read_ram32                 8      0      0
       -> irtcc_read_ram32                 8      0      0
       -> irtcc_read_ram16                 8      0      0
     task_music_break_save                 5      0      0
       -> fs_cur_dev                       8      0      0
       -> irtcc_write_ram32                8      0      0
       -> irtcc_write_ram32                8      0      0
       -> irtcc_write_ram32                8      0      0
       -> irtcc_write_ram32                8      0      0
     task_music_cal_time                  26      0      0
       -> music_get_mtime                 30      0      0
     task_music_comm_event                 0      0      0
       -> comm_event                       0      0      0
       -> music_event                      0      0      0
     task_music_deal_msg                   2      0      0
       -> task_music_prev                  2      0      0
       -> task_music_next                  2      0      0
       -> AudioCodec_MUTE                  2      0      0
       -> music_start_pause                2      0      0
       -> led_music_play                   2      0      0
       -> led_idle                         2      0      0
       -> task_music_select_numsic         2      0      0
       -> music_next_device                2      0      0
       -> task_music_get_num               2      0      0
       -> spi_param_write8                 2      0      0
       -> ledseg_ocx_show_mode_play        2      0      0
       -> music_get_point                  2      0      0
       -> task_music_break_save            2      0      0
       -> AudioCodec_MUTE                  2      0      0
       -> deal_msg                         2      0      0
     task_music_device_autochange          0      0      0
       -> fs_cur_dev                       0      0      0
       -> device_is_actived                0      0      0
       -> fs_sel                           0      0      0
       -> task_music_device_remount        0      0      0
       -> fs_cur_dev                       0      0      0
       -> device_is_actived                0      0      0
       -> fs_sel                           0      0      0
       -> task_music_device_remount        0      0      0
     task_music_device_remount             2      0      0
       -> music_stop                       0      0      0
       -> fs_need_mounted                  0      0      0
       -> fs_init                          0      0      0
       -> fs_is_mounted                    0      0      0
       -> task_music_num_get               0      0      0
     task_music_device_select              5      0      0
       -> fs_cur_dev                      10      0      0
       -> listbox                          6      0      0
       -> draw_wait                        4      0      0
       -> fs_cur_dev                       4      0      0
       -> device_is_actived                4      0      0
       -> fs_sel                           4      0      0
       -> task_music_device_remount        4      0      0
       -> fs_cur_dev                       4      0      0
       -> device_is_actived                4      0      0
       -> fs_sel                           4      0      0
       -> task_music_device_remount        4      0      0
     task_music_display                    1      0      0
       -> ledseg_ocx_event                 0      0      0
       -> ledseg_disp                      0      0      0
       -> ledseg_disp                      0      0      0
       -> ledseg_disp                      0      0      0
       -> ledseg_ocx_display               0      0      0
     task_music_enter                     10      0      0
       -> led_mode_off                     6      0      0
       -> led_idle                         6      0      0
       -> set_sys_clk                      6      0      0
       -> draw_wait                        6      0      0
       -> draw_wait                        6      0      0
       -> my_memset                        6      0      0
       -> ocx_init                        12      0      0
       -> user_change_volume               6      0      0
       -> dac_enable                       6      0      0
       -> f_scan_set                      18      0      0
       -> set_sys_clk                      6      0      0
       -> music_mount_device               6      0      0
       -> msgbox                           6      0      0
       -> task_music_get_num               6      0      0
       -> led_idle                         6      0      0
       -> dac_dynamic                      6      0      0
     task_music_event                     14      0      0
       -> comm_event                      22      0      0
       -> music_event                     22      0      0
       -> fs_cur_dev                      22      0      0
       -> device_is_actived               22      0      0
       -> music_stop                      22      0      0
       -> device_need_activate            22      0      0
       -> device_need_activate            22      0      0
       -> music_stop                      22      0      0
       -> device_change                   22      0      0
       -> music_remount_device            22      0      0
       -> music_next_device               22      0      0
       -> task_music_get_num              22      0      0
       -> task_music_new                  22      0      0
       -> ledseg_ocx_show_num             22      0      0
       -> AudioCodec_MUTE                 22      0      0
       -> task_music_cal_time             22      0      0
       -> music_get_alltime               22      0      0
       -> music_get_status                22      0      0
       -> task_music_break_clr            22      0      0
       -> task_music_auto_next            22      0      0
       -> music_get_mtime                 22      0      0
       -> task_music_next                 22      0      0
     task_music_exit                       1      0      0
       -> AudioCodec_MUTE                  0      0      0
       -> led_mode_on                      0      0      0
       -> music_stop                       0      0      0
       -> dac_disable                      0      0      0
       -> dac_dynamic                      0      0      0
     task_music_get_num                   11      0      0
       -> fs_cur_dev                       0      0      0
       -> spi_param_addr                   0      0      0
       -> spi_read16                       0      0      0
       -> spi_param_addr                   0      0      0
       -> spi_read16                       0      0      0
     task_music_get_total                  0      0      0
       -> music_total                      0      0      0
       -> task_music_device_autochange
                                           0      0      0
       -> msgbox                           0      0      0
       -> msgbox                           0      0      0
     task_music_init                       4      0      0
       -> set_sys_clk                      4      0      0
       -> f_open_opt                       4      0      0
       -> f_get_opt_filename               4      0      0
       -> music_init                       4      0      0
       -> set_sys_clk                      4      0      0
     task_music_menu                       1      0      0
       -> fs_cur_dev                       0      0      0
       -> listbox                          2      0      0
       -> listbox                          2      0      0
       -> listbox                          2      0      0
       -> user_set_eq                      0      0      0
       -> music_eq                         0      0      0
       -> listbox                          2      0      0
       -> user_set_mode_play               0      0      0
       -> msgbox                           0      0      0
       -> music_stop                       0      0      0
       -> f_delete                         0      0      0
       -> msgbox                           0      0      0
       -> msgbox                           0      0      0
       -> msgbox                           0      0      0
       -> music_stop                       0      0      0
       -> f_delete                         0      0      0
       -> msgbox                           0      0      0
       -> msgbox                           0      0      0
       -> task_music_device_select         0      0      0
     task_music_menu_deal_msg              0      0      0
     task_music_new                       13      0      0
       -> led_music_play                   4      0      0
       -> task_music_play_init             4      0      0
       -> task_music_break_init            4      0      0
       -> task_music_save_num              4      0      0
       -> music_play                       4      0      0
       -> fs_cur_dev                       4      0      0
       -> device_is_actived                4      0      0
       -> music_stop                       4      0      0
       -> task_music_init                  4      0      0
       -> fs_is_mounted                    4      0      0
       -> is_other_device                  4      0      0
       -> task_music_auto_next_device
                                           4      0      0
       -> msgbox                           4      0      0
       -> task_music_prev                  4      0      0
       -> task_music_next                  4      0      0
     task_music_next                      18      0      0
       -> f_get_indexbefore               10      0      0
       -> music_stop                      10      0      0
       -> f_get_dirtotal                  10      0      0
       -> rand                            10      0      0
     task_music_next_dir                   0      0      0
       -> music_stop                       0      0      0
       -> f_open_folder                    0      0      0
     task_music_num_get                    0      0      0
       -> fs_cur_dev                       0      0      0
       -> spi_param_addr                   0      0      0
       -> spi_read16                       0      0      0
       -> spi_param_addr                   0      0      0
       -> spi_read16                       0      0      0
       -> task_music_get_total             0      0      0
     task_music_play_init                  9      0      0
       -> music_set_speed                  0      0      0
     task_music_prev                      16      0      0
       -> f_get_indexbefore               10      0      0
       -> music_stop                      10      0      0
       -> f_get_dirtotal                  10      0      0
       -> rand                            10      0      0
     task_music_prev_dir                   0      0      0
       -> music_stop                       0      0      0
       -> f_open_folder                    0      0      0
     task_music_save_num                   2      0      0
       -> spi_param_write16                0      0      0
       -> fs_cur_dev                       0      0      0
       -> spi_param_write16                0      0      0
       -> spi_param_write16                0      0      0
     task_music_select_numsic              3      0      0
       -> numbox                           4      0      0
       -> ledseg_ocx_show_num              4      0      0
     tasksub_music_menu                    0      0      0
       -> task_music_menu                  0      0      0
     tasksub_music_menu_enter              0      0      0
     tasksub_music_menu_event              0      0      0
     tasksub_music_menu_exit               0      0      0
     tasksub_music_menu_loop               0      0      0
       -> task_music_menu                  0      0      0


   Segment part sizes:

     Function/Label               Bytes
     --------------               -----
     WDTCON                          1
     t_msc                          37
     tbl_speed_order                 6
     task_music_display             69
     task_music_deal_msg           383
     ?Subroutine21                   6
     ?Subroutine0                   12
     ?Subroutine4                    6
     ?Subroutine3                    7
     ?Subroutine1                   10
     tbl_music_menu1                16
     tbl_music_menu2                16
     tbl_music_select_device         6
     tbl_playmode_items             14
     tbl_music_eq                   16
     task_music_device_autochange   54
     ?Subroutine5                    7
     task_music_get_total           94
     task_music_num_get             80
     task_music_device_remount      54
     task_music_device_select      118
     task_music_menu               415
     ?Subroutine6                    8
     ?Subroutine7                    9
     tasksub_music_menu_enter        3
     tasksub_music_menu_exit         3
     tasksub_music_menu_event        3
     task_music_menu_deal_msg        3
     tasksub_music_menu_loop         0
     ?Subroutine22                  11
     tasksub_music_menu              2
     task_music_break_save         120
     task_music_break_clr          144
     task_music_break_read         141
     ?Subroutine23                   9
     ?Subroutine10                   7
     task_music_save_num            51
     ?Subroutine24                   6
     task_music_break_init         142
     task_music_get_num             56
     ?Subroutine16                   7
     ?Subroutine19                   6
     ?Subroutine11                  10
     task_music_enter              286
     task_music_init               102
     task_music_exit                44
     task_music_auto_prev_device    61
     ?Subroutine2                    4
     task_music_auto_next_device    46
     task_music_prev_dir            51
     ?Subroutine14                  14
     ?Subroutine13                  14
     ?Subroutine8                   16
     ?Subroutine25                   6
     ?Subroutine20                   9
     task_music_next_dir            47
     ?Subroutine12                  12
     music_file_num_set             25
     task_music_prev               136
     ?Subroutine26                   6
     ?Subroutine9                   14
     ?Subroutine18                  18
     ?Subroutine17                  20
     ?Subroutine15                  14
     task_music_next               152
     task_music_auto_next           76
     task_music_cal_time            90
     task_music_play_init           29
     mp3res_play_musicmode         105
     task_music_new                221
     task_music_event              428
     music_repeat_hook               2
     task_music_select_numsic       61
     task_music_comm_event          19
     str_show_taskmusic             12
     task_music                     63
     __Constant_a                    4
     __Constant_8c9f                 4
     __Constant_3                    4
     __Constant_3c                   4
     __Constant_65                   4

 
   249 bytes in segment BANKED_CODE
    26 bytes in segment CODE_C
    68 bytes in segment LIST_CONTENT
   102 bytes in segment MUSIC_SEG
    37 bytes in segment MUSIC_XDATA
     2 bytes in segment NEAR_CODE
     1 byte  in segment SFR_AN
    25 bytes in segment TASK_MUSIC_MENU_SEG
   839 bytes in segment TASK_MUSIC_MENU_SEG_1
 1 324 bytes in segment TASK_MUSIC_SEG
 1 564 bytes in segment TASK_MUSIC_SEG_1
   142 bytes in segment TASK_MUSIC_SEG_2
    12 bytes in segment TASK_MUSIC_SEG_CONST
 
 4 333 bytes of CODE  memory (+ 20 bytes shared)
     0 bytes of DATA  memory (+  1 byte  shared)
    37 bytes of XDATA memory

Errors: none
Warnings: none
