##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   22/Jun/2016  18:27:58 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  banked                                            #
#    Data model         =  large                                             #
#    Calling convention =  extended stack reentrant                          #
#    Constant location  =  code                                              #
#    Extended stack     =  enabled                                           #
#    Dptr setup         =  1,16                                              #
#    Source file        =  E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\task\t #
#                          ask_update_fw.c                                   #
#    Command line       =  -I "C:\Program Files\IAR Systems\Embedded         #
#                          Workbench 4.05 Evaluation version\8051\INC\" -I   #
#                          "C:\Program Files\IAR Systems\Embedded Workbench  #
#                          4.05 Evaluation version\8051\INC\CLIB\" -I        #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\api\   #
#                          -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\dis #
#                          play\ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\A #
#                          PP\display\lcd\ -I E:\Juchen\CW6687G\JC_M_328_201 #
#                          60617_P0\APP\display\lcdseg\ -I                   #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\displa #
#                          y\led\ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\ #
#                          APP\display\ledseg\ -I E:\Juchen\CW6687G\JC_M_328 #
#                          _20160617_P0\APP\display\no\ -I                   #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\config #
#                          \ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\c #
#                          ommon\ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\ #
#                          APP\task\ -I E:\Juchen\CW6687G\JC_M_328_20160617_ #
#                          P0\APP\user\ -I E:\Juchen\CW6687G\JC_M_328_201606 #
#                          17_P0\APP\user\mp3res\ -I                         #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\btstac #
#                          k\ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\ #
#                          user\user_config\ -I E:\Juchen\CW6687G\JC_M_328_2 #
#                          0160617_P0\APP\user\user_iis\ -lC                 #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\Debug\ #
#                          List\ -o E:\Juchen\CW6687G\JC_M_328_20160617_P0\A #
#                          PP\Debug\Obj\ -e -z9 --debug --core=plain         #
#                          --dptr=16,1 --data_model=large                    #
#                          --code_model=banked --calling_convention=ext_stac #
#                          k_reentrant --place_constants=code                #
#                          --nr_virtual_regs 20 --extended_stack             #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\task\t #
#                          ask_update_fw.c                                   #
#    List file          =  E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\Debug\ #
#                          List\task_update_fw.lst                           #
#    Object file        =  E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\Debug\ #
#                          Obj\task_update_fw.r51                            #
#                                                                            #
#                                                                            #
##############################################################################

E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\task\task_update_fw.c
      1          /*****************************************************************************
      2           * Module    : Task
      3           * File      : task_update_fw.c
      4           * Author    : Hanny
      5           * Function  : 离线升级程序
      6           *****************************************************************************/
      7          #include "include.h"

   \                                 In segment SFR_AN, at 0xf7
   \   unsigned char volatile __sfr WDTCON
   \                     WDTCON:
   \   000000                DS 1
      8          
      9          #if TASK_UPDATE_FW_EN
     10          #include "task.h"
     11          #include "task_update_fw.h"
     12          #include "user_spi.h"
     13          
     14          #include SET_USER_PATH(CFG_UI_UPDATEFW_DIR, /ui/ui_updatefw.c)         //UI控制

   \                                 In segment TASK_UPDATE_SEG, align 1, keep-with-next
   \   __banked_func __ext_stack_reentrant void task_updatefw_dispmem_init(void)
   \                     task_updatefw_dispmem_init:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   02....       LJMP    ?BRET

   \                                 In segment TASK_UPDATE_SEG_CONST, align 1
   \   unsigned char const __code tbl_ledseg_fw_num[10]
   \                     tbl_ledseg_fw_num:
   \   000000   3F065B4F     DB 63, 6, 91, 79, 102, 109, 125, 7, 127, 111
   \            666D7D07
   \            7F6F    

   \                                 In segment TASK_UPDATE_SEG, align 1, keep-with-next
   \   __banked_func __ext_stack_reentrant void menu_update_fw_ledseg(void)
   \                     menu_update_fw_ledseg:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   75F064       MOV     B,#0x64
   \   000003   90....       MOV     DPTR,#t_upd
   \   000006   E0           MOVX    A,@DPTR
   \   000007   84           DIV     AB
   \   000008   12....       LCALL   ??Subroutine0_0
   \                     ??CrossCallReturnLabel_0:
   \   00000B   90....       MOV     DPTR,#disp_buf
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   75F00A       MOV     B,#0xa
   \   000012   90....       MOV     DPTR,#t_upd
   \   000015   E0           MOVX    A,@DPTR
   \   000016   84           DIV     AB
   \   000017   12....       LCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_1:
   \   00001A   90....       MOV     DPTR,#(disp_buf + 1)
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   90....       MOV     DPTR,#t_upd
   \   000021   E0           MOVX    A,@DPTR
   \   000022   12....       LCALL   ?Subroutine0
   \                     ??CrossCallReturnLabel_2:
   \   000025   90....       MOV     DPTR,#(disp_buf + 2)
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A2AF         MOV     C,0xa8.7
   \   00002B   5004         JNC     ??menu_update_fw_ledseg_0
   \   00002D   D2F0         SETB    B.0
   \   00002F   8002         SJMP    ??menu_update_fw_ledseg_1
   \                     ??menu_update_fw_ledseg_0:
   \   000031   C2F0         CLR     B.0
   \                     ??menu_update_fw_ledseg_1:
   \   000033   C2AF         CLR     0xa8.7
   \   000035   A2F0         MOV     C,B.0
   \   000037   92AF         MOV     0xa8.7,C
   \   000039   02....       LJMP    ?BRET

   \                                 In segment TASK_UPDATE_SEG, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   75F00A       MOV     B,#0xa
   \   000003   84           DIV     AB
   \   000004   E5F0         MOV     A,B
   \                     ??Subroutine0_0:
   \   000006   24..         ADD     A,#(tbl_ledseg_fw_num & 0xff)
   \   000008   F582         MOV     DPL,A
   \   00000A   E4           CLR     A
   \   00000B   34..         ADDC    A,#((tbl_ledseg_fw_num >> 8) & 0xff)
   \   00000D   F583         MOV     DPH,A
   \   00000F   E4           CLR     A
   \   000010   93           MOVC    A,@A+DPTR
   \   000011   22           RET

   \                                 In segment TASK_UPDATE_SEG, align 1, keep-with-next
   \   __banked_func __ext_stack_reentrant void task_update_fw_progress_display(u8)
   \                     task_update_fw_progress_display:
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   90....       MOV     DPTR,#t_upd
   \   000003   E0           MOVX    A,@DPTR
   \   000004   69           XRL     A,R1
   \   000005   6017         JZ      ??task_update_fw_progress_display_0
   \   000007   E9           MOV     A,R1
   \   000008   F0           MOVX    @DPTR,A
   \   000009                ; Setup parameters for call to function my_memset
   \   000009   7C05         MOV     R4,#0x5
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   7A..         MOV     R2,#(disp_buf & 0xff)
   \   000011   7B..         MOV     R3,#((disp_buf >> 8) & 0xff)
   \   000013   12....       LCALL   my_memset & 0xFFFF
   \   000016                ; Setup parameters for call to function menu_update_fw_ledseg
   \   000016   90....       MOV     DPTR,#(menu_update_fw_ledseg & 0xffff)
   \   000019   74..         MOV     A,#((menu_update_fw_ledseg >> 16) & 0xff)
   \   00001B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \                     ??task_update_fw_progress_display_0:
   \   00001E   02....       LJMP    ?BRET
     15          

   \                                 In segment UPDATE_XDATA, align 1, root
     16          IAR_XDATA_A type_update_task t_upd @ "UPDATE_XDATA";
   \                     t_upd:
   \   000000                DS 6
     17          
     18          //任务初始化
     19          #pragma location="TASK_UPDATE_SEG_1"

   \                                 In segment TASK_UPDATE_SEG_1, align 1, keep-with-next
     20          bool task_update_fw_init(void)
   \                     task_update_fw_init:
     21          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     22              set_sys_clk(SYS_24M);
   \   000000                ; Setup parameters for call to function set_sys_clk
   \   000000   7901         MOV     R1,#0x1
   \   000002   90....       MOV     DPTR,#(set_sys_clk & 0xffff)
   \   000005   74..         MOV     A,#((set_sys_clk >> 16) & 0xff)
   \   000007   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
     23              t_upd.disp_percent = 0xff;
   \   00000A   74FF         MOV     A,#-0x1
   \   00000C   90....       MOV     DPTR,#t_upd
   \   00000F   F0           MOVX    @DPTR,A
     24          
     25              task_ctl.work_sta = TASK_UPDATE_FW;
   \   000010   7415         MOV     A,#0x15
   \   000012   90....       MOV     DPTR,#task_ctl
   \   000015   F0           MOVX    @DPTR,A
     26              task_updatefw_dispmem_init();
     27              if (!device_is_actived(fs_cur_dev())) {
   \   000016                ; Setup parameters for call to function device_is_actived
   \   000016                ; Setup parameters for call to function fs_cur_dev
   \   000016   12....       LCALL   fs_cur_dev & 0xFFFF
   \   000019   12....       LCALL   device_is_actived & 0xFFFF
   \   00001C   4019         JC      ??task_update_fw_init_0
     28                  task_ctl.work_sta = TASK_EXIT;      //设备无效，返回主菜单
   \   00001E   741B         MOV     A,#0x1b
   \   000020   90....       MOV     DPTR,#task_ctl
   \   000023   F0           MOVX    @DPTR,A
     29                  msgbox(STR_NO_DEVICE, NULL, MSGBOX_TIME);
   \   000024                ; Setup parameters for call to function msgbox
   \   000024   7C05         MOV     R4,#0x5
   \   000026   7900         MOV     R1,#0x0
   \   000028   7A54         MOV     R2,#0x54
   \                     ??task_update_fw_init_1:
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   90....       MOV     DPTR,#(msgbox & 0xffff)
   \   00002F   74..         MOV     A,#((msgbox >> 16) & 0xff)
   \   000031   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
     30                  return false;
   \                     ??task_update_fw_init_2:
   \   000034   C3           CLR     C
   \   000035   806B         SJMP    ??task_update_fw_init_3
     31              }
     32              if (!fs_is_mounted()) {
   \                     ??task_update_fw_init_0:
   \   000037                ; Setup parameters for call to function fs_is_mounted
   \   000037   12....       LCALL   fs_is_mounted & 0xFFFF
   \   00003A   400E         JC      ??task_update_fw_init_4
     33                  task_ctl.work_sta = TASK_EXIT;      //文件系统无效，返回主菜单
   \   00003C   741B         MOV     A,#0x1b
   \   00003E   90....       MOV     DPTR,#task_ctl
   \   000041   F0           MOVX    @DPTR,A
     34                  msgbox(STR_INVALID_FAT, NULL, MSGBOX_TIME);
   \   000042                ; Setup parameters for call to function msgbox
   \   000042   7C05         MOV     R4,#0x5
   \   000044   7900         MOV     R1,#0x0
   \   000046   7A55         MOV     R2,#0x55
   \   000048   80E0         SJMP    ??task_update_fw_init_1
     35                  return false;
     36              }
     37              task_update_fw_progress_display(1);
   \                     ??task_update_fw_init_4:
   \   00004A                ; Setup parameters for call to function task_update_fw_progress_display
   \   00004A   7901         MOV     R1,#0x1
   \   00004C   90....       MOV     DPTR,#(task_update_fw_progress_display & 0xffff)
   \   00004F   74..         MOV     A,#((task_update_fw_progress_display >> 16) & 0xff)
   \   000051   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
     38              if (!f_open_binfile()) {
   \   000054                ; Setup parameters for call to function f_open_binfile
   \   000054   90....       MOV     DPTR,#(f_open_binfile & 0xffff)
   \   000057   74..         MOV     A,#((f_open_binfile >> 16) & 0xff)
   \   000059   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00005C   400E         JC      ??task_update_fw_init_5
     39                  task_ctl.work_sta = TASK_EXIT;      //升级文件打开失败，返回主菜单
   \   00005E   741B         MOV     A,#0x1b
   \   000060   90....       MOV     DPTR,#task_ctl
   \   000063   F0           MOVX    @DPTR,A
     40                  msgbox(STR_UPDATEFILE_ERROR, NULL, MSGBOX_TIME);
   \   000064                ; Setup parameters for call to function msgbox
   \   000064   7C05         MOV     R4,#0x5
   \   000066   7900         MOV     R1,#0x0
   \   000068   7A69         MOV     R2,#0x69
   \   00006A   80BE         SJMP    ??task_update_fw_init_1
     41                  return false;
     42              }
     43              task_update_fw_progress_display(2);
   \                     ??task_update_fw_init_5:
   \   00006C                ; Setup parameters for call to function task_update_fw_progress_display
   \   00006C   7902         MOV     R1,#0x2
   \   00006E   90....       MOV     DPTR,#(task_update_fw_progress_display & 0xffff)
   \   000071   74..         MOV     A,#((task_update_fw_progress_display >> 16) & 0xff)
   \   000073   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
     44              t_upd.file_len = GetFileLength();  //实际长度高2Byte
   \   000076                ; Setup parameters for call to function GetFileLength
   \   000076   90....       MOV     DPTR,#(GetFileLength & 0xffff)
   \   000079   74..         MOV     A,#((GetFileLength >> 16) & 0xff)
   \   00007B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00007E   90....       MOV     DPTR,#(t_upd + 4)
   \   000081   EA           MOV     A,R2
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   \   000084   EB           MOV     A,R3
   \   000085   F0           MOVX    @DPTR,A
     45              if(!f_read_opt((void __xdata *)0x9000)){
   \   000086                ; Setup parameters for call to function decoder_read
   \   000086   7A00         MOV     R2,#0x0
   \   000088   7B90         MOV     R3,#-0x70
   \   00008A   12....       LCALL   decoder_read & 0xFFFF
   \   00008D   4008         JC      ??task_update_fw_init_6
     46                  task_ctl.work_sta = TASK_EXIT;
   \   00008F   741B         MOV     A,#0x1b
   \   000091   90....       MOV     DPTR,#task_ctl
   \   000094   F0           MOVX    @DPTR,A
     47                  return false;
   \   000095   809D         SJMP    ??task_update_fw_init_2
     48              }
     49              task_update_fw_progress_display(4);
   \                     ??task_update_fw_init_6:
   \   000097                ; Setup parameters for call to function task_update_fw_progress_display
   \   000097   7904         MOV     R1,#0x4
   \   000099   90....       MOV     DPTR,#(task_update_fw_progress_display & 0xffff)
   \   00009C   74..         MOV     A,#((task_update_fw_progress_display >> 16) & 0xff)
   \   00009E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
     50              return true;
   \   0000A1   D3           SETB    C
   \                     ??task_update_fw_init_3:
   \   0000A2   02....       LJMP    ?BRET
     51          }
     52          
     53          #pragma location="TASK_UPDATE_SEG"

   \                                 In segment TASK_UPDATE_SEG, align 1, keep-with-next
     54          bool task_setting_update_event(void)
   \                     task_setting_update_event:
     55          {
   \   000000   7408         MOV     A,#0x8
   \   000002   12....       LCALL   ?FUNC_ENTER_SP
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
     56          
     57              //解析和显示版本号
     58              u16 i,j;
     59              j=(t_upd.file_len/(30-5));
   \   000005   90....       MOV     DPTR,#(t_upd + 4)
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   7A19         MOV     R2,#0x19
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   ?US_DIV_MOD
   \   000014   88..         MOV     ?V0 + 0,R0
   \   000016   89..         MOV     ?V0 + 1,R1
     60              //全部擦除预写块
     61              for(i=0; i<t_upd.file_len; i+=FW_SPI_ERASE_BLOCK)
   \   000018   7F00         MOV     R7,#0x0
   \   00001A   8031         SJMP    ??task_setting_update_event_0
     62              {
     63                  spi_erase(FW_ERASE_CMD, (u32)i << 8);
   \                     ??task_setting_update_event_1:
   \   00001C                ; Setup parameters for call to function spi_erase
   \   00001C   8E..         MOV     ?V0 + 4,R6
   \   00001E   8F..         MOV     ?V0 + 5,R7
   \   000020   8E..         MOV     ?V0 + 6,R6
   \   000022   8E..         MOV     ?V0 + 7,R6
   \   000024   7408         MOV     A,#0x8
   \   000026   78..         MOV     R0,#?V0 + 4
   \   000028   12....       LCALL   ?L_SHL
   \   00002B   FA           MOV     R2,A
   \   00002C   FB           MOV     R3,A
   \   00002D   AC..         MOV     R4,?V0 + 6
   \   00002F   FD           MOV     R5,A
   \   000030   79D8         MOV     R1,#-0x28
   \   000032   12....       LCALL   spi_erase & 0xFFFF
     64                  task_update_fw_progress_display(i/j + 5);
   \   000035                ; Setup parameters for call to function task_update_fw_progress_display
   \   000035   7800         MOV     R0,#0x0
   \   000037   EF           MOV     A,R7
   \   000038   F9           MOV     R1,A
   \   000039   AA..         MOV     R2,?V0 + 0
   \   00003B   AB..         MOV     R3,?V0 + 1
   \   00003D   12....       LCALL   ?US_DIV_MOD
   \   000040   E8           MOV     A,R0
   \   000041   2405         ADD     A,#0x5
   \   000043   F9           MOV     R1,A
   \   000044   90....       MOV     DPTR,#(task_update_fw_progress_display & 0xffff)
   \   000047   74..         MOV     A,#((task_update_fw_progress_display >> 16) & 0xff)
   \   000049   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
     65              }
   \   00004C   0F           INC     R7
   \                     ??task_setting_update_event_0:
   \   00004D   90....       MOV     DPTR,#(t_upd + 4)
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F8           MOV     R0,A
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F9           MOV     R1,A
   \   000055   C3           CLR     C
   \   000056   E4           CLR     A
   \   000057   98           SUBB    A,R0
   \   000058   EF           MOV     A,R7
   \   000059   99           SUBB    A,R1
   \   00005A   40C0         JC      ??task_setting_update_event_1
     66          
     67              //从512Byte开始写,每次512B
     68              //j=(FileLen/(60-30));
     69              for(i=2; i<t_upd.file_len; i+=2)
   \   00005C   0E           INC     R6
   \   00005D   0E           INC     R6
   \   00005E   7F00         MOV     R7,#0x0
   \   000060   803D         SJMP    ??CrossCallReturnLabel_5
     70              {
     71                  if(!f_read_opt((void __xdata *)0x9200)){
     72                      return false;
     73                  }
     74                 // spi_write((void __xdata *)0x8200, (u32)i << 8, 256);
     75                  spi_write_page((void __xdata *)0x9200, i);             //256 per one time
   \                     ??task_setting_update_event_2:
   \   000062                ; Setup parameters for call to function spi_write_page
   \   000062   EE           MOV     A,R6
   \   000063   FC           MOV     R4,A
   \   000064   EF           MOV     A,R7
   \   000065   FD           MOV     R5,A
   \   000066   7A00         MOV     R2,#0x0
   \   000068   7B92         MOV     R3,#-0x6e
   \   00006A   90....       MOV     DPTR,#(spi_write_page & 0xffff)
   \   00006D   74..         MOV     A,#((spi_write_page >> 16) & 0xff)
   \   00006F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
     76                  spi_write_page((void __xdata *)0x9300, i+1);
   \   000072                ; Setup parameters for call to function spi_write_page
   \   000072   7401         MOV     A,#0x1
   \   000074   2E           ADD     A,R6
   \   000075   FC           MOV     R4,A
   \   000076   E4           CLR     A
   \   000077   3F           ADDC    A,R7
   \   000078   FD           MOV     R5,A
   \   000079   7A00         MOV     R2,#0x0
   \   00007B   7B93         MOV     R3,#-0x6d
   \   00007D   90....       MOV     DPTR,#(spi_write_page & 0xffff)
   \   000080   74..         MOV     A,#((spi_write_page >> 16) & 0xff)
   \   000082   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
     77                  task_update_fw_progress_display(i/j + 31);
   \   000085                ; Setup parameters for call to function task_update_fw_progress_display
   \   000085   EE           MOV     A,R6
   \   000086   F8           MOV     R0,A
   \   000087   EF           MOV     A,R7
   \   000088   F9           MOV     R1,A
   \   000089   AA..         MOV     R2,?V0 + 0
   \   00008B   AB..         MOV     R3,?V0 + 1
   \   00008D   12....       LCALL   ?US_DIV_MOD
   \   000090   E8           MOV     A,R0
   \   000091   241F         ADD     A,#0x1f
   \   000093   F9           MOV     R1,A
   \   000094   90....       MOV     DPTR,#(task_update_fw_progress_display & 0xffff)
   \   000097   74..         MOV     A,#((task_update_fw_progress_display >> 16) & 0xff)
   \   000099   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00009C   12....       LCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_5:
   \   00009F   12....       LCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_3:
   \   0000A2   500D         JNC     ??task_setting_update_event_3
   \   0000A4                ; Setup parameters for call to function decoder_read
   \   0000A4   7A00         MOV     R2,#0x0
   \   0000A6   7B92         MOV     R3,#-0x6e
   \   0000A8   12....       LCALL   decoder_read & 0xFFFF
   \   0000AB   40B5         JC      ??task_setting_update_event_2
   \                     ??task_setting_update_event_4:
   \   0000AD   C3           CLR     C
   \   0000AE   02....       LJMP    ??task_setting_update_event_5 & 0xFFFF
     78              }
     79              //读校验,每次校验4KB
     80              j=(t_upd.file_len/(80-60));
   \                     ??task_setting_update_event_3:
   \   0000B1   7A14         MOV     R2,#0x14
   \   0000B3   7B00         MOV     R3,#0x0
   \   0000B5   12....       LCALL   ?US_DIV_MOD
   \   0000B8   88..         MOV     ?V0 + 0,R0
   \   0000BA   89..         MOV     ?V0 + 1,R1
     81              if(!f_seek_opt(F_SEEK_ORG,1)){
   \   0000BC                ; Setup parameters for call to function decoder_seek
   \   0000BC   90....       MOV     DPTR,#__Constant_1
   \   0000BF   78..         MOV     R0,#?V0 + 4
   \   0000C1   12....       LCALL   ?L_MOV_C
   \   0000C4   AA..         MOV     R2,?V0 + 4
   \   0000C6   AB..         MOV     R3,?V0 + 5
   \   0000C8   AC..         MOV     R4,?V0 + 6
   \   0000CA   AD..         MOV     R5,?V0 + 7
   \   0000CC   7900         MOV     R1,#0x0
   \   0000CE   12....       LCALL   decoder_seek & 0xFFFF
   \   0000D1   50DA         JNC     ??task_setting_update_event_4
     82                  return false;
     83              }
     84              for(i=2; i<t_upd.file_len; i+=2)
   \   0000D3   7E02         MOV     R6,#0x2
   \   0000D5   7F00         MOV     R7,#0x0
   \   0000D7   807B         SJMP    ??CrossCallReturnLabel_6
     85              {
     86                  spi_read((void __xdata *)0x9200, (u32)(((u32)i)<<8), 512);
   \                     ??task_setting_update_event_6:
   \   0000D9                ; Setup parameters for call to function spi_read
   \   0000D9   8E..         MOV     ?V0 + 4,R6
   \   0000DB   8F..         MOV     ?V0 + 5,R7
   \   0000DD   75..00       MOV     ?V0 + 6,#0x0
   \   0000E0   75..00       MOV     ?V0 + 7,#0x0
   \   0000E3   7408         MOV     A,#0x8
   \   0000E5   78..         MOV     R0,#?V0 + 4
   \   0000E7   12....       LCALL   ?L_SHL
   \   0000EA   78..         MOV     R0,#?V0 + 4
   \   0000EC   12....       LCALL   ?PUSH_ISTACK_I_FOUR
   \   0000EF   FC           MOV     R4,A
   \   0000F0   7D02         MOV     R5,#0x2
   \   0000F2   FA           MOV     R2,A
   \   0000F3   7B92         MOV     R3,#-0x6e
   \   0000F5   12....       LCALL   spi_read & 0xFFFF
   \   0000F8   74FC         MOV     A,#-0x4
   \   0000FA   12....       LCALL   ?DEALLOC_EXT_STACK8
     87                  if(!f_read_opt(((void __xdata *)(0x9400)))){
   \   0000FD                ; Setup parameters for call to function decoder_read
   \   0000FD   FA           MOV     R2,A
   \   0000FE   7B94         MOV     R3,#-0x6c
   \   000100   12....       LCALL   decoder_read & 0xFFFF
   \   000103   50A8         JNC     ??task_setting_update_event_4
     88                      return false;
     89                  }
     90          
     91                  if((0 != memcmp((void __xdata *)(0x9200), (void __xdata *)(0x9400), 0xc0)) ||
     92                     (0 != memcmp((void __xdata *)(0x92C0), (void __xdata *)(0x94C0), 0xc0)) ||
     93                     (0 != memcmp((void __xdata *)(0x9380), (void __xdata *)(0x9580), 0x80)) )
   \   000105                ; Setup parameters for call to function mem_cmp
   \   000105   79C0         MOV     R1,#-0x40
   \   000107   7C00         MOV     R4,#0x0
   \   000109   7D94         MOV     R5,#-0x6c
   \   00010B   7A00         MOV     R2,#0x0
   \   00010D   12....       LCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_7:
   \   000110   7001         JNZ     ??task_setting_update_event_7
   \   000112   EB           MOV     A,R3
   \                     ??task_setting_update_event_7:
   \   000113   7098         JNZ     ??task_setting_update_event_4
   \   000115                ; Setup parameters for call to function mem_cmp
   \   000115   79C0         MOV     R1,#-0x40
   \   000117   7CC0         MOV     R4,#-0x40
   \   000119   7D94         MOV     R5,#-0x6c
   \   00011B   7AC0         MOV     R2,#-0x40
   \   00011D   12....       LCALL   ?Subroutine3
   \                     ??CrossCallReturnLabel_8:
   \   000120   7001         JNZ     ??task_setting_update_event_8
   \   000122   EB           MOV     A,R3
   \                     ??task_setting_update_event_8:
   \   000123   7088         JNZ     ??task_setting_update_event_4
   \   000125                ; Setup parameters for call to function mem_cmp
   \   000125   7980         MOV     R1,#-0x80
   \   000127   7C80         MOV     R4,#-0x80
   \   000129   7D95         MOV     R5,#-0x6b
   \   00012B   7A80         MOV     R2,#-0x80
   \   00012D   7B93         MOV     R3,#-0x6d
   \   00012F   12....       LCALL   ??Subroutine3_0
   \                     ??CrossCallReturnLabel_9:
   \   000132   7001         JNZ     ??task_setting_update_event_9
   \   000134   EB           MOV     A,R3
   \                     ??task_setting_update_event_9:
   \   000135   6003         JZ      $+5
   \   000137   02....       LJMP    ??task_setting_update_event_4 & 0xFFFF
     94                  {//校验失败
     95                      return false;
     96                  }
     97                  task_update_fw_progress_display(i/j + 61);
   \   00013A                ; Setup parameters for call to function task_update_fw_progress_display
   \   00013A   EE           MOV     A,R6
   \   00013B   F8           MOV     R0,A
   \   00013C   EF           MOV     A,R7
   \   00013D   F9           MOV     R1,A
   \   00013E   AA..         MOV     R2,?V0 + 0
   \   000140   AB..         MOV     R3,?V0 + 1
   \   000142   12....       LCALL   ?US_DIV_MOD
   \   000145   E8           MOV     A,R0
   \   000146   243D         ADD     A,#0x3d
   \   000148   F9           MOV     R1,A
   \   000149   90....       MOV     DPTR,#(task_update_fw_progress_display & 0xffff)
   \   00014C   74..         MOV     A,#((task_update_fw_progress_display >> 16) & 0xff)
   \   00014E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
     98              }
   \   000151   12....       LCALL   ?Subroutine2
   \                     ??CrossCallReturnLabel_6:
   \   000154   12....       LCALL   ?Subroutine1
   \                     ??CrossCallReturnLabel_4:
   \   000157   4080         JC      ??task_setting_update_event_6
     99              //最后写和校验第一个512B
    100              //f_seek_opt(F_SEEK_ORG,0);
    101              //f_read_opt((void __xdata *)0x8000);
    102              spi_write_page((void __xdata *)0x9000, 0);             //256 per one time
   \   000159                ; Setup parameters for call to function spi_write_page
   \   000159   7C00         MOV     R4,#0x0
   \   00015B   7D00         MOV     R5,#0x0
   \   00015D   7A00         MOV     R2,#0x0
   \   00015F   7B90         MOV     R3,#-0x70
   \   000161   90....       MOV     DPTR,#(spi_write_page & 0xffff)
   \   000164   74..         MOV     A,#((spi_write_page >> 16) & 0xff)
   \   000166   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    103              spi_write_page((void __xdata *)0x9100, 1);
   \   000169                ; Setup parameters for call to function spi_write_page
   \   000169   7C01         MOV     R4,#0x1
   \   00016B   7D00         MOV     R5,#0x0
   \   00016D   7A00         MOV     R2,#0x0
   \   00016F   7B91         MOV     R3,#-0x6f
   \   000171   90....       MOV     DPTR,#(spi_write_page & 0xffff)
   \   000174   74..         MOV     A,#((spi_write_page >> 16) & 0xff)
   \   000176   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    104              spi_read((void __xdata *)0x9200, 0, 512);
   \   000179                ; Setup parameters for call to function spi_read
   \   000179   90....       MOV     DPTR,#__Constant_0
   \   00017C   78..         MOV     R0,#?V0 + 0
   \   00017E   12....       LCALL   ?L_MOV_C
   \   000181   78..         MOV     R0,#?V0 + 0
   \   000183   12....       LCALL   ?PUSH_ISTACK_I_FOUR
   \   000186   FC           MOV     R4,A
   \   000187   7D02         MOV     R5,#0x2
   \   000189   FA           MOV     R2,A
   \   00018A   7B92         MOV     R3,#-0x6e
   \   00018C   12....       LCALL   spi_read & 0xFFFF
   \   00018F   74FC         MOV     A,#-0x4
   \   000191   12....       LCALL   ?DEALLOC_EXT_STACK8
    105              //f_close();
    106              task_update_fw_progress_display(90);
   \   000194                ; Setup parameters for call to function task_update_fw_progress_display
   \   000194   795A         MOV     R1,#0x5a
   \   000196   90....       MOV     DPTR,#(task_update_fw_progress_display & 0xffff)
   \   000199   74..         MOV     A,#((task_update_fw_progress_display >> 16) & 0xff)
   \   00019B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    107          
    108              if((0 != memcmp((void __xdata *)(0x9000), (void __xdata *)(0x9200), 0xc0)) ||
    109                 (0 != memcmp((void __xdata *)(0x90C0), (void __xdata *)(0x92C0), 0xc0)) ||
    110                 (0 != memcmp((void __xdata *)(0x9180), (void __xdata *)(0x9380), 0x80)) )
   \   00019E                ; Setup parameters for call to function mem_cmp
   \   00019E   79C0         MOV     R1,#-0x40
   \   0001A0   7C00         MOV     R4,#0x0
   \   0001A2   7D92         MOV     R5,#-0x6e
   \   0001A4   7A00         MOV     R2,#0x0
   \   0001A6   7B90         MOV     R3,#-0x70
   \   0001A8   12....       LCALL   ??Subroutine3_0
   \                     ??CrossCallReturnLabel_10:
   \   0001AB   7001         JNZ     ??task_setting_update_event_10
   \   0001AD   EB           MOV     A,R3
   \                     ??task_setting_update_event_10:
   \   0001AE   7024         JNZ     ??task_setting_update_event_11
   \   0001B0                ; Setup parameters for call to function mem_cmp
   \   0001B0   79C0         MOV     R1,#-0x40
   \   0001B2   7CC0         MOV     R4,#-0x40
   \   0001B4   7D92         MOV     R5,#-0x6e
   \   0001B6   7AC0         MOV     R2,#-0x40
   \   0001B8   7B90         MOV     R3,#-0x70
   \   0001BA   12....       LCALL   ??Subroutine3_0
   \                     ??CrossCallReturnLabel_11:
   \   0001BD   7001         JNZ     ??task_setting_update_event_12
   \   0001BF   EB           MOV     A,R3
   \                     ??task_setting_update_event_12:
   \   0001C0   7012         JNZ     ??task_setting_update_event_11
   \   0001C2                ; Setup parameters for call to function mem_cmp
   \   0001C2   7980         MOV     R1,#-0x80
   \   0001C4   7C80         MOV     R4,#-0x80
   \   0001C6   7D93         MOV     R5,#-0x6d
   \   0001C8   7A80         MOV     R2,#-0x80
   \   0001CA   7B91         MOV     R3,#-0x6f
   \   0001CC   12....       LCALL   ??Subroutine3_0
   \                     ??CrossCallReturnLabel_12:
   \   0001CF   7001         JNZ     ??task_setting_update_event_13
   \   0001D1   EB           MOV     A,R3
   \                     ??task_setting_update_event_13:
   \   0001D2   6010         JZ      ??task_setting_update_event_14
    111              {//校验失败
    112                  spi_erase(FW_ERASE_CMD,0);
   \                     ??task_setting_update_event_11:
   \   0001D4                ; Setup parameters for call to function spi_erase
   \   0001D4   AA..         MOV     R2,?V0 + 0
   \   0001D6   AB..         MOV     R3,?V0 + 1
   \   0001D8   AC..         MOV     R4,?V0 + 2
   \   0001DA   AD..         MOV     R5,?V0 + 3
   \   0001DC   79D8         MOV     R1,#-0x28
   \   0001DE   12....       LCALL   spi_erase & 0xFFFF
   \   0001E1   02....       LJMP    ??task_setting_update_event_4 & 0xFFFF
    113                  return false;
    114              }
    115              //升级成功
    116              task_update_fw_progress_display(100);
   \                     ??task_setting_update_event_14:
   \   0001E4                ; Setup parameters for call to function task_update_fw_progress_display
   \   0001E4   7964         MOV     R1,#0x64
   \   0001E6   90....       MOV     DPTR,#(task_update_fw_progress_display & 0xffff)
   \   0001E9   74..         MOV     A,#((task_update_fw_progress_display >> 16) & 0xff)
   \   0001EB   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    117              return true;
   \   0001EE   D3           SETB    C
   \                     ??task_setting_update_event_5:
   \   0001EF   7F08         MOV     R7,#0x8
   \   0001F1   02....       LJMP    ?BANKED_LEAVE_SP
    118          }

   \                                 In segment TASK_UPDATE_SEG, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7B92         MOV     R3,#-0x6e
   \                     ??Subroutine3_0:
   \   000002   12....       LCALL   mem_cmp & 0xFFFF
   \   000005   EA           MOV     A,R2
   \   000006   22           RET

   \                                 In segment TASK_UPDATE_SEG, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   0E           INC     R6
   \   000004   0E           INC     R6
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   FF           MOV     R7,A
   \   000009   22           RET

   \                                 In segment TASK_UPDATE_SEG, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   90....       MOV     DPTR,#(t_upd + 4)
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F9           MOV     R1,A
   \   000008   C3           CLR     C
   \   000009   EE           MOV     A,R6
   \   00000A   98           SUBB    A,R0
   \   00000B   EF           MOV     A,R7
   \   00000C   99           SUBB    A,R1
   \   00000D   22           RET
    119          
    120          //任务事务处理
    121          #pragma location="TASK_UPDATE_SEG"

   \                                 In segment TASK_UPDATE_SEG, align 1, keep-with-next
    122          void task_update_fw_event(void)
   \                     task_update_fw_event:
    123          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    124              if(!task_setting_update_event()) {
   \   000000                ; Setup parameters for call to function task_setting_update_event
   \   000000   90....       MOV     DPTR,#(task_setting_update_event & 0xffff)
   \   000003   74..         MOV     A,#((task_setting_update_event >> 16) & 0xff)
   \   000005   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000008   400F         JC      ??task_update_fw_event_0
    125                  task_update_fw_progress_display(t_upd.disp_percent+100);
   \   00000A                ; Setup parameters for call to function task_update_fw_progress_display
   \   00000A   90....       MOV     DPTR,#t_upd
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   2464         ADD     A,#0x64
   \   000010   F9           MOV     R1,A
   \   000011   90....       MOV     DPTR,#(task_update_fw_progress_display & 0xffff)
   \   000014   74..         MOV     A,#((task_update_fw_progress_display >> 16) & 0xff)
   \   000016   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    126              }
    127          }
   \                     ??task_update_fw_event_0:
   \   000019   02....       LJMP    ?BRET
    128          
    129          //任务主流程
    130          #pragma location="TASK_UPDATE_SEG"

   \                                 In segment TASK_UPDATE_SEG, align 1, keep-with-next
    131          void task_update_fw(void)
   \                     task_update_fw:
    132          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    133              //printf("task_update_fw\n");
    134              if(task_update_fw_init()) {
   \   000000                ; Setup parameters for call to function task_update_fw_init
   \   000000   90....       MOV     DPTR,#(task_update_fw_init & 0xffff)
   \   000003   74..         MOV     A,#((task_update_fw_init >> 16) & 0xff)
   \   000005   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000008   501A         JNC     ??task_update_fw_0
    135                  task_update_fw_event();
   \   00000A                ; Setup parameters for call to function task_update_fw_event
   \   00000A   90....       MOV     DPTR,#(task_update_fw_event & 0xffff)
   \   00000D   74..         MOV     A,#((task_update_fw_event >> 16) & 0xff)
   \   00000F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000012   8003         SJMP    ??task_update_fw_1
    136                  while(device_is_actived(fs_cur_dev())) {
    137                      WATCHDOG_CLR();
   \                     ??task_update_fw_2:
   \   000014   43F720       ORL     0xf7,#0x20
    138                  }
   \                     ??task_update_fw_1:
   \   000017                ; Setup parameters for call to function device_is_actived
   \   000017                ; Setup parameters for call to function fs_cur_dev
   \   000017   12....       LCALL   fs_cur_dev & 0xFFFF
   \   00001A   12....       LCALL   device_is_actived & 0xFFFF
   \   00001D   40F5         JC      ??task_update_fw_2
    139                  WDTCON = 0x18;
   \   00001F   75F718       MOV     0xf7,#0x18
    140                  while (1);          //此任务不可返回
   \                     ??task_update_fw_3:
   \   000022   80FE         SJMP    ??task_update_fw_3
    141              }
    142          }
   \                     ??task_update_fw_0:
   \   000024   02....       LJMP    ?BRET

   \                                 In segment CODE_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In segment CODE_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0

   \                                 In segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IE0
   \                     _A_IE0:
   \   000000                DS 1
    143          #endif

   Maximum stack usage in bytes:

     Function                       EXT_STACK PSTACK XSTACK
     --------                       --------- ------ ------
     menu_update_fw_ledseg                 0      0      0
     task_setting_update_event            15      0      0
       -> spi_erase                       22      0      0
       -> task_update_fw_progress_display
                                          22      0      0
       -> spi_write_page                  22      0      0
       -> spi_write_page                  22      0      0
       -> task_update_fw_progress_display
                                          22      0      0
       -> decoder_read                    22      0      0
       -> decoder_seek                    22      0      0
       -> spi_read                        30      0      0
       -> decoder_read                    22      0      0
       -> mem_cmp                         22      0      0
       -> mem_cmp                         22      0      0
       -> mem_cmp                         22      0      0
       -> task_update_fw_progress_display
                                          22      0      0
       -> spi_write_page                  22      0      0
       -> spi_write_page                  22      0      0
       -> spi_read                        30      0      0
       -> task_update_fw_progress_display
                                          22      0      0
       -> mem_cmp                         22      0      0
       -> mem_cmp                         22      0      0
       -> mem_cmp                         22      0      0
       -> spi_erase                       22      0      0
       -> task_update_fw_progress_display
                                          22      0      0
     task_update_fw                        0      0      0
       -> task_update_fw_init              0      0      0
       -> task_update_fw_event             0      0      0
       -> fs_cur_dev                       0      0      0
       -> device_is_actived                0      0      0
     task_update_fw_event                  0      0      0
       -> task_setting_update_event        0      0      0
       -> task_update_fw_progress_display
                                           0      0      0
     task_update_fw_init                   0      0      0
       -> set_sys_clk                      0      0      0
       -> fs_cur_dev                       0      0      0
       -> device_is_actived                0      0      0
       -> msgbox                           0      0      0
       -> fs_is_mounted                    0      0      0
       -> msgbox                           0      0      0
       -> task_update_fw_progress_display
                                           0      0      0
       -> f_open_binfile                   0      0      0
       -> msgbox                           0      0      0
       -> task_update_fw_progress_display
                                           0      0      0
       -> GetFileLength                    0      0      0
       -> decoder_read                     0      0      0
       -> task_update_fw_progress_display
                                           0      0      0
     task_update_fw_progress_display
                                          11      0      0
       -> my_memset                        0      0      0
       -> menu_update_fw_ledseg            0      0      0
     task_updatefw_dispmem_init            0      0      0


   Segment part sizes:

     Function/Label                 Bytes
     --------------                 -----
     WDTCON                            1
     task_updatefw_dispmem_init        3
     tbl_ledseg_fw_num                10
     menu_update_fw_ledseg            60
     ?Subroutine0                     18
     task_update_fw_progress_display
                                      33
     t_upd                             6
     task_update_fw_init             165
     task_setting_update_event       500
     ?Subroutine3                      7
     ?Subroutine2                     10
     ?Subroutine1                     14
     task_update_fw_event             28
     task_update_fw                   39
     __Constant_1                      4
     __Constant_0                      4
     _A_IE0                            1

 
   8 bytes in segment CODE_C
   2 bytes in segment SFR_AN
 712 bytes in segment TASK_UPDATE_SEG
 165 bytes in segment TASK_UPDATE_SEG_1
  10 bytes in segment TASK_UPDATE_SEG_CONST
   6 bytes in segment UPDATE_XDATA
 
 887 bytes of CODE  memory (+ 8 bytes shared)
   0 bytes of DATA  memory (+ 2 bytes shared)
   6 bytes of XDATA memory

Errors: none
Warnings: none
