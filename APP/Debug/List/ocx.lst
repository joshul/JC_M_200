##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   22/Jun/2016  18:27:54 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  banked                                            #
#    Data model         =  large                                             #
#    Calling convention =  extended stack reentrant                          #
#    Constant location  =  code                                              #
#    Extended stack     =  enabled                                           #
#    Dptr setup         =  1,16                                              #
#    Source file        =  E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\displa #
#                          y\ocx.c                                           #
#    Command line       =  -I "C:\Program Files\IAR Systems\Embedded         #
#                          Workbench 4.05 Evaluation version\8051\INC\" -I   #
#                          "C:\Program Files\IAR Systems\Embedded Workbench  #
#                          4.05 Evaluation version\8051\INC\CLIB\" -I        #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\api\   #
#                          -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\dis #
#                          play\ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\A #
#                          PP\display\lcd\ -I E:\Juchen\CW6687G\JC_M_328_201 #
#                          60617_P0\APP\display\lcdseg\ -I                   #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\displa #
#                          y\led\ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\ #
#                          APP\display\ledseg\ -I E:\Juchen\CW6687G\JC_M_328 #
#                          _20160617_P0\APP\display\no\ -I                   #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\config #
#                          \ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\c #
#                          ommon\ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\ #
#                          APP\task\ -I E:\Juchen\CW6687G\JC_M_328_20160617_ #
#                          P0\APP\user\ -I E:\Juchen\CW6687G\JC_M_328_201606 #
#                          17_P0\APP\user\mp3res\ -I                         #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\btstac #
#                          k\ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\ #
#                          user\user_config\ -I E:\Juchen\CW6687G\JC_M_328_2 #
#                          0160617_P0\APP\user\user_iis\ -lC                 #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\Debug\ #
#                          List\ -o E:\Juchen\CW6687G\JC_M_328_20160617_P0\A #
#                          PP\Debug\Obj\ -e -z9 --debug --core=plain         #
#                          --dptr=16,1 --data_model=large                    #
#                          --code_model=banked --calling_convention=ext_stac #
#                          k_reentrant --place_constants=code                #
#                          --nr_virtual_regs 20 --extended_stack             #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\displa #
#                          y\ocx.c                                           #
#    List file          =  E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\Debug\ #
#                          List\ocx.lst                                      #
#    Object file        =  E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\Debug\ #
#                          Obj\ocx.r51                                       #
#                                                                            #
#                                                                            #
##############################################################################

E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\display\ocx.c
      1          /*****************************************************************************
      2          * Module    : Display
      3          * File      : ocx.c
      4          * Author    : Hanny
      5          * Function  : 控件管理中心
      6          *****************************************************************************/
      7          #include "include.h"
      8          #include "task.h"
      9          

   \                                 In segment XDATA_Z, align 1, keep-with-next
   \   000000                REQUIRE __INIT_XDATA_Z
     10          type_ocx_ctl ocx_ctl;
   \                     ocx_ctl:
   \   000000                DS 6
     11          

   \                                 In segment BANKED_CODE, align 1, keep-with-next
     12          void ocx_init(void (*event_func)(void), bool (*msg_func)(u8 msg))
   \                     ocx_init:
     13          {
   \   000000   EE           MOV     A,R6
   \   000001   C0E0         PUSH    A
   \   000003                ; Saved register size: 1
   \   000003                ; Auto size: 0
   \   000003   7582F8       MOV     DPL,#-0x8
   \   000006   7583FF       MOV     DPH,#-0x1
   \   000009   12....       LCALL   ?EXT_STACK_DISP0_16
   \   00000C   12....       LCALL   ?Subroutine1 & 0xFFFF
     14              ocx_ctl.event_func = event_func;
   \                     ??CrossCallReturnLabel_2:
   \   00000F   90....       MOV     DPTR,#ocx_ctl
   \   000012   E9           MOV     A,R1
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   EA           MOV     A,R2
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   EB           MOV     A,R3
   \   000019   F0           MOVX    @DPTR,A
     15              ocx_ctl.msg_func = msg_func;
   \   00001A   90....       MOV     DPTR,#(ocx_ctl + 3)
   \   00001D   EC           MOV     A,R4
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   ED           MOV     A,R5
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   EE           MOV     A,R6
   \   000024   F0           MOVX    @DPTR,A
     16          }
   \   000025                REQUIRE ?Subroutine2
   \   000025                ; // Fall through to label ?Subroutine2

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   D0E0         POP     A
   \   000002   FE           MOV     R6,A
   \   000003   02....       LJMP    ?BRET

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FE           MOV     R6,A
   \   000008   22           RET
     17          

   \                                 In segment BANKED_CODE, align 1, keep-with-next
     18          void ocx_event(void)
   \                     ocx_event:
     19          {
   \   000000   EE           MOV     A,R6
   \   000001   C0E0         PUSH    A
   \   000003                ; Saved register size: 1
   \   000003                ; Auto size: 0
     20              if (NULL != ocx_ctl.event_func) {
   \   000003   90....       MOV     DPTR,#ocx_ctl
   \   000006   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000009   6011         JZ      ??ocx_event_0
     21                  (*ocx_ctl.event_func)();
   \   00000B                ; Setup parameters for indirect call
   \   00000B   90....       MOV     DPTR,#ocx_ctl
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F9           MOV     R1,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FA           MOV     R2,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   8982         MOV     DPL,R1
   \   000017   8A83         MOV     DPH,R2
   \   000019   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
     22              }
     23          }
   \                     ??ocx_event_0:
   \   00001C   80..         SJMP    ?Subroutine2

   \                                 In segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000003   EC           MOV     A,R4
   \   000004   4D           ORL     A,R5
   \   000005   4E           ORL     A,R6
   \   000006   22           RET
     24          

   \                                 In segment BANKED_CODE, align 1, keep-with-next
     25          void ocx_msg(u8 msg)
   \                     ocx_msg:
     26          {
   \   000000   EE           MOV     A,R6
   \   000001   C0E0         PUSH    A
   \   000003   EF           MOV     A,R7
   \   000004   C0E0         PUSH    A
   \   000006                ; Saved register size: 2
   \   000006                ; Auto size: 0
   \   000006   E9           MOV     A,R1
   \   000007   FF           MOV     R7,A
     27              bool res = false;
     28              if (NULL != ocx_ctl.msg_func) {
   \   000008   90....       MOV     DPTR,#(ocx_ctl + 3)
   \   00000B   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00000E   600A         JZ      ??ocx_msg_0
     29                  res = (*ocx_ctl.msg_func)(msg);
     30              }
     31              if (!res) {
   \   000010                ; Setup parameters for indirect call
   \   000010   8C82         MOV     DPL,R4
   \   000012   8D83         MOV     DPH,R5
   \   000014   EE           MOV     A,R6
   \   000015   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000018   4005         JC      ??ocx_msg_1
     32                  deal_msg(msg);
   \                     ??ocx_msg_0:
   \   00001A                ; Setup parameters for call to function deal_msg
   \   00001A   EF           MOV     A,R7
   \   00001B   F9           MOV     R1,A
   \   00001C   12....       LCALL   deal_msg & 0xFFFF
     33              }
     34          }
   \                     ??ocx_msg_1:
   \   00001F   D0E0         POP     A
   \   000021   FF           MOV     R7,A
   \   000022   80..         SJMP    ?Subroutine2

   Maximum stack usage in bytes:

     Function      EXT_STACK PSTACK XSTACK
     --------      --------- ------ ------
     ocx_event            1      0      0
     ocx_init             4      0      0
     ocx_msg              2      0      0
       -> deal_msg        4      0      0


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     ocx_ctl           6
     ocx_init         37
     ?Subroutine2      6
     ?Subroutine1      9
     ocx_event        30
     ?Subroutine0      7
     ocx_msg          36

 
 125 bytes in segment BANKED_CODE
   6 bytes in segment XDATA_Z
 
 125 bytes of CODE  memory
   6 bytes of XDATA memory

Errors: none
Warnings: none
