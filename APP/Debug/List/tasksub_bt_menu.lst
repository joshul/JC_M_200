##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   23/Feb/2016  10:53:43 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  banked                                            #
#    Data model         =  large                                             #
#    Calling convention =  extended stack reentrant                          #
#    Constant location  =  code                                              #
#    Extended stack     =  enabled                                           #
#    Dptr setup         =  1,16                                              #
#    Source file        =  E:\新唐\6687G\APP\task\sub\tasksub_bt_menu.c      #
#    Command line       =  -I "C:\Program Files\IAR Systems\Embedded         #
#                          Workbench 4.05 Evaluation version\8051\INC\" -I   #
#                          "C:\Program Files\IAR Systems\Embedded Workbench  #
#                          4.05 Evaluation version\8051\INC\CLIB\" -I        #
#                          E:\新唐\6687G\APP\api\ -I                         #
#                          E:\新唐\6687G\APP\display\ -I                     #
#                          E:\新唐\6687G\APP\display\lcd\ -I                 #
#                          E:\新唐\6687G\APP\display\lcdseg\ -I              #
#                          E:\新唐\6687G\APP\display\led\ -I                 #
#                          E:\新唐\6687G\APP\display\ledseg\ -I              #
#                          E:\新唐\6687G\APP\display\no\ -I                  #
#                          E:\新唐\6687G\APP\config\ -I                      #
#                          E:\新唐\6687G\APP\common\ -I                      #
#                          E:\新唐\6687G\APP\task\ -I                        #
#                          E:\新唐\6687G\APP\user\ -I                        #
#                          E:\新唐\6687G\APP\user\mp3res\ -I                 #
#                          E:\新唐\6687G\APP\btstack\ -I                     #
#                          E:\新唐\6687G\APP\user\user_config\ -I            #
#                          E:\新唐\6687G\APP\user\user_iis\ -lC              #
#                          E:\新唐\6687G\APP\Debug\List\ -o                  #
#                          E:\新唐\6687G\APP\Debug\Obj\ -e -z9 --debug       #
#                          --core=plain --dptr=16,1 --data_model=large       #
#                          --code_model=banked --calling_convention=ext_stac #
#                          k_reentrant --place_constants=code                #
#                          --nr_virtual_regs 20 --extended_stack             #
#                          E:\新唐\6687G\APP\task\sub\tasksub_bt_menu.c      #
#    List file          =  E:\新唐\6687G\APP\Debug\List\tasksub_bt_menu.lst  #
#    Object file        =  E:\新唐\6687G\APP\Debug\Obj\tasksub_bt_menu.r51   #
#                                                                            #
#                                                                            #
##############################################################################

E:\新唐\6687G\APP\task\sub\tasksub_bt_menu.c
      1          #if IS_LCD_DISPLAY
      2          
      3          #ifdef TASK_SUB
      4          #include "user_bt_pbap.h"
      5          
      6          u8 *bt_tmp = (u8 *)filename;    // 注意：用filename是为了节省ram
      7          
      8          #define BT_PHONEBOOK_ITEM_NUM    5
      9          #define CONTACTS_LEN            (40/3*2+24*2+2+2+1)
     10          IAR_XDATA_A u8 phonebook_disp_buf[3][CONTACTS_LEN] @"BT_PB_DISP_BUF";
     11          
     12          #pragma constseg = BT_MENU_DISP_PARAM
     13          string IAR_CONST tbl_bt_menu_const[] = {
     14              STR_MAIN_BT,
     15              STR_BT_RECONNECT,
     16          #if BT_PHONE_BOOK_EN
     17              STR_BT_PHONEBOOK,
     18          #endif
     19              //STR_BT_LIST_CONNECTED,
     20              STR_MENU_EQ,
     21              STR_BT_DEL_PAIRED,
     22              STR_BT_INFO,
     23              STR_BACK_MENU,
     24              STR_MENU_EXIT,
     25              STR_BT_DISCONNECT,
     26          };
     27          
     28          #pragma constseg = "LIST_CONTENT"
     29          string IAR_CONST tbl_bt_phonebook_const[] = {
     30              STR_BT_PHONEBOOK,
     31              STR_BT_CONTACTS,
     32              STR_BT_SYNC_CONTACTS,
     33              STR_BT_DELETE_ALL_CONTACTS,
     34              STR_MENU_EXIT,
     35          };
     36          #pragma constseg=default
     37          
     38          enum{
     39              ITEM_PHONEBOOK_CONTACTS,
     40              ITEM_PHONEBOOK_SYNC_CONTACTS,
     41              ITEM_PHONEBOOK_DELETE_ALL_CONTACTS,
     42              ITEM_PHONEBOOK_EXIT,
     43          };
     44          
     45          __no_init __root string tbl_bt_menu[BT_MENU_ITEM_NUM] @ "SbcPaired";
     46          void task_bt_deal_msg_10s(void);
     47          
     48          //蓝牙地址转字符串
     49          #pragma location="BT_MENU_DISP"
     50          void addr_to_string(u8 *dst, u8 const *src)
     51          {
     52              u8 addr_len;
     53              for(addr_len=6; addr_len>0; addr_len--) {
     54                  *dst++ = hex_to_char(*(src+addr_len-1)>>4);
     55                  *dst++ = hex_to_char(*(src+addr_len-1)&0x0f);
     56                  //*dst++ = ':';
     57              }
     58              *dst = '\0';
     59          }
     60          
     61          //显示设备信息
     62          #pragma location="BT_MENU_DISP"
     63          void task_bt_display_device(u8 show_time)
     64          {
     65              draw_clear();
     66              disp_menu(STR_BT_INFO,0,0, 0,ME_CENTER);
     67              line_update(0);
     68              memset(bt_tmp, 0, sizeof(bt_tmp));
     69              //准备蓝牙名字
     70              bt_tmp[0]='N';
     71              bt_tmp[1]='a';
     72              bt_tmp[2]='m';
     73              bt_tmp[3]='e';
     74              bt_tmp[4]=':';
     75              btinfo_get_name(bt_tmp+5);
     76              bt_name_to_unicode(bt_tmp);
     77              move_ctl.name_wide=bt_name_len(bt_name_unicode);
     78              if(move_ctl.name_wide>96) {
     79                  move_ctl.move_flag=1;
     80              }else {
     81                  move_ctl.move_flag=0;
     82              }
     83              move_ctl.name_x=0;
     84              //准备蓝牙地址
     85              bt_tmp[0] = 'A';
     86              bt_tmp[1] = 'd';
     87              bt_tmp[2] = 'r';
     88              bt_tmp[3] = ':';
     89              btinfo_get_addr(bt_tmp+21);
     90              addr_to_string(bt_tmp+4, bt_tmp+21);
     91              line_clear();
     92              task_bt_disp_name(3);
     93              disp_text((char *)bt_tmp, 0, 0, 1);
     94              line_update(5);
     95              ocx_show_cnt = 0;
     96              while(1)
     97              {
     98                  if(move_ctl.move_flag) {
     99                      task_bt_disp_name(3);
    100                  }
    101                  u8 msg = get_msg();
    102                  if(msg == KU_OK || msg == KU_BACK || msg == KU_PREV || msg == KU_NEXT || msg == KU_PLAY_POWER)
    103                      break;
    104                  if(show_time && ocx_show_cnt >= show_time)
    105                      break;
    106                  deal_msg(msg);
    107                  if(msg == KL_PLAY_POWER) {
    108                      task_ctl.work_sta = TASK_EXIT;
    109                      return;
    110                  }
    111              }
    112          }
    113          
    114          #pragma location="LIST_BOX_A_SEG"
    115          u8 *phonebook_buf_get(u16 index, u8 cnt)
    116          {
    117              u8 i,j;
    118              u8 count = (phonebook_total_num > cnt)? cnt : phonebook_total_num;
    119              memset(phonebook_disp_buf, 0, sizeof(phonebook_disp_buf));
    120              for(i=0; i<count; i++){
    121                  spi_phonebook_read(phonebook_name_number, index+i);
    122                  j = utf8_to_utf16(phonebook_disp_buf[i], phonebook_name_number, 40);
    123                  phonebook_disp_buf[i][j] = ':';                     //name:telephone number
    124                  phonebook_disp_buf[i][j+1] = 0x00;
    125                  utf8_to_utf16(&phonebook_disp_buf[i][j+2], &phonebook_name_number[40], 24);
    126                  phonebook_disp_buf[i][CONTACTS_LEN-3] = 0x00;       //字符串结束符'\0'
    127                  phonebook_disp_buf[i][CONTACTS_LEN-2] = 0x00;
    128                  phonebook_disp_buf[i][CONTACTS_LEN-1] = FB_UNICODE; //unicode encode flag
    129                  //printf("Read_PB_Disp:%s:%s\n",phonebook_name_number,&phonebook_name_number[40]);
    130                  //printf_array(phonebook_disp_buf[i], CONTACTS_LEN);
    131              }
    132              return phonebook_disp_buf[0];
    133          }
    134          
    135          //蓝牙菜单显示:param,0,蓝牙未连接时调用，1，蓝牙连接时调用
    136          #pragma location="BT_MENU_DISP"
    137          void task_bt_menu(void)
    138          {
    139              u8 index,param = 0;
    140          #if BT_PHONE_BOOK_EN
    141              u8 i;
    142              u8 *phonebook_last_bt_addr = bt_tmp;        //借用 bt_tmp
    143              u8 *phonebook_current_bt_addr = bt_tmp+6;
    144          #endif
    145          
    146              memcpy(tbl_bt_menu,(u8 *)tbl_bt_menu_const,BT_MENU_ITEM_NUM*2);
    147              if(sys_ctl.bt_sta >= BT_STA_CONNECTED) {   //蓝牙已连接
    148                  tbl_bt_menu[1] = tbl_bt_menu_const[BT_MENU_ITEM_NUM];
    149                  param = 1;
    150              }
    151              index = listbox(0, BT_MENU_ITEM_NUM, NULL, (u16)tbl_bt_menu, LIST_TIME);
    152              switch (index) {
    153              case ITEM_BT_CON:   //  最近设备重连或断开蓝牙
    154                  if(param == 0) {
    155                      bt_connect();       // 重新连接
    156                  } else {
    157                      bt_disconnect();    // 断开连接
    158                  }
    159                  break;
    160          #if BT_PHONE_BOOK_EN
    161              case ITEM_BT_PHONEBOOK:
    162                  if(sys_ctl.bt_sta < BT_STA_CONNECTED){
    163                      msgbox(STR_BT_NOT_LINK, NULL, MSGBOX_TIME*2);
    164                      break;
    165                  }
    166                  sys_param_read(phonebook_last_bt_addr, PARAM_PHONEBOOK_BT_ADDR, 6);
    167                  bt_get_linkaddr(phonebook_current_bt_addr);
    168          
    169                  index = listbox(0, BT_PHONEBOOK_ITEM_NUM, NULL, (u16)tbl_bt_phonebook_const, LIST_TIME);
    170                  if(index == ITEM_PHONEBOOK_CONTACTS){
    171                      if(!phonebook_total_num || memcmp(phonebook_last_bt_addr, phonebook_current_bt_addr, 6)){
    172                          msgbox(STR_BT_NO_CONTACTS, NULL, MSGBOX_TIME*4);
    173                      } else {
    174                          u16 contacts_index = listboxa(0, phonebook_total_num+1, NULL, CONTACTS_LEN, (u32)&phonebook_buf_get);
    175                          if(contacts_index < phonebook_total_num){
    176                              spi_phonebook_read(phonebook_name_number, contacts_index);
    177                              memset(phonebook_name_number, 0, 40);
    178                              phonebook_name_number[0] = 'A';
    179                              phonebook_name_number[1] = 'T';
    180                              phonebook_name_number[2] = 'D';
    181                              for(i=0; i<24; i++){
    182                                  if(phonebook_name_number[40+i] == 0){
    183                                      break;
    184                                  }
    185                              }
    186                              memcpy(&phonebook_name_number[3], &phonebook_name_number[40], i);
    187                              phonebook_name_number[3+i] = ';';
    188                              phonebook_name_number[3+i+1] = '\r';
    189                              bt_send_atcmd((char *)phonebook_name_number);
    190                              //u8 hsf_send_atcmd(u8 *str, u16 len);
    191                              //hsf_send_atcmd((u8 *)phonebook_name_number,3+i+2);
    192                              //printf("call:%s\n",&phonebook_name_number[3]);
    193                              for(u8 j=0; j<i; j++){  //借用 t_bt_ring.num_buf 保存去电号码用于显示
    194                                  t_bt_ring.num_buf[j] = phonebook_name_number[3+j]-0x30;
    195                              }
    196                              set_num_len(i);
    197                          }
    198                      }
    199                  } else if (index == ITEM_PHONEBOOK_SYNC_CONTACTS) {
    200                      spi_phonebook_erase();
    201                      phonebook_total_num = 0;
    202                      sys_param_write16(PARAM_PHONEBOOK_NUM, phonebook_total_num);
    203                      if(phonebook_get_start(0)){
    204                          bool sync_contacts_stop_flag = 0;
    205                          sync_contacts_wait();
    206                          while(!IsPBAPInIdleMode()){
    207                              WATCHDOG_CLR();
    208                              comm_event();
    209                              u8 msg = get_msg();
    210                              if(msg == KL_PLAY){     //长按PLAY键中止电话本联系人获取
    211                                  PhonebookStop();
    212                                  sync_contacts_stop_flag = 1;
    213                                  break;
    214                              } else if(msg == QSYSTEM_1S) {
    215                                  deal_msg(msg);
    216                              } else if(msg == QSYSTEM_10S) {
    217                                  task_bt_deal_msg_10s();
    218                              } else if(msg >= 0x6d && msg <= 0x7e) { //重要的系统消息保留下来等待退出后处理
    219                                  put_msg(msg);
    220                              }
    221                          }
    222                          if(!sync_contacts_stop_flag){
    223                              if(phonebook_total_num){
    224                                  msgbox(STR_BT_SYNC_SUCCESS, NULL, MSGBOX_TIME*2);
    225                              } else {
    226                                  msgbox(STR_BT_SYNC_FAIL, NULL, MSGBOX_TIME*2);
    227                              }
    228                          } else {
    229                              msgbox(STR_BT_SYNC_STOP, NULL, MSGBOX_TIME*2);
    230                          }
    231                          if(phonebook_total_num){
    232                              if(memcmp(phonebook_last_bt_addr, phonebook_current_bt_addr, 6)){
    233                                  sys_param_write(phonebook_current_bt_addr, PARAM_PHONEBOOK_BT_ADDR, 6);
    234                                  //printf("save_pb_addr\n");
    235                              }
    236                          }
    237                      } else {
    238                          msgbox(STR_BT_SYNC_FAIL, NULL, MSGBOX_TIME*2);
    239                      }
    240                  } else if (index == ITEM_PHONEBOOK_DELETE_ALL_CONTACTS) {
    241                      if(msgbox(STR_BT_CONFIRM_DELETE_CONTACTS, MB_YESNO, 0)){
    242                          phonebook_total_num = 0;
    243                          sys_param_write16(PARAM_PHONEBOOK_NUM, phonebook_total_num);
    244                          msgbox(STR_BT_DELETE_CONTACTS_SUCCESS, NULL, MSGBOX_TIME*2);
    245                      }
    246                  }
    247                  break;
    248          #endif
    249           /* case ITEM_BT_LIST:  //连接设备历史列表
    250          
    251                  break;*/
    252              case ITEM_BT_EQ:    //EQ调节
    253                  index = listbox(sys_ctl.eq_num, MUSIC_EQ_ITEM_NUM, LB_EQ, (u16)tbl_music_eq, LIST_TIME);
    254                  user_set_eq(index);
    255                  music_eq(sys_ctl.eq_num);
    256                  break;
    257              case ITEM_BT_DEL_PAIRED:    //删除配对信息
    258                  bt_get_linkaddr(bt_tmp);
    259                  bt_delete_link(bt_tmp);
    260                  break;
    261              case ITEM_BT_INFO:          //设备信息
    262                  task_bt_display_device(LIST_TIME);
    263                  break;
    264              case ITEM_BTMENU_BACK:
    265                  task_ctl.work_sta = TASK_EXIT;      //退出
    266                  break;
    267              }
    268              t_bt.updata_flag = 1;
    269          }
    270          
    271          #pragma location="BT_MENU_DISP"
    272          void tasksub_bt_menu_enter(void)
    273          {
    274          
    275          }
    276          
    277          #pragma location="BT_MENU_DISP"
    278          void tasksub_bt_menu_exit(void)
    279          {
    280          
    281          }
    282          
    283          #pragma location="BT_MENU_DISP"
    284          void tasksub_bt_menu_event(void)
    285          {
    286          
    287          }
    288          
    289          #pragma location="BT_MENU_DISP"
    290          void task_bt_menu_deal_msg(u8 msg)
    291          {
    292          
    293          }
    294          
    295          #pragma location="BT_MENU_DISP"
    296          void tasksub_bt_menu_loop(void)
    297          {
    298              task_bt_menu();
    299          }
    300          
    301          #pragma location="BT_MENU_DISP"
    302          void tasksub_bt_menu(void)
    303          {
    304             // printf("tasksub_bt_menu\n");
    305              tasksub_bt_menu_enter();
    306              tasksub_bt_menu_loop();
    307              tasksub_bt_menu_exit();
    308              //printf("tasksub_bt_menu exit\n");
    309          }
    310          
    311          #endif
    312          #endif


   Segment part sizes:

     Function/Label Bytes
     -------------- -----

 
 
 0 bytes of memory

Errors: none
Warnings: none
