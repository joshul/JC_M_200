##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   22/Jun/2016  18:28:00 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  banked                                            #
#    Data model         =  large                                             #
#    Calling convention =  extended stack reentrant                          #
#    Constant location  =  code                                              #
#    Extended stack     =  enabled                                           #
#    Dptr setup         =  1,16                                              #
#    Source file        =  E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\user\u #
#                          ser_fm\user_fm_bk1080.c                           #
#    Command line       =  -I "C:\Program Files\IAR Systems\Embedded         #
#                          Workbench 4.05 Evaluation version\8051\INC\" -I   #
#                          "C:\Program Files\IAR Systems\Embedded Workbench  #
#                          4.05 Evaluation version\8051\INC\CLIB\" -I        #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\api\   #
#                          -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\dis #
#                          play\ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\A #
#                          PP\display\lcd\ -I E:\Juchen\CW6687G\JC_M_328_201 #
#                          60617_P0\APP\display\lcdseg\ -I                   #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\displa #
#                          y\led\ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\ #
#                          APP\display\ledseg\ -I E:\Juchen\CW6687G\JC_M_328 #
#                          _20160617_P0\APP\display\no\ -I                   #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\config #
#                          \ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\c #
#                          ommon\ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\ #
#                          APP\task\ -I E:\Juchen\CW6687G\JC_M_328_20160617_ #
#                          P0\APP\user\ -I E:\Juchen\CW6687G\JC_M_328_201606 #
#                          17_P0\APP\user\mp3res\ -I                         #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\btstac #
#                          k\ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\ #
#                          user\user_config\ -I E:\Juchen\CW6687G\JC_M_328_2 #
#                          0160617_P0\APP\user\user_iis\ -lC                 #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\Debug\ #
#                          List\ -o E:\Juchen\CW6687G\JC_M_328_20160617_P0\A #
#                          PP\Debug\Obj\ -e -z9 --debug --core=plain         #
#                          --dptr=16,1 --data_model=large                    #
#                          --code_model=banked --calling_convention=ext_stac #
#                          k_reentrant --place_constants=code                #
#                          --nr_virtual_regs 20 --extended_stack             #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\user\u #
#                          ser_fm\user_fm_bk1080.c                           #
#    List file          =  E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\Debug\ #
#                          List\user_fm_bk1080.lst                           #
#    Object file        =  E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\Debug\ #
#                          Obj\user_fm_bk1080.r51                            #
#                                                                            #
#                                                                            #
##############################################################################

E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\user\user_fm\user_fm_bk1080.c
      1          /*--------------------------------------------------------------------------*/
      2          /**@file BK1080.C
      3          @brief FM模块QN8035驱动
      4          @details FM模块QN8035的驱动函数
      5          @author LZZ
      6          @date 2010-08-17
      7          @note 通过宏定义来选择驱动方式
      8          */
      9          /*----------------------------------------------------------------------------*/
     10          
     11          #include "include.h"
     12          #include "user_fm.h"
     13          
     14          #if (FM_TYPE == FM_BK1080)
     15          
     16          /*
     17          此项宏定义说明是使用何种FM驱动方式
     18          USE_P33_AS_FM_CLOCK，指使用P33作为时钟信号
     19          USE_32K_CRYSTAL_AS_FM_CLOCK，使用外部32K,作为驱动信号
     20          USE_MODULE，使用模块,FM芯片自起振晶振属于这种模式
     21          */
     22          
     23          #define USE_P33_AS_FM_CLOCK          1
     24          #define USE_32K_CRYSTAL_AS_FM_CLOCK  2
     25          #define USE_MODULE                   3 //KT 没有模块
     26          #define _SHARE_CRYSTAL_24MHz_                   4 //共晶振
     27          #define _SHARE_CRYSTAL_12MHz_                   5//KT 没有模块
     28          
     29          #define FM_CLOCK _SHARE_CRYSTAL_12MHz_//32K
     30          
     31          void bk1080_mute(void);
     32          void bk1080_unmute(void);
     33          
     34          #if (FM_CLOCK == USE_MODULE)
     35          #define BK1080_REG2                 0x5201
     36          #else
     37          #define BK1080_REG2                 0x4201
     38          #endif
     39          
     40          #define BK1080_REG_MUTE             0x4000
     41          #define BK1080_REG3                 0x0000
     42          #define BK1080_REG_TUNE             0x8000
     43          #define BK1080_REG_SEEK             0x0100
     44          #define BK1080_REG_OFF              0x0041
     45          
     46          #pragma constseg="FM_INIT_CONST_BK1080"
     47          IAR_CONST u16 bk1080_init_tbl[34] =
     48          {
     49              0x0006,	//REG0
     50              0x1080,	//REG1
     51              //#if (FM_CLOCK == USE_MODULE)
     52              //   0x5201,///Internal Clock  //模块  32.768K    //REG2
     53              //#else
     54              BK1080_REG2,	// External Clock   //芯片 32k GONG JING ZHEN    //REG2
     55              //#endif
     56              0x0000,	//REG3
     57              0x00C0,	//REG4
     58              0x0a1f,//0x0a1b,//0x0a1b,	//REG5
     59              0x002E,	//REG6//0x002E,
     60              0x02FF,	//REG7
     61              0x5B11,	//REG8
     62              0x0000,	//REG9
     63              0x411E,	//REG10
     64              0x0000,	//REG11
     65              0xCE00,	//REG12
     66              0x0000,	//REG13
     67              0x0000,	//REG14
     68              0x1000,	//REG15
     69          #if(FM_CLOCK==_SHARE_CRYSTAL_24MHz_)
     70              0x2DC6,//REG16
     71              0x8000,//REG17
     72          #elif(FM_CLOCK == _SHARE_CRYSTAL_12MHz_)
     73              0x16E3,//REG16
     74              0x8000,//REG17
     75          #else
     76              0x0010,	//REG16
     77              0x0000,	//REG17
     78          #endif
     79              0x13FF,	//REG18
     80              0x9852,	//REG19
     81              0x0000,	//REG20
     82              0x0000,	//REG21
     83              0x0008,	//REG22
     84              0x0000,	//REG23
     85              0x51E0,	//REG24
     86          #if(FM_CLOCK==_SHARE_CRYSTAL_24MHz_)
     87              0xA8DC,//REG25
     88          #elif (FM_CLOCK == _SHARE_CRYSTAL_12MHz_)
     89              0x28DC,//REG25
     90          #else
     91              0x28BC,//0x28DC,	//REG25
     92          #endif
     93              0x2645,	//REG26
     94              0x00E4,	//REG27
     95              0x1CD8,	//REG28
     96              0x3A50,	//REG29
     97              0xEAF0,	//REG30
     98              0x3000,	//REG31
     99              0x0200,//0x0000,	//REG32
    100              0x0000	//REG33
    101          };
    102          #pragma constseg=default
    103          
    104          
    105          #pragma location="FM_SEG_BK1080"
    106          void bk1080_Write_reg(u8 reg, u16 dat)
    107          {
    108              iic_start();
    109              iic_sendbyte(0x80);
    110              iic_getack();
    111              iic_sendbyte(reg*2);
    112              iic_getack();
    113              iic_sendbyte(dat>>8);
    114              iic_getack();
    115              iic_sendbyte(dat);
    116              iic_getack();
    117              iic_stop();
    118          }
    119          
    120          #pragma location="FM_SEG_BK1080"
    121          u16 bk1080_Read_reg(u16 reg)
    122          {
    123              u16 temp;
    124              iic_start();
    125              iic_sendbyte(0x80);
    126              iic_getack();
    127          
    128              iic_sendbyte(reg*2+1);
    129              iic_getack();
    130              temp = iic_getbyte();
    131              temp <<= 8;
    132              iic_sendack();
    133              temp |= iic_getbyte();
    134              iic_sendnack();
    135              iic_stop();
    136              return temp;
    137          }
    138          
    139          
    140          
    141          #pragma location="FM_SEG_BK1080"
    142          void fm_bk1080_write_a(u16 *buf, u8 len)
    143          {
    144              u8 i;
    145              for (i=0; i!=len; i++) {
    146                  bk1080_Write_reg(i, buf[i]);
    147              }
    148          }
    149          
    150          #pragma location="FM_INIT_BK1080"
    151          void fm_bk1080_write_tbl(void *tbl_init, u8 len)
    152          {
    153              memcpy((void *)0x8000, (void *)tbl_init, len<<1);
    154              fm_bk1080_write_a((u16 *)0x8000, len);
    155          }
    156          
    157          #pragma location="FM_INIT_BK1080"
    158          void bk1080_init(u16 *tbl_init, u8 tbl_size)
    159          {
    160              fm_bk1080_write_tbl(tbl_init, tbl_size);
    161              delay_5ms(20);
    162          }
    163          
    164          
    165          
    166          /*----------------------------------------------------------------------------*/
    167          /**@brief FM模块BK1080设置频率
    168          @param freq 要设置的频率
    169          @return 无
    170          @note 频率范围为875~1080
    171          */
    172          /*----------------------------------------------------------------------------*/
    173          #pragma location="FM_SEG_BK1080"
    174          void bk1080_set_freq(u16 freq)
    175          {
    176              freq = (freq - 8750) / 10;// freq = (freq - 8150) / 10;//freq = (freq - 7600) / 10;
    177              bk1080_Write_reg(0x02,BK1080_REG2 & (~BK1080_REG_SEEK));
    178              bk1080_Write_reg(0x03,BK1080_REG3 & (~BK1080_REG_TUNE));//BK1080_REG2
    179              bk1080_Write_reg(0x03, freq | BK1080_REG_TUNE);
    180              delay_5ms(10); //delay_5ms(10);                      //++ changed, SO @ 2010-08-26, really need 100ms ?
    181          }
    182          
    183          
    184          
    185          /*----------------------------------------------------------------------------*/
    186          /**@brief FM模块BK1080关闭
    187          @param 无
    188          @return 无
    189          @note
    190          */
    191          /*----------------------------------------------------------------------------*/
    192          
    193          #pragma location="FM_INIT_BK1080"
    194          void fm_bk1080_off(void)
    195          {
    196              bk1080_Write_reg(0x02,BK1080_REG2 | BK1080_REG_OFF);
    197          }
    198          
    199          /*----------------------------------------------------------------------------*/
    200          /**@brief FM模块BK1080自动搜台
    201          @param freq 要搜索的频率
    202          @return 指定的频率下有台返回1，否则返回0
    203          @note
    204          */
    205          /*----------------------------------------------------------------------------*/
    206          #pragma location="FM_SEG_BK1080"
    207          bool fm_bk1080_set_freq(u16 freq)
    208          {
    209              static u16 g_freq_deviation_last=0;
    210             // static u16 last_fre=0;
    211              u16 cur_freq_deviation;
    212              u16 reg;
    213              bk1080_mute();
    214              //
    215              bk1080_set_freq(freq);
    216              delay_5ms(24);//24    // delay_5ms(16);                       //wait 55ms
    217              reg = bk1080_Read_reg(0x07);
    218              cur_freq_deviation = reg>>4;
    219              //bk1080_unmute();
    220              if( (reg & 0xf) <2)//2  //SNR 搜台较少可减小该值，假台较多可增大该值
    221              {
    222                  g_freq_deviation_last=cur_freq_deviation;
    223                  return 0;//false
    224              }
    225              reg = bk1080_Read_reg(0x0A);
    226              if(reg & 0x1000)    //check AFCRL bit12	
    227              {
    228                  g_freq_deviation_last=cur_freq_deviation;
    229                  return 0;
    230              }
    231              if((reg & 0x00FF)<10)//10    //RSSI 搜台较少可减小该值，假台较多可增大该值
    232              {
    233                  g_freq_deviation_last=cur_freq_deviation;
    234                  return 0;
    235              }
    236              if( (cur_freq_deviation>=250)&&(cur_freq_deviation<=(0xfff-250)))//250  搜台较少可减小该值，假台较多可增大该值
    237              {
    238                  g_freq_deviation_last=cur_freq_deviation;
    239                  return 0;
    240              }
    241              if(freq>=8760)//if( (freq>=8760)&&( (freq-last_fre)==10) )
    242              {
    243                  if(g_freq_deviation_last&0x800)
    244                  {
    245                      g_freq_deviation_last=cur_freq_deviation;
    246                      return 0;
    247                  }
    248                  if(g_freq_deviation_last<50)//50
    249                  {
    250                      g_freq_deviation_last=cur_freq_deviation;
    251                      return 0;
    252                  }
    253              }
    254              g_freq_deviation_last=cur_freq_deviation;
    255              bk1080_unmute();
    256              return 1;
    257          }
    258          
    259          #pragma location="FM_SEG_BK1080"
    260          void bk1080_mute(void)
    261          {
    262              bk1080_Write_reg(0x02, (BK1080_REG2 | BK1080_REG_MUTE));
    263          }
    264          
    265          #pragma location="FM_SEG_BK1080"
    266          void bk1080_unmute(void)
    267          {
    268              bk1080_Write_reg(0x02, (BK1080_REG2 & (~BK1080_REG_MUTE)));
    269          }
    270          
    271          /*----------------------------------------------------------------------------*/
    272          /**@brief FM模块BK1080检测
    273          @param 无
    274          @return 检测到BK1080模块返回1，否则返回0
    275          @note
    276          */
    277          /*----------------------------------------------------------------------------*/
    278          #pragma location="FM_INIT_BK1080"
    279          bool fm_bk1080_init(void)
    280          {
    281              u16 temp;
    282              for(u8 i=0; i<3; i++){      //IIC与其他引脚复用时 FM ID 改为读三次比较保险
    283                  temp = bk1080_Read_reg(0x01);
    284                  if(temp == 0x1080){
    285                      bk1080_init((u16 *)bk1080_init_tbl, 34);
    286                      return true;
    287                  }
    288              }
    289              return false;
    290          }
    291          
    292          #endif


   Segment part sizes:

     Function/Label Bytes
     -------------- -----

 
 
 0 bytes of memory

Errors: none
Warnings: none
