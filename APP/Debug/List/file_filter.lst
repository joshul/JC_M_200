##############################################################################
#                                                                            #
# IAR 8051 C/C++ Compiler V7.20H/W32                   22/Jun/2016  18:27:51 #
# Copyright 2004-2006 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Core               =  plain                                             #
#    Code model         =  banked                                            #
#    Data model         =  large                                             #
#    Calling convention =  extended stack reentrant                          #
#    Constant location  =  code                                              #
#    Extended stack     =  enabled                                           #
#    Dptr setup         =  1,16                                              #
#    Source file        =  E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\user\f #
#                          ile_filter.c                                      #
#    Command line       =  -I "C:\Program Files\IAR Systems\Embedded         #
#                          Workbench 4.05 Evaluation version\8051\INC\" -I   #
#                          "C:\Program Files\IAR Systems\Embedded Workbench  #
#                          4.05 Evaluation version\8051\INC\CLIB\" -I        #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\api\   #
#                          -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\dis #
#                          play\ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\A #
#                          PP\display\lcd\ -I E:\Juchen\CW6687G\JC_M_328_201 #
#                          60617_P0\APP\display\lcdseg\ -I                   #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\displa #
#                          y\led\ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\ #
#                          APP\display\ledseg\ -I E:\Juchen\CW6687G\JC_M_328 #
#                          _20160617_P0\APP\display\no\ -I                   #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\config #
#                          \ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\c #
#                          ommon\ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\ #
#                          APP\task\ -I E:\Juchen\CW6687G\JC_M_328_20160617_ #
#                          P0\APP\user\ -I E:\Juchen\CW6687G\JC_M_328_201606 #
#                          17_P0\APP\user\mp3res\ -I                         #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\btstac #
#                          k\ -I E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\ #
#                          user\user_config\ -I E:\Juchen\CW6687G\JC_M_328_2 #
#                          0160617_P0\APP\user\user_iis\ -lC                 #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\Debug\ #
#                          List\ -o E:\Juchen\CW6687G\JC_M_328_20160617_P0\A #
#                          PP\Debug\Obj\ -e -z9 --debug --core=plain         #
#                          --dptr=16,1 --data_model=large                    #
#                          --code_model=banked --calling_convention=ext_stac #
#                          k_reentrant --place_constants=code                #
#                          --nr_virtual_regs 20 --extended_stack             #
#                          E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\user\f #
#                          ile_filter.c                                      #
#    List file          =  E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\Debug\ #
#                          List\file_filter.lst                              #
#    Object file        =  E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\Debug\ #
#                          Obj\file_filter.r51                               #
#                                                                            #
#                                                                            #
##############################################################################

E:\Juchen\CW6687G\JC_M_328_20160617_P0\APP\user\file_filter.c
      1          /*****************************************************************************
      2           * Module    : User
      3           * File      : file_filter.c
      4           * Author    : Hanny
      5           * Function  : 文件扫描过滤器
      6           *****************************************************************************/
      7          #include "include.h"
      8          #include "task.h"
      9          #include "task_music.h"
     10          
     11          #if MUSIC_ENCRYPT_EN
     12          extern u8 music_encrypt;
     13          #endif
     14          
     15          #pragma constseg="FILE_FILTER_CONST"
     16          #define MUSIC_EXT_NUM 3     //一共搜索3个扩展名

   \                                 In segment FILE_FILTER_CONST, align 1
     17          IAR_CONST char tbl_music_ext[MUSIC_EXT_NUM][4] = {"mp3", "wav", "wma"};
   \                     tbl_music_ext:
   \   000000   6D703300     DB "mp3"
   \   000004   77617600     DB "wav"
   \   000008   776D6100     DB "wma"

   \                                 In segment FILE_FILTER_CONST, align 1
     18          IAR_CONST char tbl_txt_ext[4] = "txt";
   \                     tbl_txt_ext:
   \   000000   74787400     DB "txt"
     19          //IAR_CONST char tbl_lrc_ext[4] = "lrc";

   \                                 In segment FILE_FILTER_CONST, align 1
     20          IAR_CONST char tbl_dir_record_name[] = "RECORD";
   \                     tbl_dir_record_name:
   \   000000   5245434F     DB "RECORD"
   \            524400  

   \                                 In segment FILE_FILTER_CONST, align 1
     21          IAR_CONST char tbl_bin_name[] = "APP";
   \                     tbl_bin_name:
   \   000000   41505000     DB "APP"

   \                                 In segment FILE_FILTER_CONST, align 1
     22          IAR_CONST char tbl_bin_ext[] = "BIN";
   \                     tbl_bin_ext:
   \   000000   42494E00     DB "BIN"
     23          //IAR_CONST char tbl_lrx_ext[] = "lrx";       //加密测试扩展名
     24          #pragma constseg=default
     25          
     26          #pragma constseg="LRC_FILTER_CONST"

   \                                 In segment LRC_FILTER_CONST, align 1
     27          IAR_CONST char tbl_lrc_ext[4] = "lrc";
   \                     tbl_lrc_ext:
   \   000000   6C726300     DB "lrc"
     28          #pragma constseg=default
     29          
     30          //固件升级Code文件过滤器
     31          #pragma location="FILE_FILTER_SEG"

   \                                 In segment FILE_FILTER_SEG, align 1, keep-with-next
     32          bool filter_binfile(void)
   \                     filter_binfile:
     33          {
   \   000000   C0..         PUSH    ?V0 + 0
   \   000002   C0..         PUSH    ?V0 + 1
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     34              //printf("fname:%s\n", file_info.fname);
     35              if(get_scan_dept() == 0) {
   \   000004                ; Setup parameters for call to function get_scan_dept
   \   000004   90....       MOV     DPTR,#(get_scan_dept & 0xffff)
   \   000007   74..         MOV     A,#((get_scan_dept >> 16) & 0xff)
   \   000009   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00000C   E9           MOV     A,R1
   \   00000D   702F         JNZ     ??filter_binfile_0
     36                  if (0 == memcmp(fat_file_opt.fname, (char *)tbl_bin_name,3) &&
     37                      0 == memcmp(fat_file_opt.fname+8, (char *)tbl_bin_ext, 3))
   \   00000F                ; Setup parameters for call to function mem_cmp
   \   00000F   7903         MOV     R1,#0x3
   \   000011   7C..         MOV     R4,#(tbl_bin_name & 0xff)
   \   000013   7D..         MOV     R5,#((tbl_bin_name >> 8) & 0xff)
   \   000015   7A..         MOV     R2,#((fat_file_opt + 33) & 0xff)
   \   000017   7B..         MOV     R3,#(((fat_file_opt + 33) >> 8) & 0xff)
   \   000019   12....       LCALL   mem_cmp & 0xFFFF
   \   00001C   EA           MOV     A,R2
   \   00001D   7001         JNZ     ??filter_binfile_1
   \   00001F   EB           MOV     A,R3
   \                     ??filter_binfile_1:
   \   000020   701C         JNZ     ??filter_binfile_0
   \   000022                ; Setup parameters for call to function mem_cmp
   \   000022   7903         MOV     R1,#0x3
   \   000024   7C..         MOV     R4,#(tbl_bin_ext & 0xff)
   \   000026   7D..         MOV     R5,#((tbl_bin_ext >> 8) & 0xff)
   \   000028   7A..         MOV     R2,#((fat_file_opt + 41) & 0xff)
   \   00002A   7B..         MOV     R3,#(((fat_file_opt + 41) >> 8) & 0xff)
   \   00002C   12....       LCALL   mem_cmp & 0xFFFF
   \   00002F   EA           MOV     A,R2
   \   000030   7001         JNZ     ??filter_binfile_2
   \   000032   EB           MOV     A,R3
   \                     ??filter_binfile_2:
   \   000033   7009         JNZ     ??filter_binfile_0
     38                  {
     39                      task_ctl.work_sta = TASK_UPDATE_FW;
   \   000035   7415         MOV     A,#0x15
   \   000037   90....       MOV     DPTR,#task_ctl
   \   00003A   F0           MOVX    @DPTR,A
     40                      return true;
   \   00003B   D3           SETB    C
   \   00003C   8001         SJMP    ??filter_binfile_3
     41                  }
     42              }
     43              return false;
   \                     ??filter_binfile_0:
   \   00003E   C3           CLR     C
   \                     ??filter_binfile_3:
   \   00003F   80..         SJMP    ??Subroutine1_0
     44          }

   \                                 In segment FILE_FILTER_SEG, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   D0..         POP     ?V0 + 3
   \   000002   D0..         POP     ?V0 + 2
   \                     ??Subroutine1_0:
   \   000004   D0..         POP     ?V0 + 1
   \   000006   D0..         POP     ?V0 + 0
   \   000008   02....       LJMP    ?BRET
     45          
     46          //返回文件起始簇
     47          #pragma location="FILE_FILTER_SEG"

   \                                 In segment FILE_FILTER_SEG, align 1, keep-with-next
     48          u32 get_sclust_addr(void)
   \                     get_sclust_addr:
     49          {
   \   000000   C0..         PUSH    ?V0 + 0
   \   000002   C0..         PUSH    ?V0 + 1
   \   000004   C0..         PUSH    ?V0 + 2
   \   000006   C0..         PUSH    ?V0 + 3
   \   000008                ; Saved register size: 4
   \   000008                ; Auto size: 0
     50              return fat_file.org_clust;//fat_file_opt.sclust;//fat_file.sclust;
   \   000008   90....       MOV     DPTR,#(fat_file + 4)
   \   00000B   78..         MOV     R0,#?V0 + 0
   \   00000D   12....       LCALL   ?L_MOV_X
   \   000010   AA..         MOV     R2,?V0 + 0
   \   000012   AB..         MOV     R3,?V0 + 1
   \   000014   AC..         MOV     R4,?V0 + 2
   \   000016   AD..         MOV     R5,?V0 + 3
   \   000018                REQUIRE ?Subroutine1
   \   000018                ; // Fall through to label ?Subroutine1
     51          }
     52          
     53          //判断文件是否为需要查找的文件
     54          #pragma location="FILE_FILTER_SEG"

   \                                 In segment FILE_FILTER_SEG, align 1, keep-with-next
     55          bool file_is_target_number(void)
   \                     file_is_target_number:
     56          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     57              if (fs_apiinfo.file_number == fs_apiinfo.file_count) {
   \   000000   90....       MOV     DPTR,#(fs_apiinfo + 2)
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F9           MOV     R1,A
   \   000008   90....       MOV     DPTR,#(fs_apiinfo + 4)
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   68           XRL     A,R0
   \   00000D   7003         JNZ     ??file_is_target_number_0
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   69           XRL     A,R1
   \                     ??file_is_target_number_0:
   \   000012   7003         JNZ     ??file_is_target_number_1
     58                  //smemcpy(fat_file.fname, file_info.fname, 12);  //保存文件名
     59                  //smemcpy(&fat_file.dir, &file_dir, sizeof(DIR));
     60                  //printf("%d: %s\n", fs_apiinfo.file_number, fat_file_opt.fname);
     61                  return true;
   \   000014   D3           SETB    C
   \   000015   8001         SJMP    ??file_is_target_number_2
     62              }
     63              return false;
   \                     ??file_is_target_number_1:
   \   000017   C3           CLR     C
   \                     ??file_is_target_number_2:
   \   000018   02....       LJMP    ?BRET
     64          }
     65          
     66          //所有文件的过滤器
     67          #pragma location="FILE_FILTER_SEG"

   \                                 In segment FILE_FILTER_SEG, align 1, keep-with-next
     68          bool file_filter_all(void)
   \                     file_filter_all:
     69          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     70              if (!f_attr_is_file(&fat_file_opt)) {
   \   000000                ; Setup parameters for call to function f_attr_is_file
   \   000000   7A..         MOV     R2,#(fat_file_opt & 0xff)
   \   000002   7B..         MOV     R3,#((fat_file_opt >> 8) & 0xff)
   \   000004   90....       MOV     DPTR,#(f_attr_is_file & 0xffff)
   \   000007   74..         MOV     A,#((f_attr_is_file >> 16) & 0xff)
   \   000009   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00000C   4003         JC      ??file_filter_all_0
     71                  return false;
   \   00000E   C3           CLR     C
   \   00000F   800B         SJMP    ??file_filter_all_1
     72              }
     73              fs_apiinfo.file_count++;
   \                     ??file_filter_all_0:
   \   000011   12....       LCALL   ?Subroutine0
     74              return file_is_target_number();
   \                     ??CrossCallReturnLabel_0:
   \   000014                ; Setup parameters for call to function file_is_target_number
   \   000014   90....       MOV     DPTR,#(file_is_target_number & 0xffff)
   \   000017   74..         MOV     A,#((file_is_target_number >> 16) & 0xff)
   \   000019   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \                     ??file_filter_all_1:
   \   00001C   02....       LJMP    ?BRET
     75          }

   \                                 In segment FILE_FILTER_SEG, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   90....       MOV     DPTR,#(fs_apiinfo + 4)
   \                     ??Subroutine0_0:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2401         ADD     A,#0x1
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3400         ADDC    A,#0x0
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   22           RET
     76          
     77          //转换为Unicode，并获取Unicode字串的长度
     78          #pragma location = "FAT_SEG"

   \                                 In segment FAT_SEG, align 1, keep-with-next
     79          u8 ustr_get(void *des, void *src)
   \                     ustr_get:
     80          {
   \   000000   7402         MOV     A,#0x2
   \   000002   12....       LCALL   ?FUNC_ENTER_SP
   \   000005                ; Saved register size: 5
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
     81              char *des1 = des;
   \   000009   EE           MOV     A,R6
   \   00000A   F8           MOV     R0,A
   \   00000B   EF           MOV     A,R7
   \   00000C   F9           MOV     R1,A
     82              char *src1 = src;
   \   00000D   EC           MOV     A,R4
   \   00000E   FA           MOV     R2,A
   \   00000F   ED           MOV     A,R5
   \   000010   FB           MOV     R3,A
     83              u8 len = 0;
   \   000011   75..00       MOV     ?V0 + 0,#0x0
     84              if (src1[FILE_NAME_FLAG] & FB_GBK) {
   \   000014   EA           MOV     A,R2
   \   000015   2463         ADD     A,#0x63
   \   000017   F582         MOV     DPL,A
   \   000019   EB           MOV     A,R3
   \   00001A   3400         ADDC    A,#0x0
   \   00001C   F583         MOV     DPH,A
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   A2E7         MOV     C,0xE0 /* A   */.7
   \   000021   5063         JNC     ??ustr_get_0
     85                  char ch;
     86                  u8 src_len = 0;
   \   000023   7C00         MOV     R4,#0x0
   \   000025   801C         SJMP    ??ustr_get_1
     87                  while ((ch = *src1) && src_len < (FILE_NAME_LEN-2)) {
     88                      len += 2;
     89                      *des1++ = *src1++;
     90                      if (ch & 0x80) {
     91                          *des1++ = *src1++;
   \                     ??ustr_get_2:
   \   000027   8A82         MOV     DPL,R2
   \   000029   8B83         MOV     DPH,R3
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   8882         MOV     DPL,R0
   \   00002E   8983         MOV     DPH,R1
   \   000030   F0           MOVX    @DPTR,A
   \   000031   8A82         MOV     DPL,R2
   \   000033   8B83         MOV     DPH,R3
   \   000035   A3           INC     DPTR
   \   000036   0A           INC     R2
   \   000037   AB83         MOV     R3,DPH
   \   000039   8882         MOV     DPL,R0
   \   00003B   8983         MOV     DPH,R1
   \   00003D   A3           INC     DPTR
   \   00003E   08           INC     R0
   \   00003F   A983         MOV     R1,DPH
     92                          src_len += 2;
   \   000041   0C           INC     R4
   \                     ??ustr_get_3:
   \   000042   0C           INC     R4
     93                      } else {
   \                     ??ustr_get_1:
   \   000043   8A82         MOV     DPL,R2
   \   000045   8B83         MOV     DPH,R3
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FD           MOV     R5,A
   \   000049   6056         JZ      ??ustr_get_4
   \   00004B   EC           MOV     A,R4
   \   00004C   C3           CLR     C
   \   00004D   9462         SUBB    A,#0x62
   \   00004F   5050         JNC     ??ustr_get_4
   \   000051   05..         INC     ?V0 + 0
   \   000053   05..         INC     ?V0 + 0
   \   000055   ED           MOV     A,R5
   \   000056   8882         MOV     DPL,R0
   \   000058   8983         MOV     DPH,R1
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   8A82         MOV     DPL,R2
   \   00005D   8B83         MOV     DPH,R3
   \   00005F   A3           INC     DPTR
   \   000060   AA82         MOV     R2,DPL
   \   000062   AB83         MOV     R3,DPH
   \   000064   8882         MOV     DPL,R0
   \   000066   8983         MOV     DPH,R1
   \   000068   A3           INC     DPTR
   \   000069   A882         MOV     R0,DPL
   \   00006B   A983         MOV     R1,DPH
   \   00006D   A2E7         MOV     C,0xE0 /* A   */.7
   \   00006F   40B6         JC      ??ustr_get_2
     94                          *des1++ = 0;
   \   000071   E4           CLR     A
   \   000072   F0           MOVX    @DPTR,A
   \   000073   A3           INC     DPTR
   \   000074   08           INC     R0
   \   000075   A983         MOV     R1,DPH
     95                          src_len++;
   \   000077   80C9         SJMP    ??ustr_get_3
     96                      }
     97                  }
     98              } else {
     99                  while ((src1[0] || src1[1]) && len < (FILE_NAME_LEN-2)) {
    100                      src1 += 2;
   \                     ??ustr_get_5:
   \   000079   EA           MOV     A,R2
   \   00007A   2402         ADD     A,#0x2
   \   00007C   0A           INC     R2
   \   00007D   0A           INC     R2
   \   00007E   EB           MOV     A,R3
   \   00007F   3400         ADDC    A,#0x0
   \   000081   FB           MOV     R3,A
    101                      len += 2;
   \   000082   05..         INC     ?V0 + 0
   \   000084   05..         INC     ?V0 + 0
    102                  }
   \                     ??ustr_get_0:
   \   000086   8A82         MOV     DPL,R2
   \   000088   8B83         MOV     DPH,R3
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   7004         JNZ     ??ustr_get_6
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   6007         JZ      ??ustr_get_7
   \                     ??ustr_get_6:
   \   000091   E5..         MOV     A,?V0 + 0
   \   000093   C3           CLR     C
   \   000094   9462         SUBB    A,#0x62
   \   000096   40E1         JC      ??ustr_get_5
    103                  smemcpy(des, src, len);
   \                     ??ustr_get_7:
   \   000098                ; Setup parameters for call to function smemcpy
   \   000098   A9..         MOV     R1,?V0 + 0
   \   00009A   EE           MOV     A,R6
   \   00009B   FA           MOV     R2,A
   \   00009C   EF           MOV     A,R7
   \   00009D   FB           MOV     R3,A
   \   00009E   12....       LCALL   smemcpy & 0xFFFF
    104              }
    105              return len;
   \                     ??ustr_get_4:
   \   0000A1   A9..         MOV     R1,?V0 + 0
   \   0000A3   7F02         MOV     R7,#0x2
   \   0000A5   02....       LJMP    ?BANKED_LEAVE_SP
    106          }
    107          
    108          //获取小写的扩展名
    109          #pragma location="FILE_FILTER_SEG"

   \                                 In segment FILE_FILTER_SEG, align 1, keep-with-next
    110          void get_ext_name(char *ext_name,FIL *hFile)
   \                     get_ext_name:
    111          {
   \   000000   EE           MOV     A,R6
   \   000001   C0E0         PUSH    A
   \   000003   EF           MOV     A,R7
   \   000004   C0E0         PUSH    A
   \   000006                ; Saved register size: 2
   \   000006                ; Auto size: 0
   \   000006   EA           MOV     A,R2
   \   000007   FE           MOV     R6,A
   \   000008   EB           MOV     A,R3
   \   000009   FF           MOV     R7,A
    112              smemcpy(ext_name, &hFile->fname[8], 3);
   \   00000A                ; Setup parameters for call to function smemcpy
   \   00000A   7903         MOV     R1,#0x3
   \   00000C   EC           MOV     A,R4
   \   00000D   2429         ADD     A,#0x29
   \   00000F   FC           MOV     R4,A
   \   000010   ED           MOV     A,R5
   \   000011   3400         ADDC    A,#0x0
   \   000013   FD           MOV     R5,A
   \   000014   12....       LCALL   smemcpy & 0xFFFF
    113              string_tolower(ext_name, 3);
   \   000017                ; Setup parameters for call to function string_tolower
   \   000017   7903         MOV     R1,#0x3
   \   000019   EE           MOV     A,R6
   \   00001A   FA           MOV     R2,A
   \   00001B   EF           MOV     A,R7
   \   00001C   FB           MOV     R3,A
   \   00001D   12....       LCALL   string_tolower & 0xFFFF
    114          }
   \   000020   D0E0         POP     A
   \   000022   FF           MOV     R7,A
   \   000023   D0E0         POP     A
   \   000025   FE           MOV     R6,A
   \   000026   02....       LJMP    ?BRET
    115          
    116          #pragma location="FILE_FILTER_SEG"

   \                                 In segment FILE_FILTER_SEG, align 1, keep-with-next
    117          bool file_is_music(char *ext_name)
   \                     file_is_music:
    118          {
   \   000000   7404         MOV     A,#0x4
   \   000002   12....       LCALL   ?FUNC_ENTER_SP
   \   000005                ; Saved register size: 7
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    119              u8 i;
    120              for (i=0; i!=MUSIC_EXT_NUM; i++) {
   \   000009   75..00       MOV     ?V0 + 0,#0x0
    121                  if (0 == memcmp(ext_name, (char *)(tbl_music_ext[i]), 3)) {
   \                     ??file_is_music_0:
   \   00000C                ; Setup parameters for call to function mem_cmp
   \   00000C   7903         MOV     R1,#0x3
   \   00000E   85....       MOV     ?V0 + 2,?V0 + 0
   \   000011   75..00       MOV     ?V0 + 3,#0x0
   \   000014   7402         MOV     A,#0x2
   \   000016   78..         MOV     R0,#?V0 + 2
   \   000018   12....       LCALL   ?S_SHL
   \   00001B   E5..         MOV     A,?V0 + 2
   \   00001D   24..         ADD     A,#(tbl_music_ext & 0xff)
   \   00001F   FC           MOV     R4,A
   \   000020   E5..         MOV     A,?V0 + 3
   \   000022   34..         ADDC    A,#((tbl_music_ext >> 8) & 0xff)
   \   000024   FD           MOV     R5,A
   \   000025   EE           MOV     A,R6
   \   000026   FA           MOV     R2,A
   \   000027   EF           MOV     A,R7
   \   000028   FB           MOV     R3,A
   \   000029   12....       LCALL   mem_cmp & 0xFFFF
   \   00002C   EA           MOV     A,R2
   \   00002D   7001         JNZ     ??file_is_music_1
   \   00002F   EB           MOV     A,R3
   \                     ??file_is_music_1:
   \   000030   7003         JNZ     ??file_is_music_2
    122                      return true;
   \   000032   D3           SETB    C
   \   000033   8009         SJMP    ??file_is_music_3
    123                  }
    124              }
   \                     ??file_is_music_2:
   \   000035   05..         INC     ?V0 + 0
   \   000037   7403         MOV     A,#0x3
   \   000039   65..         XRL     A,?V0 + 0
   \   00003B   70CF         JNZ     ??file_is_music_0
    125              return false;
   \   00003D   C3           CLR     C
   \                     ??file_is_music_3:
   \   00003E   7F04         MOV     R7,#0x4
   \   000040   02....       LJMP    ?BANKED_LEAVE_SP
    126          }
    127          
    128          //获取图标类型
    129          #pragma location="MINI_FILTER_SEG_1"

   \                                 In segment MINI_FILTER_SEG_1, align 1, keep-with-next
    130          u8 dirfile_type(void)
   \                     dirfile_type:
    131          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 3
   \   000000   C0E0         PUSH    A
   \   000002   C0E0         PUSH    A
   \   000004   C0E0         PUSH    A
    132              if (f_attr_is_dir(&fat_file_opt)) {
   \   000006                ; Setup parameters for call to function f_attr_is_dir
   \   000006   7A..         MOV     R2,#(fat_file_opt & 0xff)
   \   000008   7B..         MOV     R3,#((fat_file_opt >> 8) & 0xff)
   \   00000A   90....       MOV     DPTR,#(f_attr_is_dir & 0xffff)
   \   00000D   74..         MOV     A,#((f_attr_is_dir >> 16) & 0xff)
   \   00000F   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000012   5004         JNC     ??dirfile_type_0
    133                  return FB_FOLDER;               //文件夹
   \   000014   7902         MOV     R1,#0x2
   \   000016   8036         SJMP    ??dirfile_type_1
    134              }
    135              char ext_name[3];
    136              get_ext_name(ext_name,&fat_file_opt);
   \                     ??dirfile_type_0:
   \   000018                ; Setup parameters for call to function get_ext_name
   \   000018   7C..         MOV     R4,#(fat_file_opt & 0xff)
   \   00001A   7D..         MOV     R5,#((fat_file_opt >> 8) & 0xff)
   \   00001C   7582FC       MOV     DPL,#-0x4
   \   00001F   7583FF       MOV     DPH,#-0x1
   \   000022   12....       LCALL   ?EXT_STACK_DISP0_16
   \   000025   AA82         MOV     R2,DPL
   \   000027   AB83         MOV     R3,DPH
   \   000029   90....       MOV     DPTR,#(get_ext_name & 0xffff)
   \   00002C   74..         MOV     A,#((get_ext_name >> 16) & 0xff)
   \   00002E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    137              if (file_is_music(ext_name)) {
   \   000031                ; Setup parameters for call to function file_is_music
   \   000031   7582FC       MOV     DPL,#-0x4
   \   000034   7583FF       MOV     DPH,#-0x1
   \   000037   12....       LCALL   ?EXT_STACK_DISP0_16
   \   00003A   AA82         MOV     R2,DPL
   \   00003C   AB83         MOV     R3,DPH
   \   00003E   90....       MOV     DPTR,#(file_is_music & 0xffff)
   \   000041   74..         MOV     A,#((file_is_music >> 16) & 0xff)
   \   000043   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000046   5004         JNC     ??dirfile_type_2
    138                  return FB_MUSIC;
   \   000048   7904         MOV     R1,#0x4
   \   00004A   8002         SJMP    ??dirfile_type_1
    139              }
    140              return FB_FILE;
   \                     ??dirfile_type_2:
   \   00004C   7903         MOV     R1,#0x3
   \                     ??dirfile_type_1:
   \   00004E   D0E0         POP     A
   \   000050   D0E0         POP     A
   \   000052   D0E0         POP     A
   \   000054   02....       LJMP    ?BRET
    141          }
    142          
    143          //音乐播放的文件过滤器
    144          #pragma location="FILE_FILTER_SEG"

   \                                 In segment FILE_FILTER_SEG, align 1, keep-with-next
    145          bool file_filter_music(void)
   \                     file_filter_music:
    146          {
   \   000000   C0..         PUSH    ?V0 + 0
   \   000002   C0..         PUSH    ?V0 + 1
   \   000004   C0..         PUSH    ?V0 + 2
   \   000006   C0..         PUSH    ?V0 + 3
   \   000008                ; Saved register size: 4
   \   000008                ; Auto size: 3
   \   000008   C0E0         PUSH    A
   \   00000A   C0E0         PUSH    A
   \   00000C   C0E0         PUSH    A
    147              if (!f_attr_is_file(&fat_file_opt)) {
   \   00000E                ; Setup parameters for call to function f_attr_is_file
   \   00000E   7A..         MOV     R2,#(fat_file_opt & 0xff)
   \   000010   7B..         MOV     R3,#((fat_file_opt >> 8) & 0xff)
   \   000012   90....       MOV     DPTR,#(f_attr_is_file & 0xffff)
   \   000015   74..         MOV     A,#((f_attr_is_file >> 16) & 0xff)
   \   000017   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00001A   4004         JC      ??file_filter_music_0
    148                  return false;
   \                     ??file_filter_music_1:
   \   00001C   C3           CLR     C
   \   00001D   02....       LJMP    ??file_filter_music_2 & 0xFFFF
    149              }
    150          
    151              char ext_name[3];
    152              get_ext_name(ext_name,&fat_file_opt);
   \                     ??file_filter_music_0:
   \   000020                ; Setup parameters for call to function get_ext_name
   \   000020   7C..         MOV     R4,#(fat_file_opt & 0xff)
   \   000022   7D..         MOV     R5,#((fat_file_opt >> 8) & 0xff)
   \   000024   7582FC       MOV     DPL,#-0x4
   \   000027   7583FF       MOV     DPH,#-0x1
   \   00002A   12....       LCALL   ?EXT_STACK_DISP0_16
   \   00002D   AA82         MOV     R2,DPL
   \   00002F   AB83         MOV     R3,DPH
   \   000031   90....       MOV     DPTR,#(get_ext_name & 0xffff)
   \   000034   74..         MOV     A,#((get_ext_name >> 16) & 0xff)
   \   000036   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    153              //在EXFAT中，后缀名可能为小写
    154              if (file_is_music(ext_name)) {
   \   000039                ; Setup parameters for call to function file_is_music
   \   000039   7582FC       MOV     DPL,#-0x4
   \   00003C   7583FF       MOV     DPH,#-0x1
   \   00003F   12....       LCALL   ?EXT_STACK_DISP0_16
   \   000042   AA82         MOV     R2,DPL
   \   000044   AB83         MOV     R3,DPH
   \   000046   90....       MOV     DPTR,#(file_is_music & 0xffff)
   \   000049   74..         MOV     A,#((file_is_music >> 16) & 0xff)
   \   00004B   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00004E   4003         JC      $+5
   \   000050   02....       LJMP    ??file_filter_music_3 & 0xFFFF
    155                  /* 此段统计文件夹编号，不用时可屏蔽 */
    156          #if FOLDER_SELECT
    157                  if(f_get_indexbefore() == fs_apiinfo.file_count)
   \   000053                ; Setup parameters for call to function f_get_indexbefore
   \   000053   90....       MOV     DPTR,#(f_get_indexbefore & 0xffff)
   \   000056   74..         MOV     A,#((f_get_indexbefore >> 16) & 0xff)
   \   000058   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00005B   8A..         MOV     ?V0 + 0,R2
   \   00005D   8B..         MOV     ?V0 + 1,R3
   \   00005F   A8..         MOV     R0,?V0 + 0
   \   000061   A9..         MOV     R1,?V0 + 1
   \   000063   90....       MOV     DPTR,#(fs_apiinfo + 4)
   \   000066   E0           MOVX    A,@DPTR
   \   000067   68           XRL     A,R0
   \   000068   7003         JNZ     ??file_filter_music_4
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   69           XRL     A,R1
   \                     ??file_filter_music_4:
   \   00006D   7037         JNZ     ??file_filter_music_5
    158                  {
    159                      fs_apiinfo.dir_count++;
   \   00006F   90....       MOV     DPTR,#(fs_apiinfo + 6)
   \   000072   12....       LCALL   ??Subroutine0_0
    160                      if(fs_apiinfo.dir_number == fs_apiinfo.dir_count) {
   \                     ??CrossCallReturnLabel_1:
   \   000075   90....       MOV     DPTR,#(fs_apiinfo + 8)
   \   000078   E0           MOVX    A,@DPTR
   \   000079   F8           MOV     R0,A
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F9           MOV     R1,A
   \   00007D   90....       MOV     DPTR,#(fs_apiinfo + 6)
   \   000080   E0           MOVX    A,@DPTR
   \   000081   68           XRL     A,R0
   \   000082   7003         JNZ     ??file_filter_music_6
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   69           XRL     A,R1
   \                     ??file_filter_music_6:
   \   000087   701D         JNZ     ??file_filter_music_5
    161                          fs_apiinfo.file_number = f_get_indexbefore()+1;
   \   000089                ; Setup parameters for call to function f_get_indexbefore
   \   000089   90....       MOV     DPTR,#(f_get_indexbefore & 0xffff)
   \   00008C   74..         MOV     A,#((f_get_indexbefore >> 16) & 0xff)
   \   00008E   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   000091   8A..         MOV     ?V0 + 0,R2
   \   000093   8B..         MOV     ?V0 + 1,R3
   \   000095   7401         MOV     A,#0x1
   \   000097   25..         ADD     A,?V0 + 0
   \   000099   F8           MOV     R0,A
   \   00009A   E4           CLR     A
   \   00009B   35..         ADDC    A,?V0 + 1
   \   00009D   F9           MOV     R1,A
   \   00009E   90....       MOV     DPTR,#(fs_apiinfo + 2)
   \   0000A1   E8           MOV     A,R0
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   E9           MOV     A,R1
   \   0000A5   F0           MOVX    @DPTR,A
    162                      }
    163                  }
    164          #endif
    165                  fs_apiinfo.file_count++;
   \                     ??file_filter_music_5:
   \   0000A6   12....       LCALL   ?Subroutine0
    166                //  printf("F:%d %d\n", fs_apiinfo.file_number, fs_apiinfo.file_count);
    167                  file_path_save_hook();
   \                     ??CrossCallReturnLabel_2:
   \   0000A9                ; Setup parameters for call to function file_path_save_hook
   \   0000A9   90....       MOV     DPTR,#(file_path_save_hook & 0xffff)
   \   0000AC   74..         MOV     A,#((file_path_save_hook >> 16) & 0xff)
   \   0000AE   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
    168                  if(sys_ctl.sclust == fat_file_opt.sclust)
   \   0000B1   90....       MOV     DPTR,#(fat_file_opt + 25)
   \   0000B4   78..         MOV     R0,#?V0 + 0
   \   0000B6   12....       LCALL   ?L_MOV_X
   \   0000B9   7583..       MOV     DPH,#(((sys_ctl + 37) >> 8) & 0xff)
   \   0000BC   7582..       MOV     DPL,#((sys_ctl + 37) & 0xff)
   \   0000BF   78..         MOV     R0,#?V0 + 0
   \   0000C1   12....       LCALL   ?L_EQ_X
   \   0000C4   7010         JNZ     ??file_filter_music_7
    169                  {
    170                      sys_ctl.file_num = fs_apiinfo.file_count;
   \   0000C6   90....       MOV     DPTR,#(fs_apiinfo + 4)
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   F8           MOV     R0,A
   \   0000CB   A3           INC     DPTR
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   F9           MOV     R1,A
   \   0000CE   90....       MOV     DPTR,#(sys_ctl + 41)
   \   0000D1   E8           MOV     A,R0
   \   0000D2   F0           MOVX    @DPTR,A
   \   0000D3   A3           INC     DPTR
   \   0000D4   E9           MOV     A,R1
   \   0000D5   F0           MOVX    @DPTR,A
    171                  }
    172                  return file_is_target_number();
   \                     ??file_filter_music_7:
   \   0000D6                ; Setup parameters for call to function file_is_target_number
   \   0000D6   90....       MOV     DPTR,#(file_is_target_number & 0xffff)
   \   0000D9   74..         MOV     A,#((file_is_target_number >> 16) & 0xff)
   \   0000DB   801D         SJMP    ??file_filter_music_8
    173              }
    174          #if TASK_UPDATE_FW_EN
    175              else if((task_ctl.work_sta == TASK_MUSIC) && (t_msc.music_total == 0)) {    //在获取音乐文件总数的时候顺便查找是否有升级文件
   \                     ??file_filter_music_3:
   \   0000DD   90....       MOV     DPTR,#task_ctl
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   6405         XRL     A,#0x5
   \   0000E3   6003         JZ      $+5
   \   0000E5   02....       LJMP    ??file_filter_music_1 & 0xFFFF
   \   0000E8   90....       MOV     DPTR,#(t_msc + 3)
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   7002         JNZ     ??file_filter_music_9
   \   0000EE   A3           INC     DPTR
   \   0000EF   E0           MOVX    A,@DPTR
   \                     ??file_filter_music_9:
   \   0000F0   6003         JZ      $+5
   \   0000F2   02....       LJMP    ??file_filter_music_1 & 0xFFFF
    176                  return filter_binfile();
   \   0000F5                ; Setup parameters for call to function filter_binfile
   \   0000F5   90....       MOV     DPTR,#(filter_binfile & 0xffff)
   \   0000F8   74..         MOV     A,#((filter_binfile >> 16) & 0xff)
   \                     ??file_filter_music_8:
   \   0000FA   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \                     ??file_filter_music_2:
   \   0000FD   D0E0         POP     A
   \   0000FF   D0E0         POP     A
   \   000101   D0E0         POP     A
   \   000103   02....       LJMP    ?Subroutine1
    177              }
    178          #endif
    179              return false;
    180          }
    181          
    182          #if MUSIC_ENCRYPT_EN
    183          //判断是否为加密mp3
    184          #pragma location="MUSIC_SEG"
    185          void music_check_encrypt(void)
    186          {
    187              char ext_name[3];
    188              get_ext_name(ext_name,&fat_file_opt);
    189              //在EXFAT中，后缀名可能为小写
    190              if (ext_name[2] == 'x') {
    191                  music_encrypt = 1;      //加密MP3
    192              } else {
    193                  music_encrypt = 0;      //原始MP3
    194              }
    195          }
    196          #endif
    197          
    198          //音乐播放的目录过滤器
    199          #pragma location="FILE_FILTER_SEG"

   \                                 In segment FILE_FILTER_SEG, align 1, keep-with-next
    200          bool dir_filter_music(void)
   \                     dir_filter_music:
    201          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    202              if (!f_attr_is_dir(&fat_file_opt)) {
   \   000000                ; Setup parameters for call to function f_attr_is_dir
   \   000000   7A..         MOV     R2,#(fat_file_opt & 0xff)
   \   000002   7B..         MOV     R3,#((fat_file_opt >> 8) & 0xff)
   \   000004   90....       MOV     DPTR,#(f_attr_is_dir & 0xffff)
   \   000007   74..         MOV     A,#((f_attr_is_dir >> 16) & 0xff)
   \   000009   12....       LCALL   ?BCALL               ; Banked call to: DPTR()
   \   00000C   4003         JC      ??dir_filter_music_0
    203                  return false;
   \   00000E   C3           CLR     C
   \   00000F   8001         SJMP    ??dir_filter_music_1
    204              }
    205              //判断文件夹的深度为0（即文件夹在根目录），并且文件夹的名字为tbl_dir_record_name
    206          #if TASK_VOICE_EN
    207              if (get_scan_dept() == 0 && 0 == memcmp(fat_file_opt.fname, (char *)tbl_dir_record_name, 6)) {
    208                  return false;   //过滤掉根目录下的RECORD文件夹
    209              }
    210          #endif
    211              return true;
   \                     ??dir_filter_music_0:
   \   000011   D3           SETB    C
   \                     ??dir_filter_music_1:
   \   000012   02....       LJMP    ?BRET
    212          }
    213          
    214          #if TASK_VOICE_EN
    215          //录音播放的文件过滤器
    216          #pragma location="FILE_FILTER_SEG"
    217          bool file_filter_voice(void)
    218          {
    219              //printf(":%d\n",get_scan_dept());
    220              if (get_scan_dept() == 1) {
    221                  return file_filter_music();
    222              }
    223              return false;
    224          }
    225          
    226          //录音播放的目录过滤器
    227          #pragma location="FILE_FILTER_SEG"
    228          bool dir_filter_voice(void)
    229          {
    230              //下面的判断是!取反，所以要加这个判断
    231              if (!f_attr_is_dir(&fat_file_opt)) {
    232                  return false;
    233              }
    234              return !dir_filter_music();
    235          }
    236          #endif
    237          
    238          #if MUSIC_LRC_EN
    239          IAR_XDATA_A char lrc_filename[100] @ 0x10FD0;
    240          IAR_XDATA_A char filename_temp[100] @ 0x11034;
    241          IAR_XDATA_A char lrc_filename_temp[100] @ 0x11098;
    242          
    243          //匹配长文件名
    244          #pragma location = "FAT_SEG"
    245          bool compare_lrc_longname(void)
    246          {
    247              f_get_filename(lrc_filename);
    248              u8 mfile_len, lrcfile_len;
    249          
    250              mfile_len = ustr_get(filename_temp, filename);
    251              lrcfile_len = ustr_get(lrc_filename_temp, lrc_filename);
    252              if (mfile_len == lrcfile_len && mfile_len >= 6) {
    253                  if (0 == memcmp(filename_temp, lrc_filename_temp, mfile_len - 6)) {
    254                      return true;
    255                  }
    256              }
    257              return false;
    258          }
    259          
    260          //LRC文件过滤器，歌词文件确认
    261          #pragma location="LRC_FILTER_SEG"
    262          bool file_filter_lrc(void)
    263          {
    264              if (!f_attr_is_file(&fat_file)) {
    265                  return false;
    266              }
    267              char ext_name[3];
    268              bool res = false;
    269              get_ext_name(ext_name,&fat_file);
    270              //在EXFAT中，后缀名可能为小写
    271              if (0 == memcmp(ext_name, (char *)tbl_lrc_ext, 3)) {
    272                  res = true;
    273              }
    274              if (!res) {
    275                  return false;
    276              }
    277                  //这是一个歌词文件
    278              //先使用短文件名前2byte判断歌词
    279                          //printf("%s\n", fat_file.fname);
    280                          //printf("%s\n", filename);
    281              if (0 != memcmp(fat_file_opt.fname,fat_file.fname, 2)) {
    282                  return false;
    283              }
    284              //匹配长文件名
    285              if (!compare_lrc_longname()) {
    286                  return false;
    287              }
    288              return true;
    289          }
    290          #endif
    291          

   \                                 In segment BANKED_CODE, align 1, keep-with-next
    292          u16 GetFileLength(void)
   \                     GetFileLength:
    293          {
   \   000000   C0..         PUSH    ?V0 + 0
   \   000002   C0..         PUSH    ?V0 + 1
   \   000004   C0..         PUSH    ?V0 + 2
   \   000006   C0..         PUSH    ?V0 + 3
   \   000008                ; Saved register size: 4
   \   000008                ; Auto size: 0
    294              return (u16)(fat_file_opt.fsize >> 8);
   \   000008   90....       MOV     DPTR,#(fat_file_opt + 21)
   \   00000B   78..         MOV     R0,#?V0 + 0
   \   00000D   12....       LCALL   ?L_MOV_X
   \   000010   7408         MOV     A,#0x8
   \   000012   78..         MOV     R0,#?V0 + 0
   \   000014   12....       LCALL   ?UL_SHR
   \   000017   AA..         MOV     R2,?V0 + 0
   \   000019   AB..         MOV     R3,?V0 + 1
   \   00001B   D0..         POP     ?V0 + 3
   \   00001D   D0..         POP     ?V0 + 2
   \   00001F   D0..         POP     ?V0 + 1
   \   000021   D0..         POP     ?V0 + 0
   \   000023   02....       LJMP    ?BRET
    295          }

   Maximum stack usage in bytes:

     Function                   EXT_STACK PSTACK XSTACK
     --------                   --------- ------ ------
     GetFileLength                     4      0      0
     dir_filter_music                  0      0      0
       -> f_attr_is_dir                0      0      0
     dirfile_type                      3      0      0
       -> f_attr_is_dir                6      0      0
       -> get_ext_name                 6      0      0
       -> file_is_music                6      0      0
     file_filter_all                   0      0      0
       -> f_attr_is_file               0      0      0
       -> file_is_target_number        0      0      0
     file_filter_music                 9      0      0
       -> f_attr_is_file              14      0      0
       -> get_ext_name                14      0      0
       -> file_is_music               14      0      0
       -> f_get_indexbefore           14      0      0
       -> f_get_indexbefore           14      0      0
       -> file_path_save_hook         14      0      0
       -> file_is_target_number       14      0      0
       -> filter_binfile              14      0      0
     file_is_music                    14      0      0
       -> mem_cmp                     14      0      0
     file_is_target_number             7      0      0
     filter_binfile                    9      0      0
       -> get_scan_dept                4      0      0
       -> mem_cmp                      4      0      0
       -> mem_cmp                      4      0      0
     get_ext_name                      9      0      0
       -> smemcpy                      4      0      0
       -> string_tolower               4      0      0
     get_sclust_addr                   4      0      0
     ustr_get                          6      0      0
       -> smemcpy                     10      0      0


   Segment part sizes:

     Function/Label        Bytes
     --------------        -----
     tbl_music_ext           12
     tbl_txt_ext              4
     tbl_dir_record_name      7
     tbl_bin_name             4
     tbl_bin_ext              4
     tbl_lrc_ext              4
     filter_binfile          65
     ?Subroutine1            11
     get_sclust_addr         24
     file_is_target_number   27
     file_filter_all         31
     ?Subroutine0            13
     ustr_get               168
     get_ext_name            41
     file_is_music           67
     dirfile_type            87
     file_filter_music      262
     dir_filter_music        21
     GetFileLength           38

 
  38 bytes in segment BANKED_CODE
 168 bytes in segment FAT_SEG
  31 bytes in segment FILE_FILTER_CONST
 562 bytes in segment FILE_FILTER_SEG
   4 bytes in segment LRC_FILTER_CONST
  87 bytes in segment MINI_FILTER_SEG_1
 
 890 bytes of CODE memory

Errors: none
Warnings: none
